{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":14,"numPassedTests":477,"numPendingTestSuites":0,"numPendingTests":4,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":14,"numTotalTests":481,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1674625352179,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["view","controller handling"],"failureMessages":[],"fullName":"view controller handling uses the controllerProvider to get controller dynamically","location":null,"status":"passed","title":"uses the controllerProvider to get controller dynamically"}],"endTime":1674625381372,"message":"","name":"/home/flakie/package/test/viewSpec.ts","startTime":1674625365973,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Ng1 StateBuilder"],"failureMessages":[],"fullName":"Ng1 StateBuilder should use the state object to build a default view, when no `views` property is found","location":null,"status":"passed","title":"should use the state object to build a default view, when no `views` property is found"},{"ancestorTitles":["Ng1 StateBuilder"],"failureMessages":[],"fullName":"Ng1 StateBuilder It should use the views object to build views, when defined","location":null,"status":"passed","title":"It should use the views object to build views, when defined"},{"ancestorTitles":["Ng1 StateBuilder"],"failureMessages":[],"fullName":"Ng1 StateBuilder should not allow a view config with both component and template keys","location":null,"status":"passed","title":"should not allow a view config with both component and template keys"},{"ancestorTitles":["Ng1 StateBuilder"],"failureMessages":[],"fullName":"Ng1 StateBuilder should replace a resolve: string value with a function that injects the service of the same name","location":null,"status":"passed","title":"should replace a resolve: string value with a function that injects the service of the same name"}],"endTime":1674625381577,"message":"","name":"/home/flakie/package/test/ng1StateBuilderSpec.ts","startTime":1674625366684,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["uiView","scrollIntoView"],"failureMessages":[],"fullName":"uiView scrollIntoView should scroll element into view after timeout","location":null,"status":"passed","title":"should scroll element into view after timeout"},{"ancestorTitles":["uiView","scrollIntoView"],"failureMessages":[],"fullName":"uiView scrollIntoView should return the promise from the timeout","location":null,"status":"passed","title":"should return the promise from the timeout"},{"ancestorTitles":["uiView","useAnchorScroll"],"failureMessages":[],"fullName":"uiView useAnchorScroll should call $anchorScroll","location":null,"status":"passed","title":"should call $anchorScroll"}],"endTime":1674625386864,"message":"","name":"/home/flakie/package/test/viewScrollSpec.ts","startTime":1674625367270,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["templateFactory"],"failureMessages":[],"fullName":"templateFactory exists","location":null,"status":"passed","title":"exists"},{"ancestorTitles":["templateFactory","should follow $sce policy and"],"failureMessages":[],"fullName":"templateFactory should follow $sce policy and accepts relative URLs","location":null,"status":"passed","title":"accepts relative URLs"},{"ancestorTitles":["templateFactory","should follow $sce policy and"],"failureMessages":[],"fullName":"templateFactory should follow $sce policy and rejects untrusted URLs","location":null,"status":"passed","title":"rejects untrusted URLs"},{"ancestorTitles":["templateFactory","should follow $sce policy and"],"failureMessages":[],"fullName":"templateFactory should follow $sce policy and accepts explicitly trusted URLs","location":null,"status":"passed","title":"accepts explicitly trusted URLs"},{"ancestorTitles":["templateFactory","templateFactory with forced use of $http service"],"failureMessages":[],"fullName":"templateFactory templateFactory with forced use of $http service does not restrict URL loading","location":null,"status":"passed","title":"does not restrict URL loading"},{"ancestorTitles":["templateFactory","component template builder"],"failureMessages":[],"fullName":"templateFactory component template builder should not prefix the components dom element with anything","location":null,"status":"passed","title":"should not prefix the components dom element with anything"},{"ancestorTitles":["templateFactory","component template builder"],"failureMessages":[],"fullName":"templateFactory component template builder should prefix the components dom element with x- for components named dataFoo","location":null,"status":"passed","title":"should prefix the components dom element with x- for components named dataFoo"},{"ancestorTitles":["templateFactory","component template builder"],"failureMessages":[],"fullName":"templateFactory component template builder should prefix the components dom element with x- for components named xFoo","location":null,"status":"passed","title":"should prefix the components dom element with x- for components named xFoo"}],"endTime":1674625388172,"message":"","name":"/home/flakie/package/test/templateFactorySpec.ts","startTime":1674625367276,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["UrlRouter","provider"],"failureMessages":[],"fullName":"UrlRouter provider should throw on non-function rules","location":null,"status":"passed","title":"should throw on non-function rules"},{"ancestorTitles":["UrlRouter","provider"],"failureMessages":[],"fullName":"UrlRouter provider should allow location changes to be deferred","location":null,"status":"passed","title":"should allow location changes to be deferred"},{"ancestorTitles":["UrlRouter","service"],"failureMessages":[],"fullName":"UrlRouter service should execute rewrite rules","location":null,"status":"passed","title":"should execute rewrite rules"},{"ancestorTitles":["UrlRouter","service"],"failureMessages":[],"fullName":"UrlRouter service should keep otherwise last","location":null,"status":"passed","title":"should keep otherwise last"},{"ancestorTitles":["UrlRouter","service"],"failureMessages":[],"fullName":"UrlRouter service can be cancelled by preventDefault() in $locationChangeSuccess","location":null,"status":"passed","title":"can be cancelled by preventDefault() in $locationChangeSuccess"},{"ancestorTitles":["UrlRouter","service"],"failureMessages":[],"fullName":"UrlRouter service can be deferred and updated in $locationChangeSuccess","location":null,"status":"passed","title":"can be deferred and updated in $locationChangeSuccess"},{"ancestorTitles":["UrlRouter","service"],"failureMessages":[],"fullName":"UrlRouter service rule should return a deregistration function","location":null,"status":"passed","title":"rule should return a deregistration function"},{"ancestorTitles":["UrlRouter","service"],"failureMessages":[],"fullName":"UrlRouter service removeRule should remove a previously registered rule","location":null,"status":"passed","title":"removeRule should remove a previously registered rule"},{"ancestorTitles":["UrlRouter","service","location updates"],"failureMessages":[],"fullName":"UrlRouter service location updates can push location changes","location":null,"status":"passed","title":"can push location changes"},{"ancestorTitles":["UrlRouter","service","location updates"],"failureMessages":[],"fullName":"UrlRouter service location updates can push a replacement location","location":null,"status":"passed","title":"can push a replacement location"},{"ancestorTitles":["UrlRouter","service","location updates"],"failureMessages":[],"fullName":"UrlRouter service location updates can push location changes with no parameters","location":null,"status":"passed","title":"can push location changes with no parameters"},{"ancestorTitles":["UrlRouter","service","location updates"],"failureMessages":[],"fullName":"UrlRouter service location updates can push an empty url","location":null,"status":"passed","title":"can push an empty url"},{"ancestorTitles":["UrlRouter","service","location updates"],"failureMessages":[],"fullName":"UrlRouter service location updates updates url after an empty url is pushed","location":null,"status":"passed","title":"updates url after an empty url is pushed"},{"ancestorTitles":["UrlRouter","service","location updates"],"failureMessages":[],"fullName":"UrlRouter service location updates updates html5mode url after an empty url is pushed","location":null,"status":"passed","title":"updates html5mode url after an empty url is pushed"},{"ancestorTitles":["UrlRouter","service","location updates"],"failureMessages":[],"fullName":"UrlRouter service location updates can push location changes that include a #fragment","location":null,"status":"passed","title":"can push location changes that include a #fragment"},{"ancestorTitles":["UrlRouter","service","location updates"],"failureMessages":[],"fullName":"UrlRouter service location updates can read and sync a copy of location URL","location":null,"status":"passed","title":"can read and sync a copy of location URL"},{"ancestorTitles":["UrlRouter","service","location updates"],"failureMessages":[],"fullName":"UrlRouter service location updates can read and sync a copy of location URL including query params","location":null,"status":"passed","title":"can read and sync a copy of location URL including query params"},{"ancestorTitles":["UrlRouter","service","URL generation"],"failureMessages":[],"fullName":"UrlRouter service URL generation should return null when UrlMatcher rejects parameters","location":null,"status":"passed","title":"should return null when UrlMatcher rejects parameters"},{"ancestorTitles":["UrlRouter","service","URL generation"],"failureMessages":[],"fullName":"UrlRouter service URL generation should handle the new html5Mode object config from Angular 1.3","location":null,"status":"passed","title":"should handle the new html5Mode object config from Angular 1.3"},{"ancestorTitles":["UrlRouter","service","URL generation"],"failureMessages":[],"fullName":"UrlRouter service URL generation should return URLs with #fragments","location":null,"status":"passed","title":"should return URLs with #fragments"},{"ancestorTitles":["UrlRouter","service","URL generation"],"failureMessages":[],"fullName":"UrlRouter service URL generation should return URLs with #fragments when html5Mode is true & browser does not support pushState","location":null,"status":"passed","title":"should return URLs with #fragments when html5Mode is true & browser does not support pushState"}],"endTime":1674625391771,"message":"","name":"/home/flakie/package/test/urlRouterSpec.ts","startTime":1674625367264,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["isState filter"],"failureMessages":[],"fullName":"isState filter should return true if the current state exactly matches the input state","location":null,"status":"passed","title":"should return true if the current state exactly matches the input state"},{"ancestorTitles":["isState filter"],"failureMessages":[],"fullName":"isState filter should return false if the current state does not exactly match the input state","location":null,"status":"passed","title":"should return false if the current state does not exactly match the input state"},{"ancestorTitles":["isState filter"],"failureMessages":[],"fullName":"isState filter should return true if the current state and param matches the input state","location":null,"status":"passed","title":"should return true if the current state and param matches the input state"},{"ancestorTitles":["isState filter"],"failureMessages":[],"fullName":"isState filter should return false if the current state and param does not match the input state","location":null,"status":"passed","title":"should return false if the current state and param does not match the input state"},{"ancestorTitles":["includedByState filter"],"failureMessages":[],"fullName":"includedByState filter should return true if the current state exactly matches the input state","location":null,"status":"passed","title":"should return true if the current state exactly matches the input state"},{"ancestorTitles":["includedByState filter"],"failureMessages":[],"fullName":"includedByState filter should return true if the current state includes the input state","location":null,"status":"passed","title":"should return true if the current state includes the input state"},{"ancestorTitles":["includedByState filter"],"failureMessages":[],"fullName":"includedByState filter should return false if the current state does not include input state","location":null,"status":"passed","title":"should return false if the current state does not include input state"},{"ancestorTitles":["includedByState filter"],"failureMessages":[],"fullName":"includedByState filter should return true if the current state include input state and params","location":null,"status":"passed","title":"should return true if the current state include input state and params"},{"ancestorTitles":["includedByState filter"],"failureMessages":[],"fullName":"includedByState filter should return false if the current state does not include input state and params","location":null,"status":"passed","title":"should return false if the current state does not include input state and params"}],"endTime":1674625392369,"message":"","name":"/home/flakie/package/test/stateFiltersSpec.ts","startTime":1674625369872,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Resolvables system:","strictDi support"],"failureMessages":[],"fullName":"Resolvables system: strictDi support should throw when creating a resolvable with an unannotated fn and strictDi mode on","location":null,"status":"passed","title":"should throw when creating a resolvable with an unannotated fn and strictDi mode on"},{"ancestorTitles":["Resolvables system:","strictDi support"],"failureMessages":[],"fullName":"Resolvables system: strictDi support should not throw when creating a resolvable with an annotated fn and strictDi mode on","location":null,"status":"passed","title":"should not throw when creating a resolvable with an annotated fn and strictDi mode on"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() calls injectable functions and returns a promise","location":null,"status":"passed","title":"calls injectable functions and returns a promise"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() resolves promises returned from the functions","location":null,"status":"passed","title":"resolves promises returned from the functions"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() resolves dependencies between functions","location":null,"status":"passed","title":"resolves dependencies between functions"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() resolves dependencies between functions that return promises","location":null,"status":"passed","title":"resolves dependencies between functions that return promises"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() refuses cyclic dependencies","location":null,"status":"pending","title":"refuses cyclic dependencies"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() allows a function to depend on an injector value of the same name","location":null,"status":"passed","title":"allows a function to depend on an injector value of the same name"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() allows locals to be passed that override the injector","location":null,"status":"passed","title":"allows locals to be passed that override the injector"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() does not call injectables overridden by a local","location":null,"status":"passed","title":"does not call injectables overridden by a local"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() includes locals in the returned values","location":null,"status":"passed","title":"includes locals in the returned values"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() allows inheritance from a parent resolve()","location":null,"status":"passed","title":"allows inheritance from a parent resolve()"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() resolves dependencies from a parent resolve()","location":null,"status":"passed","title":"resolves dependencies from a parent resolve()"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() allow access to ancestor resolves in descendent resolve blocks","location":null,"status":"passed","title":"allow access to ancestor resolves in descendent resolve blocks"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() allow parent resolve to override grandparent resolve","location":null,"status":"passed","title":"allow parent resolve to override grandparent resolve"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() allows a function to override a parent value of the same name","location":null,"status":"passed","title":"allows a function to override a parent value of the same name"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() allows a function to override a parent value of the same name with a promise","location":null,"status":"passed","title":"allows a function to override a parent value of the same name with a promise"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() it only resolves after the parent resolves","location":null,"status":"passed","title":"it only resolves after the parent resolves"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() rejects missing dependencies but does not fail synchronously","location":null,"status":"passed","title":"rejects missing dependencies but does not fail synchronously"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() propagates exceptions thrown by the functions as a rejection","location":null,"status":"passed","title":"propagates exceptions thrown by the functions as a rejection"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() propagates errors from a parent resolve","location":null,"status":"passed","title":"propagates errors from a parent resolve"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() does not invoke any functions if the parent resolve has already failed","location":null,"status":"passed","title":"does not invoke any functions if the parent resolve has already failed"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() does not invoke any more functions after a failure","location":null,"status":"pending","title":"does not invoke any more functions after a failure"},{"ancestorTitles":["$resolve",".resolve()"],"failureMessages":[],"fullName":"$resolve .resolve() does not invoke any more functions after a parent failure","location":null,"status":"passed","title":"does not invoke any more functions after a parent failure"},{"ancestorTitles":["Integration: Resolvables system"],"failureMessages":[],"fullName":"Integration: Resolvables system should not re-resolve data, when redirecting to a child","location":null,"status":"passed","title":"should not re-resolve data, when redirecting to a child"},{"ancestorTitles":["Integration: Resolvables system"],"failureMessages":[],"fullName":"Integration: Resolvables system should not inject child data into parent","location":null,"status":"passed","title":"should not inject child data into parent"},{"ancestorTitles":["Integration: Resolvables system"],"failureMessages":[],"fullName":"Integration: Resolvables system should inject a promise for NOWAIT resolve into a controller","location":null,"status":"passed","title":"should inject a promise for NOWAIT resolve into a controller"},{"ancestorTitles":["Integration: Resolvables system"],"failureMessages":[],"fullName":"Integration: Resolvables system should bind a promise for NOWAIT resolve onto a component controller","location":null,"status":"passed","title":"should bind a promise for NOWAIT resolve onto a component controller"}],"endTime":1674625392676,"message":"","name":"/home/flakie/package/test/resolveSpec.ts","startTime":1674625367380,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() triggers $stateChangeStart","location":null,"status":"passed","title":"triggers $stateChangeStart"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() can be cancelled by preventDefault() in $stateChangeStart","location":null,"status":"passed","title":"can be cancelled by preventDefault() in $stateChangeStart"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() triggers $stateNotFound","location":null,"status":"passed","title":"triggers $stateNotFound"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() throws Error on failed relative state resolution","location":null,"status":"passed","title":"throws Error on failed relative state resolution"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() sends $stateChangeError for exceptions in onEnter","location":null,"status":"passed","title":"sends $stateChangeError for exceptions in onEnter"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() can be cancelled by preventDefault() in $stateNotFound","location":null,"status":"passed","title":"can be cancelled by preventDefault() in $stateNotFound"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() can be redirected in $stateNotFound","location":null,"status":"passed","title":"can be redirected in $stateNotFound"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() can lazy-define a state in $stateNotFound","location":null,"status":"passed","title":"can lazy-define a state in $stateNotFound"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() can defer a state transition in $stateNotFound","location":null,"status":"passed","title":"can defer a state transition in $stateNotFound"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() can defer and supersede a state transition in $stateNotFound","location":null,"status":"passed","title":"can defer and supersede a state transition in $stateNotFound"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() triggers $stateChangeSuccess","location":null,"status":"passed","title":"triggers $stateChangeSuccess"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() does not trigger $stateChangeSuccess when suppressed, but changes state","location":null,"status":"passed","title":"does not trigger $stateChangeSuccess when suppressed, but changes state"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() does not trigger $stateChangeSuccess when suppressed, but updates params","location":null,"status":"passed","title":"does not trigger $stateChangeSuccess when suppressed, but updates params"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() aborts pending transitions even when going back to the current state","location":null,"status":"passed","title":"aborts pending transitions even when going back to the current state"},{"ancestorTitles":["UI-Router v0.2.x $state events",".transitionTo()"],"failureMessages":[],"fullName":"UI-Router v0.2.x $state events .transitionTo() aborts pending transitions (last call wins)","location":null,"status":"passed","title":"aborts pending transitions (last call wins)"}],"endTime":1674625393065,"message":"","name":"/home/flakie/package/test/stateEventsSpec.ts","startTime":1674625368574,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["UI-Router services"],"failureMessages":[],"fullName":"UI-Router services Should expose ui-router providers from the UIRouter instance","location":null,"status":"passed","title":"Should expose ui-router providers from the UIRouter instance"},{"ancestorTitles":["UI-Router services"],"failureMessages":[],"fullName":"UI-Router services Should expose ui-router services from the UIRouter instance","location":null,"status":"passed","title":"Should expose ui-router services from the UIRouter instance"}],"endTime":1674625393971,"message":"","name":"/home/flakie/package/test/servicesSpec.ts","startTime":1674625374972,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["view hooks","uiCanExit"],"failureMessages":[],"fullName":"view hooks uiCanExit can cancel a transition that would exit the view's state by returning false","location":null,"status":"passed","title":"can cancel a transition that would exit the view's state by returning false"},{"ancestorTitles":["view hooks","uiCanExit"],"failureMessages":[],"fullName":"view hooks uiCanExit can allow the transition by returning true","location":null,"status":"passed","title":"can allow the transition by returning true"},{"ancestorTitles":["view hooks","uiCanExit"],"failureMessages":[],"fullName":"view hooks uiCanExit can allow the transition by returning nothing","location":null,"status":"passed","title":"can allow the transition by returning nothing"},{"ancestorTitles":["view hooks","uiCanExit"],"failureMessages":[],"fullName":"view hooks uiCanExit can redirect the transition","location":null,"status":"passed","title":"can redirect the transition"},{"ancestorTitles":["view hooks","uiCanExit"],"failureMessages":[],"fullName":"view hooks uiCanExit can cancel the transition by returning a rejected promise","location":null,"status":"passed","title":"can cancel the transition by returning a rejected promise"},{"ancestorTitles":["view hooks","uiCanExit"],"failureMessages":[],"fullName":"view hooks uiCanExit can wait for a promise and then reject the transition","location":null,"status":"passed","title":"can wait for a promise and then reject the transition"},{"ancestorTitles":["view hooks","uiCanExit"],"failureMessages":[],"fullName":"view hooks uiCanExit can wait for a promise and then allow the transition","location":null,"status":"passed","title":"can wait for a promise and then allow the transition"},{"ancestorTitles":["view hooks","uiCanExit"],"failureMessages":[],"fullName":"view hooks uiCanExit has 'this' bound to the controller","location":null,"status":"passed","title":"has 'this' bound to the controller"},{"ancestorTitles":["view hooks","uiCanExit"],"failureMessages":[],"fullName":"view hooks uiCanExit receives the new Transition as the first argument","location":null,"status":"passed","title":"receives the new Transition as the first argument"},{"ancestorTitles":["view hooks","uiCanExit"],"failureMessages":[],"fullName":"view hooks uiCanExit should trigger once when answered truthy even if redirected","location":null,"status":"passed","title":"should trigger once when answered truthy even if redirected"},{"ancestorTitles":["view hooks","uiCanExit"],"failureMessages":[],"fullName":"view hooks uiCanExit should trigger only once if returns a redirect","location":null,"status":"passed","title":"should trigger only once if returns a redirect"}],"endTime":1674625394571,"message":"","name":"/home/flakie/package/test/viewHookSpec.ts","startTime":1674625368664,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["UrlMatcher","provider"],"failureMessages":[],"fullName":"UrlMatcher provider should factory matchers with correct configuration","location":null,"status":"passed","title":"should factory matchers with correct configuration"},{"ancestorTitles":["UrlMatcher","provider"],"failureMessages":[],"fullName":"UrlMatcher provider should correctly validate UrlMatcher interface","location":null,"status":"passed","title":"should correctly validate UrlMatcher interface"},{"ancestorTitles":["UrlMatcher"],"failureMessages":[],"fullName":"UrlMatcher should match static URLs","location":null,"status":"passed","title":"should match static URLs"},{"ancestorTitles":["UrlMatcher"],"failureMessages":[],"fullName":"UrlMatcher should match static case insensitive URLs","location":null,"status":"passed","title":"should match static case insensitive URLs"},{"ancestorTitles":["UrlMatcher"],"failureMessages":[],"fullName":"UrlMatcher should match against the entire path","location":null,"status":"passed","title":"should match against the entire path"},{"ancestorTitles":["UrlMatcher"],"failureMessages":[],"fullName":"UrlMatcher should parse parameter placeholders","location":null,"status":"passed","title":"should parse parameter placeholders"},{"ancestorTitles":["UrlMatcher"],"failureMessages":[],"fullName":"UrlMatcher should encode and decode duplicate query string values as array","location":null,"status":"passed","title":"should encode and decode duplicate query string values as array"},{"ancestorTitles":["UrlMatcher"],"failureMessages":[],"fullName":"UrlMatcher should encode and decode slashes in parameter values as ~2F","location":null,"status":"passed","title":"should encode and decode slashes in parameter values as ~2F"},{"ancestorTitles":["UrlMatcher"],"failureMessages":[],"fullName":"UrlMatcher should encode and decode tildes in parameter values as ~~","location":null,"status":"passed","title":"should encode and decode tildes in parameter values as ~~"},{"ancestorTitles":["UrlMatcher","snake-case parameters"],"failureMessages":[],"fullName":"UrlMatcher snake-case parameters should match if properly formatted","location":null,"status":"passed","title":"should match if properly formatted"},{"ancestorTitles":["UrlMatcher","snake-case parameters"],"failureMessages":[],"fullName":"UrlMatcher snake-case parameters should not match if invalid","location":null,"status":"passed","title":"should not match if invalid"},{"ancestorTitles":["UrlMatcher","parameters containing periods"],"failureMessages":[],"fullName":"UrlMatcher parameters containing periods should match if properly formatted","location":null,"status":"passed","title":"should match if properly formatted"},{"ancestorTitles":["UrlMatcher","parameters containing periods"],"failureMessages":[],"fullName":"UrlMatcher parameters containing periods should not match if invalid","location":null,"status":"passed","title":"should not match if invalid"},{"ancestorTitles":["UrlMatcher",".exec()"],"failureMessages":[],"fullName":"UrlMatcher .exec() should capture parameter values","location":null,"status":"passed","title":"should capture parameter values"},{"ancestorTitles":["UrlMatcher",".exec()"],"failureMessages":[],"fullName":"UrlMatcher .exec() should capture catch-all parameters","location":null,"status":"passed","title":"should capture catch-all parameters"},{"ancestorTitles":["UrlMatcher",".exec()"],"failureMessages":[],"fullName":"UrlMatcher .exec() should use the optional regexp with curly brace placeholders","location":null,"status":"passed","title":"should use the optional regexp with curly brace placeholders"},{"ancestorTitles":["UrlMatcher",".exec()"],"failureMessages":[],"fullName":"UrlMatcher .exec() should not use optional regexp for '/'","location":null,"status":"passed","title":"should not use optional regexp for '/'"},{"ancestorTitles":["UrlMatcher",".exec()"],"failureMessages":[],"fullName":"UrlMatcher .exec() should work with empty default value","location":null,"status":"passed","title":"should work with empty default value"},{"ancestorTitles":["UrlMatcher",".exec()"],"failureMessages":[],"fullName":"UrlMatcher .exec() should work with empty default value for regex","location":null,"status":"passed","title":"should work with empty default value for regex"},{"ancestorTitles":["UrlMatcher",".exec()"],"failureMessages":[],"fullName":"UrlMatcher .exec() should treat the URL as already decoded and does not decode it further","location":null,"status":"passed","title":"should treat the URL as already decoded and does not decode it further"},{"ancestorTitles":["UrlMatcher",".exec()"],"failureMessages":[],"fullName":"UrlMatcher .exec() should allow embedded capture groups","location":null,"status":"pending","title":"should allow embedded capture groups"},{"ancestorTitles":["UrlMatcher",".exec()"],"failureMessages":[],"fullName":"UrlMatcher .exec() should throw on unbalanced capture list","location":null,"status":"passed","title":"should throw on unbalanced capture list"},{"ancestorTitles":["UrlMatcher",".format()"],"failureMessages":[],"fullName":"UrlMatcher .format() should reconstitute the URL","location":null,"status":"passed","title":"should reconstitute the URL"},{"ancestorTitles":["UrlMatcher",".format()"],"failureMessages":[],"fullName":"UrlMatcher .format() should encode URL parameters","location":null,"status":"passed","title":"should encode URL parameters"},{"ancestorTitles":["UrlMatcher",".format()"],"failureMessages":[],"fullName":"UrlMatcher .format() encodes URL parameters with hashes","location":null,"status":"passed","title":"encodes URL parameters with hashes"},{"ancestorTitles":["UrlMatcher",".format()"],"failureMessages":[],"fullName":"UrlMatcher .format() should trim trailing slashes when the terminal value is optional","location":null,"status":"passed","title":"should trim trailing slashes when the terminal value is optional"},{"ancestorTitles":["UrlMatcher",".format()"],"failureMessages":[],"fullName":"UrlMatcher .format() should format query parameters from parent, child, grandchild matchers","location":null,"status":"passed","title":"should format query parameters from parent, child, grandchild matchers"},{"ancestorTitles":["UrlMatcher",".append()"],"failureMessages":[],"fullName":"UrlMatcher .append() should append matchers","location":null,"status":"passed","title":"should append matchers"},{"ancestorTitles":["UrlMatcher",".append()"],"failureMessages":[],"fullName":"UrlMatcher .append() should return a new matcher","location":null,"status":"passed","title":"should return a new matcher"},{"ancestorTitles":["UrlMatcher",".append()"],"failureMessages":[],"fullName":"UrlMatcher .append() should respect $urlMatcherFactoryProvider.strictMode","location":null,"status":"passed","title":"should respect $urlMatcherFactoryProvider.strictMode"},{"ancestorTitles":["UrlMatcher",".append()"],"failureMessages":[],"fullName":"UrlMatcher .append() should respect $urlMatcherFactoryProvider.caseInsensitive","location":null,"status":"passed","title":"should respect $urlMatcherFactoryProvider.caseInsensitive"},{"ancestorTitles":["UrlMatcher",".append()"],"failureMessages":[],"fullName":"UrlMatcher .append() should respect $urlMatcherFactoryProvider.caseInsensitive when validating regex params","location":null,"status":"passed","title":"should respect $urlMatcherFactoryProvider.caseInsensitive when validating regex params"},{"ancestorTitles":["UrlMatcher",".append()"],"failureMessages":[],"fullName":"UrlMatcher .append() should generate/match params in the proper order","location":null,"status":"passed","title":"should generate/match params in the proper order"},{"ancestorTitles":["UrlMatcher","multivalue-query-parameters"],"failureMessages":[],"fullName":"UrlMatcher multivalue-query-parameters should handle .is() for an array of values","location":null,"status":"passed","title":"should handle .is() for an array of values"},{"ancestorTitles":["UrlMatcher","multivalue-query-parameters"],"failureMessages":[],"fullName":"UrlMatcher multivalue-query-parameters should handle .equals() for two arrays of values","location":null,"status":"passed","title":"should handle .equals() for two arrays of values"},{"ancestorTitles":["UrlMatcher","multivalue-query-parameters"],"failureMessages":[],"fullName":"UrlMatcher multivalue-query-parameters should conditionally be wrapped in an array by default","location":null,"status":"passed","title":"should conditionally be wrapped in an array by default"},{"ancestorTitles":["UrlMatcher","multivalue-query-parameters"],"failureMessages":[],"fullName":"UrlMatcher multivalue-query-parameters should be wrapped in an array if array: true","location":null,"status":"passed","title":"should be wrapped in an array if array: true"},{"ancestorTitles":["UrlMatcher","multivalue-query-parameters"],"failureMessages":[],"fullName":"UrlMatcher multivalue-query-parameters should be wrapped in an array if paramname looks like param[]","location":null,"status":"passed","title":"should be wrapped in an array if paramname looks like param[]"},{"ancestorTitles":["UrlMatcher","multivalue-query-parameters"],"failureMessages":[],"fullName":"UrlMatcher multivalue-query-parameters should return default value, if query param is missing.","location":null,"status":"passed","title":"should return default value, if query param is missing."},{"ancestorTitles":["UrlMatcher","multivalue-query-parameters"],"failureMessages":[],"fullName":"UrlMatcher multivalue-query-parameters should not be wrapped by ui-router into an array if array: false","location":null,"status":"passed","title":"should not be wrapped by ui-router into an array if array: false"},{"ancestorTitles":["UrlMatcher","multivalue-path-parameters"],"failureMessages":[],"fullName":"UrlMatcher multivalue-path-parameters should behave as a single-value by default","location":null,"status":"passed","title":"should behave as a single-value by default"},{"ancestorTitles":["UrlMatcher","multivalue-path-parameters"],"failureMessages":[],"fullName":"UrlMatcher multivalue-path-parameters should be split on - in url and wrapped in an array if array: true","location":null,"status":"passed","title":"should be split on - in url and wrapped in an array if array: true"},{"ancestorTitles":["UrlMatcher","multivalue-path-parameters"],"failureMessages":[],"fullName":"UrlMatcher multivalue-path-parameters should behave similar to multi-value query params","location":null,"status":"passed","title":"should behave similar to multi-value query params"},{"ancestorTitles":["UrlMatcher","multivalue-path-parameters"],"failureMessages":[],"fullName":"UrlMatcher multivalue-path-parameters should be split on - in url and wrapped in an array if paramname looks like param[]","location":null,"status":"passed","title":"should be split on - in url and wrapped in an array if paramname looks like param[]"},{"ancestorTitles":["UrlMatcher","multivalue-path-parameters"],"failureMessages":[],"fullName":"UrlMatcher multivalue-path-parameters should allow path param arrays with '-' in the values","location":null,"status":"passed","title":"should allow path param arrays with '-' in the values"},{"ancestorTitles":["urlMatcherFactoryProvider",".type()"],"failureMessages":[],"fullName":"urlMatcherFactoryProvider .type() should handle arrays properly with config-time custom type definitions","location":null,"status":"passed","title":"should handle arrays properly with config-time custom type definitions"},{"ancestorTitles":["urlMatcherFactory"],"failureMessages":[],"fullName":"urlMatcherFactory compiles patterns","location":null,"status":"passed","title":"compiles patterns"},{"ancestorTitles":["urlMatcherFactory"],"failureMessages":[],"fullName":"urlMatcherFactory recognizes matchers","location":null,"status":"passed","title":"recognizes matchers"},{"ancestorTitles":["urlMatcherFactory"],"failureMessages":[],"fullName":"urlMatcherFactory should handle case sensitive URL by default","location":null,"status":"passed","title":"should handle case sensitive URL by default"},{"ancestorTitles":["urlMatcherFactory"],"failureMessages":[],"fullName":"urlMatcherFactory should handle case insensitive URL","location":null,"status":"passed","title":"should handle case insensitive URL"},{"ancestorTitles":["urlMatcherFactory","typed parameters"],"failureMessages":[],"fullName":"urlMatcherFactory typed parameters should accept object definitions","location":null,"status":"passed","title":"should accept object definitions"},{"ancestorTitles":["urlMatcherFactory","typed parameters"],"failureMessages":[],"fullName":"urlMatcherFactory typed parameters should reject duplicate definitions","location":null,"status":"passed","title":"should reject duplicate definitions"},{"ancestorTitles":["urlMatcherFactory","typed parameters"],"failureMessages":[],"fullName":"urlMatcherFactory typed parameters should accept injected function definitions","location":null,"status":"passed","title":"should accept injected function definitions"},{"ancestorTitles":["urlMatcherFactory","typed parameters"],"failureMessages":[],"fullName":"urlMatcherFactory typed parameters should accept annotated function definitions","location":null,"status":"passed","title":"should accept annotated function definitions"},{"ancestorTitles":["urlMatcherFactory","typed parameters"],"failureMessages":[],"fullName":"urlMatcherFactory typed parameters should match built-in types","location":null,"status":"passed","title":"should match built-in types"},{"ancestorTitles":["urlMatcherFactory","typed parameters"],"failureMessages":[],"fullName":"urlMatcherFactory typed parameters should match built-in types with spaces","location":null,"status":"passed","title":"should match built-in types with spaces"},{"ancestorTitles":["urlMatcherFactory","typed parameters"],"failureMessages":[],"fullName":"urlMatcherFactory typed parameters should match types named only in params","location":null,"status":"passed","title":"should match types named only in params"},{"ancestorTitles":["urlMatcherFactory","typed parameters"],"failureMessages":[],"fullName":"urlMatcherFactory typed parameters should throw an error if a param type is declared twice","location":null,"status":"passed","title":"should throw an error if a param type is declared twice"},{"ancestorTitles":["urlMatcherFactory","typed parameters"],"failureMessages":[],"fullName":"urlMatcherFactory typed parameters should encode/decode dates","location":null,"status":"passed","title":"should encode/decode dates"},{"ancestorTitles":["urlMatcherFactory","typed parameters"],"failureMessages":[],"fullName":"urlMatcherFactory typed parameters should encode/decode arbitrary objects to json","location":null,"status":"passed","title":"should encode/decode arbitrary objects to json"},{"ancestorTitles":["urlMatcherFactory","typed parameters"],"failureMessages":[],"fullName":"urlMatcherFactory typed parameters should not match invalid typed parameter values","location":null,"status":"passed","title":"should not match invalid typed parameter values"},{"ancestorTitles":["urlMatcherFactory","typed parameters"],"failureMessages":[],"fullName":"urlMatcherFactory typed parameters should automatically handle multiple search param values","location":null,"status":"passed","title":"should automatically handle multiple search param values"},{"ancestorTitles":["urlMatcherFactory","typed parameters"],"failureMessages":[],"fullName":"urlMatcherFactory typed parameters should allow custom types to handle multiple search param values manually","location":null,"status":"passed","title":"should allow custom types to handle multiple search param values manually"},{"ancestorTitles":["urlMatcherFactory","optional parameters"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters should match with or without values","location":null,"status":"passed","title":"should match with or without values"},{"ancestorTitles":["urlMatcherFactory","optional parameters"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters should correctly match multiple","location":null,"status":"passed","title":"should correctly match multiple"},{"ancestorTitles":["urlMatcherFactory","optional parameters"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters should correctly format with or without values","location":null,"status":"passed","title":"should correctly format with or without values"},{"ancestorTitles":["urlMatcherFactory","optional parameters"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters should correctly format multiple","location":null,"status":"passed","title":"should correctly format multiple"},{"ancestorTitles":["urlMatcherFactory","optional parameters"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters should match in between static segments","location":null,"status":"passed","title":"should match in between static segments"},{"ancestorTitles":["urlMatcherFactory","optional parameters"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters should correctly format with an optional followed by a required parameter","location":null,"status":"passed","title":"should correctly format with an optional followed by a required parameter"},{"ancestorTitles":["urlMatcherFactory","optional parameters","default values"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters default values should populate if not supplied in URL","location":null,"status":"passed","title":"should populate if not supplied in URL"},{"ancestorTitles":["urlMatcherFactory","optional parameters","default values"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters default values should populate even if the regexp requires 1 or more chars","location":null,"status":"passed","title":"should populate even if the regexp requires 1 or more chars"},{"ancestorTitles":["urlMatcherFactory","optional parameters","default values"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters default values should allow shorthand definitions","location":null,"status":"passed","title":"should allow shorthand definitions"},{"ancestorTitles":["urlMatcherFactory","optional parameters","default values"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters default values should populate query params","location":null,"status":"passed","title":"should populate query params"},{"ancestorTitles":["urlMatcherFactory","optional parameters","default values"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters default values should allow function-calculated values","location":null,"status":"passed","title":"should allow function-calculated values"},{"ancestorTitles":["urlMatcherFactory","optional parameters","default values"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters default values should allow injectable functions","location":null,"status":"passed","title":"should allow injectable functions"},{"ancestorTitles":["urlMatcherFactory","optional parameters","default values"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters default values should match when used as prefix","location":null,"status":"pending","title":"should match when used as prefix"},{"ancestorTitles":["urlMatcherFactory","optional parameters","default values","squash policy"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters default values squash policy : true should squash the default value and one slash","location":null,"status":"passed","title":": true should squash the default value and one slash"},{"ancestorTitles":["urlMatcherFactory","optional parameters","default values","squash policy"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters default values squash policy : false should not squash default values","location":null,"status":"passed","title":": false should not squash default values"},{"ancestorTitles":["urlMatcherFactory","optional parameters","default values","squash policy"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters default values squash policy : '' should squash the default value to an empty string","location":null,"status":"passed","title":": '' should squash the default value to an empty string"},{"ancestorTitles":["urlMatcherFactory","optional parameters","default values","squash policy"],"failureMessages":[],"fullName":"urlMatcherFactory optional parameters default values squash policy : '~' should squash the default value and replace it with '~'","location":null,"status":"passed","title":": '~' should squash the default value and replace it with '~'"},{"ancestorTitles":["urlMatcherFactory","strict matching"],"failureMessages":[],"fullName":"urlMatcherFactory strict matching should match with or without trailing slash","location":null,"status":"passed","title":"should match with or without trailing slash"},{"ancestorTitles":["urlMatcherFactory","strict matching"],"failureMessages":[],"fullName":"urlMatcherFactory strict matching should not match multiple trailing slashes","location":null,"status":"passed","title":"should not match multiple trailing slashes"},{"ancestorTitles":["urlMatcherFactory","strict matching"],"failureMessages":[],"fullName":"urlMatcherFactory strict matching should match when defined with parameters","location":null,"status":"passed","title":"should match when defined with parameters"}],"endTime":1674625397075,"message":"","name":"/home/flakie/package/test/urlMatcherFactorySpec.ts","startTime":1674625368679,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["uiView","linking ui-directive"],"failureMessages":[],"fullName":"uiView linking ui-directive anonymous ui-view should be replaced with the template of the current $state","location":null,"status":"passed","title":"anonymous ui-view should be replaced with the template of the current $state"},{"ancestorTitles":["uiView","linking ui-directive"],"failureMessages":[],"fullName":"uiView linking ui-directive named ui-view should be replaced with the template of the current $state","location":null,"status":"passed","title":"named ui-view should be replaced with the template of the current $state"},{"ancestorTitles":["uiView","linking ui-directive"],"failureMessages":[],"fullName":"uiView linking ui-directive ui-view should be updated after transition to another state","location":null,"status":"passed","title":"ui-view should be updated after transition to another state"},{"ancestorTitles":["uiView","linking ui-directive"],"failureMessages":[],"fullName":"uiView linking ui-directive should handle NOT nested ui-views","location":null,"status":"passed","title":"should handle NOT nested ui-views"},{"ancestorTitles":["uiView","linking ui-directive"],"failureMessages":[],"fullName":"uiView linking ui-directive should handle nested ui-views (testing two levels deep)","location":null,"status":"passed","title":"should handle nested ui-views (testing two levels deep)"},{"ancestorTitles":["uiView","handling initial view"],"failureMessages":[],"fullName":"uiView handling initial view initial view should be compiled if the view is empty","location":null,"status":"passed","title":"initial view should be compiled if the view is empty"},{"ancestorTitles":["uiView","handling initial view"],"failureMessages":[],"fullName":"uiView handling initial view initial view should be put back after removal of the view","location":null,"status":"passed","title":"initial view should be put back after removal of the view"},{"ancestorTitles":["uiView","handling initial view"],"failureMessages":[],"fullName":"uiView handling initial view initial view should be transcluded once to prevent breaking other directives","location":null,"status":"passed","title":"initial view should be transcluded once to prevent breaking other directives"},{"ancestorTitles":["uiView","autoscroll attribute"],"failureMessages":[],"fullName":"uiView autoscroll attribute should NOT autoscroll when unspecified","location":null,"status":"passed","title":"should NOT autoscroll when unspecified"},{"ancestorTitles":["uiView","autoscroll attribute"],"failureMessages":[],"fullName":"uiView autoscroll attribute should autoscroll when expression is missing","location":null,"status":"passed","title":"should autoscroll when expression is missing"},{"ancestorTitles":["uiView","autoscroll attribute"],"failureMessages":[],"fullName":"uiView autoscroll attribute should autoscroll based on expression","location":null,"status":"passed","title":"should autoscroll based on expression"},{"ancestorTitles":["uiView"],"failureMessages":[],"fullName":"uiView should instantiate a controller with controllerAs","location":null,"status":"passed","title":"should instantiate a controller with controllerAs"},{"ancestorTitles":["uiView"],"failureMessages":[],"fullName":"uiView should instantiate a controller with both $scope and $element injections","location":null,"status":"passed","title":"should instantiate a controller with both $scope and $element injections"},{"ancestorTitles":["uiView","(resolved data)"],"failureMessages":[],"fullName":"uiView (resolved data) should provide the resolved data on the $scope","location":null,"status":"passed","title":"should provide the resolved data on the $scope"},{"ancestorTitles":["uiView","(resolved data)"],"failureMessages":[],"fullName":"uiView (resolved data) should provide the resolved data on the $scope even if there is no controller","location":null,"status":"passed","title":"should provide the resolved data on the $scope even if there is no controller"},{"ancestorTitles":["uiView","(resolved data)"],"failureMessages":[],"fullName":"uiView (resolved data) should put the resolved data on the resolveAs variable","location":null,"status":"passed","title":"should put the resolved data on the resolveAs variable"},{"ancestorTitles":["uiView","(resolved data)"],"failureMessages":[],"fullName":"uiView (resolved data) should put the resolved data on the controllerAs","location":null,"status":"passed","title":"should put the resolved data on the controllerAs"},{"ancestorTitles":["uiView","(resolved data)"],"failureMessages":[],"fullName":"uiView (resolved data) should not allow both view-level resolveAs and state-level resolveAs on the same state","location":null,"status":"passed","title":"should not allow both view-level resolveAs and state-level resolveAs on the same state"},{"ancestorTitles":["uiView"],"failureMessages":[],"fullName":"uiView should call the existing $onInit after instantiating a controller","location":null,"status":"passed","title":"should call the existing $onInit after instantiating a controller"},{"ancestorTitles":["uiView"],"failureMessages":[],"fullName":"uiView should default the template to a <ui-view>","location":null,"status":"passed","title":"should default the template to a <ui-view>"},{"ancestorTitles":["uiView","play nicely with other directives"],"failureMessages":[],"fullName":"uiView play nicely with other directives should work with ngIf","location":null,"status":"passed","title":"should work with ngIf"},{"ancestorTitles":["uiView","play nicely with other directives"],"failureMessages":[],"fullName":"uiView play nicely with other directives should work with ngClass","location":null,"status":"passed","title":"should work with ngClass"},{"ancestorTitles":["uiView","play nicely with other directives","working with ngRepeat"],"failureMessages":[],"fullName":"uiView play nicely with other directives working with ngRepeat should have correct number of uiViews","location":null,"status":"passed","title":"should have correct number of uiViews"},{"ancestorTitles":["uiView","play nicely with other directives","working with ngRepeat"],"failureMessages":[],"fullName":"uiView play nicely with other directives working with ngRepeat should populate each view with content","location":null,"status":"passed","title":"should populate each view with content"},{"ancestorTitles":["uiView","play nicely with other directives","working with ngRepeat"],"failureMessages":[],"fullName":"uiView play nicely with other directives working with ngRepeat should interpolate ui-view names","location":null,"status":"passed","title":"should interpolate ui-view names"},{"ancestorTitles":["uiView","AngularJS Animations"],"failureMessages":[],"fullName":"uiView AngularJS Animations should do transition animations","location":null,"status":"passed","title":"should do transition animations"},{"ancestorTitles":["uiView","AngularJS Animations"],"failureMessages":[],"fullName":"uiView AngularJS Animations should do ngClass animations","location":null,"status":"passed","title":"should do ngClass animations"},{"ancestorTitles":["uiView","AngularJS Animations"],"failureMessages":[],"fullName":"uiView AngularJS Animations should do ngIf animations","location":null,"status":"passed","title":"should do ngIf animations"},{"ancestorTitles":["uiView","AngularJS Animations"],"failureMessages":[],"fullName":"uiView AngularJS Animations should expose animation promises to controllers","location":null,"status":"passed","title":"should expose animation promises to controllers"},{"ancestorTitles":["UiView"],"failureMessages":[],"fullName":"UiView shouldn't puke on weird nested view setups","location":null,"status":"passed","title":"shouldn't puke on weird nested view setups"},{"ancestorTitles":["UiView"],"failureMessages":[],"fullName":"UiView should target weird nested view setups using the view's simple name","location":null,"status":"passed","title":"should target weird nested view setups using the view's simple name"},{"ancestorTitles":["uiView transclusion"],"failureMessages":[],"fullName":"uiView transclusion should not link the initial view and leave its scope undestroyed when a subview is activated","location":null,"status":"passed","title":"should not link the initial view and leave its scope undestroyed when a subview is activated"},{"ancestorTitles":["uiView controllers or onEnter handlers"],"failureMessages":[],"fullName":"uiView controllers or onEnter handlers should not go into an infinite loop when controller uses $state.go","location":null,"status":"passed","title":"should not go into an infinite loop when controller uses $state.go"},{"ancestorTitles":["angular 1.5+ style .component()","routing using component templates"],"failureMessages":[],"fullName":"angular 1.5+ style .component() routing using component templates should work with directives which themselves have templateUrls","location":null,"status":"passed","title":"should work with directives which themselves have templateUrls"},{"ancestorTitles":["angular 1.5+ style .component()","routing using component templates"],"failureMessages":[],"fullName":"angular 1.5+ style .component() routing using component templates should work with ng 1.3+ bindToController directives","location":null,"status":"passed","title":"should work with ng 1.3+ bindToController directives"},{"ancestorTitles":["angular 1.5+ style .component()","routing using component templates"],"failureMessages":[],"fullName":"angular 1.5+ style .component() routing using component templates should work with ng 1.5+ .component()s","location":null,"status":"passed","title":"should work with ng 1.5+ .component()s"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should disallow controller/template configuration","location":null,"status":"passed","title":"should disallow controller/template configuration"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should work with angular 1.2+ directives","location":null,"status":"passed","title":"should work with angular 1.2+ directives"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should work with angular 1.3+ bindToComponent directives","location":null,"status":"passed","title":"should work with angular 1.3+ bindToComponent directives"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should call $onInit() once","location":null,"status":"passed","title":"should call $onInit() once"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should work with angular 1.5+ .component()s","location":null,"status":"passed","title":"should work with angular 1.5+ .component()s"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should only call $onInit() once","location":null,"status":"passed","title":"should only call $onInit() once"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should only call $onInit() once with componentProvider","location":null,"status":"passed","title":"should only call $onInit() once with componentProvider"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should supply resolve data to \"<\", \"=\", \"@\" bindings","location":null,"status":"passed","title":"should supply resolve data to \"<\", \"=\", \"@\" bindings"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should supply resolve data to optional \"<?\", \"=?\", \"@?\" bindings","location":null,"status":"passed","title":"should supply resolve data to optional \"<?\", \"=?\", \"@?\" bindings"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should not throw when routing to a component with output \"&\" binding","location":null,"status":"passed","title":"should not throw when routing to a component with output \"&\" binding"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should route to a component that is prefixed with \"data\"","location":null,"status":"passed","title":"should route to a component that is prefixed with \"data\""},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should bind a resolve that is prefixed with \"data\"","location":null,"status":"passed","title":"should bind a resolve that is prefixed with \"data\""},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should pass any bindings (wired from a parent component template via the ui-view) through to the child","location":null,"status":"passed","title":"should pass any bindings (wired from a parent component template via the ui-view) through to the child"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should prefer ui-view bindings over resolve data","location":null,"status":"passed","title":"should prefer ui-view bindings over resolve data"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should prefer ui-view bindings over resolve data unless a bindings exists","location":null,"status":"passed","title":"should prefer ui-view bindings over resolve data unless a bindings exists"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should pass & bindings (wired from a parent component via the ui-view) through to the child","location":null,"status":"passed","title":"should pass & bindings (wired from a parent component via the ui-view) through to the child"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should bind & bindings to a resolve that returns a function","location":null,"status":"passed","title":"should bind & bindings to a resolve that returns a function"},{"ancestorTitles":["angular 1.5+ style .component()","+ component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + component: declaration should bind & bindings to a resolve that returns an array-style function","location":null,"status":"passed","title":"should bind & bindings to a resolve that returns an array-style function"},{"ancestorTitles":["angular 1.5+ style .component()","+ named views with component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + named views with component: declaration should disallow controller/template configuration in the view","location":null,"status":"passed","title":"should disallow controller/template configuration in the view"},{"ancestorTitles":["angular 1.5+ style .component()","+ named views with component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + named views with component: declaration should render components as views","location":null,"status":"passed","title":"should render components as views"},{"ancestorTitles":["angular 1.5+ style .component()","+ named views with component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + named views with component: declaration should allow a component view declaration to use a string as a shorthand","location":null,"status":"passed","title":"should allow a component view declaration to use a string as a shorthand"},{"ancestorTitles":["angular 1.5+ style .component()","+ named views with component: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + named views with component: declaration should allow different states to reuse view declaration","location":null,"status":"passed","title":"should allow different states to reuse view declaration"},{"ancestorTitles":["angular 1.5+ style .component()","+ bindings: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + bindings: declaration should provide the named component binding with data from the named resolve","location":null,"status":"passed","title":"should provide the named component binding with data from the named resolve"},{"ancestorTitles":["angular 1.5+ style .component()","+ bindings: declaration"],"failureMessages":[],"fullName":"angular 1.5+ style .component() + bindings: declaration should provide default bindings for any component bindings omitted in the state.bindings map","location":null,"status":"passed","title":"should provide default bindings for any component bindings omitted in the state.bindings map"},{"ancestorTitles":["angular 1.5+ style .component()","componentProvider"],"failureMessages":[],"fullName":"angular 1.5+ style .component() componentProvider should work with angular 1.2+ directives","location":null,"status":"passed","title":"should work with angular 1.2+ directives"},{"ancestorTitles":["angular 1.5+ style .component()","componentProvider"],"failureMessages":[],"fullName":"angular 1.5+ style .component() componentProvider should load correct component when using componentProvider","location":null,"status":"passed","title":"should load correct component when using componentProvider"},{"ancestorTitles":["angular 1.5+ style .component()","uiOnParamsChanged()"],"failureMessages":[],"fullName":"angular 1.5+ style .component() uiOnParamsChanged() should not be called on the initial transition","location":null,"status":"passed","title":"should not be called on the initial transition"},{"ancestorTitles":["angular 1.5+ style .component()","uiOnParamsChanged()"],"failureMessages":[],"fullName":"angular 1.5+ style .component() uiOnParamsChanged() should be called when dynamic parameters change","location":null,"status":"passed","title":"should be called when dynamic parameters change"},{"ancestorTitles":["angular 1.5+ style .component()","uiOnParamsChanged()"],"failureMessages":[],"fullName":"angular 1.5+ style .component() uiOnParamsChanged() should work with componentProvider","location":null,"status":"passed","title":"should work with componentProvider"}],"endTime":1674625410370,"message":"","name":"/home/flakie/package/test/viewDirectiveSpec.ts","startTime":1674625369173,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["uiStateRef","links with promises"],"failureMessages":[],"fullName":"uiStateRef links with promises should update the href when promises on parameters change before scope is applied","location":null,"status":"passed","title":"should update the href when promises on parameters change before scope is applied"},{"ancestorTitles":["uiStateRef","links"],"failureMessages":[],"fullName":"uiStateRef links should generate the correct href","location":null,"status":"passed","title":"should generate the correct href"},{"ancestorTitles":["uiStateRef","links"],"failureMessages":[],"fullName":"uiStateRef links should update the href when parameters change","location":null,"status":"passed","title":"should update the href when parameters change"},{"ancestorTitles":["uiStateRef","links"],"failureMessages":[],"fullName":"uiStateRef links should allow multi-line attribute values","location":null,"status":"passed","title":"should allow multi-line attribute values"},{"ancestorTitles":["uiStateRef","links"],"failureMessages":[],"fullName":"uiStateRef links should transition states when left-clicked","location":null,"status":"passed","title":"should transition states when left-clicked"},{"ancestorTitles":["uiStateRef","links"],"failureMessages":[],"fullName":"uiStateRef links should not transition states if preventDefault() is called in click handler","location":null,"status":"passed","title":"should not transition states if preventDefault() is called in click handler"},{"ancestorTitles":["uiStateRef","links"],"failureMessages":[],"fullName":"uiStateRef links should allow passing params to current state","location":null,"status":"passed","title":"should allow passing params to current state"},{"ancestorTitles":["uiStateRef","links"],"failureMessages":[],"fullName":"uiStateRef links should allow multi-line attribute values when passing params to current state","location":null,"status":"passed","title":"should allow multi-line attribute values when passing params to current state"},{"ancestorTitles":["uiStateRef","links"],"failureMessages":[],"fullName":"uiStateRef links should take an object as a parameter and update properly on digest churns","location":null,"status":"passed","title":"should take an object as a parameter and update properly on digest churns"},{"ancestorTitles":["uiStateRef","links in html5 mode"],"failureMessages":[],"fullName":"uiStateRef links in html5 mode should generate the correct href","location":null,"status":"passed","title":"should generate the correct href"},{"ancestorTitles":["uiStateRef","links in html5 mode"],"failureMessages":[],"fullName":"uiStateRef links in html5 mode should update the href when parameters change","location":null,"status":"passed","title":"should update the href when parameters change"},{"ancestorTitles":["uiStateRef","links in html5 mode"],"failureMessages":[],"fullName":"uiStateRef links in html5 mode should transition states when the url is empty","location":null,"status":"passed","title":"should transition states when the url is empty"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions sets the correct initial href","location":null,"status":"passed","title":"sets the correct initial href"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions updates to the new href","location":null,"status":"passed","title":"updates to the new href"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions updates a linked ui-sref-active","location":null,"status":"passed","title":"updates a linked ui-sref-active"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions updates to a new href when it points to a new state","location":null,"status":"passed","title":"updates to a new href when it points to a new state"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions should allow passing params to current state using empty ui-state","location":null,"status":"passed","title":"should allow passing params to current state using empty ui-state"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions retains the old href if the new points to a non-state","location":null,"status":"passed","title":"retains the old href if the new points to a non-state"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions accepts param overrides","location":null,"status":"passed","title":"accepts param overrides"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions accepts param overrides","location":null,"status":"passed","title":"accepts param overrides"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions watches attributes","location":null,"status":"passed","title":"watches attributes"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions allows one-time-binding on ng1.3+","location":null,"status":"passed","title":"allows one-time-binding on ng1.3+"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions accepts option overrides","location":null,"status":"passed","title":"accepts option overrides"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions","option event"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions option event should bind click event by default","location":null,"status":"passed","title":"should bind click event by default"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions","option event"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions option event should bind single HTML events","location":null,"status":"passed","title":"should bind single HTML events"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions","option event"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions option event should bind multiple HTML events","location":null,"status":"passed","title":"should bind multiple HTML events"},{"ancestorTitles":["uiStateRef","links with dynamic state definitions","option event"],"failureMessages":[],"fullName":"uiStateRef links with dynamic state definitions option event should bind multiple Mouse events","location":null,"status":"passed","title":"should bind multiple Mouse events"},{"ancestorTitles":["uiStateRef","forms"],"failureMessages":[],"fullName":"uiStateRef forms should generate the correct action","location":null,"status":"passed","title":"should generate the correct action"},{"ancestorTitles":["uiStateRef","relative transitions"],"failureMessages":[],"fullName":"uiStateRef relative transitions should work","location":null,"status":"passed","title":"should work"},{"ancestorTitles":["uiStateRef","relative transitions"],"failureMessages":[],"fullName":"uiStateRef relative transitions should resolve states from parent uiView","location":null,"status":"passed","title":"should resolve states from parent uiView"},{"ancestorTitles":["uiStateRef","option event"],"failureMessages":[],"fullName":"uiStateRef option event should bind click event by default","location":null,"status":"passed","title":"should bind click event by default"},{"ancestorTitles":["uiStateRef","option event"],"failureMessages":[],"fullName":"uiStateRef option event should bind single HTML events","location":null,"status":"passed","title":"should bind single HTML events"},{"ancestorTitles":["uiStateRef","option event"],"failureMessages":[],"fullName":"uiStateRef option event should bind multiple HTML events","location":null,"status":"passed","title":"should bind multiple HTML events"},{"ancestorTitles":["uiStateRef","option event"],"failureMessages":[],"fullName":"uiStateRef option event should bind multiple Mouse events","location":null,"status":"passed","title":"should bind multiple Mouse events"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should update class for sibling uiSref","location":null,"status":"passed","title":"should update class for sibling uiSref"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should match state's parameters","location":null,"status":"passed","title":"should match state's parameters"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should compare using typed parameters","location":null,"status":"passed","title":"should compare using typed parameters"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should compare ui-sref-active-eq using typed parameters","location":null,"status":"passed","title":"should compare ui-sref-active-eq using typed parameters"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should update in response to ui-sref param expression changes","location":null,"status":"passed","title":"should update in response to ui-sref param expression changes"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should match on child states","location":null,"status":"passed","title":"should match on child states"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should NOT match on child states when active-equals is used","location":null,"status":"passed","title":"should NOT match on child states when active-equals is used"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should match on child states when active-equals and active-equals-eq is used","location":null,"status":"passed","title":"should match on child states when active-equals and active-equals-eq is used"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should resolve relative state refs","location":null,"status":"passed","title":"should resolve relative state refs"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should match on any child state refs","location":null,"status":"passed","title":"should match on any child state refs"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should match fuzzy on lazy loaded states","location":null,"status":"passed","title":"should match fuzzy on lazy loaded states"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should match exactly on lazy loaded states","location":null,"status":"passed","title":"should match exactly on lazy loaded states"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should allow multiple classes to be supplied","location":null,"status":"passed","title":"should allow multiple classes to be supplied"},{"ancestorTitles":["uiSrefActive"],"failureMessages":[],"fullName":"uiSrefActive should not match fuzzy on lazy loaded future states","location":null,"status":"passed","title":"should not match fuzzy on lazy loaded future states"},{"ancestorTitles":["uiSrefActive","ng-{class,style} interface"],"failureMessages":[],"fullName":"uiSrefActive ng-{class,style} interface should match on abstract states that are included by the current state","location":null,"status":"passed","title":"should match on abstract states that are included by the current state"},{"ancestorTitles":["uiSrefActive","ng-{class,style} interface"],"failureMessages":[],"fullName":"uiSrefActive ng-{class,style} interface should match on state parameters","location":null,"status":"passed","title":"should match on state parameters"},{"ancestorTitles":["uiSrefActive","ng-{class,style} interface"],"failureMessages":[],"fullName":"uiSrefActive ng-{class,style} interface should shadow the state provided by ui-sref","location":null,"status":"passed","title":"should shadow the state provided by ui-sref"},{"ancestorTitles":["uiSrefActive","ng-{class,style} interface"],"failureMessages":[],"fullName":"uiSrefActive ng-{class,style} interface should support multiple <className, stateOrName> pairs","location":null,"status":"passed","title":"should support multiple <className, stateOrName> pairs"},{"ancestorTitles":["uiSrefActive","ng-{class,style} interface"],"failureMessages":[],"fullName":"uiSrefActive ng-{class,style} interface should update the active classes when compiled","location":null,"status":"passed","title":"should update the active classes when compiled"},{"ancestorTitles":["uiSrefActive","ng-{class,style} interface"],"failureMessages":[],"fullName":"uiSrefActive ng-{class,style} interface should not match fuzzy on lazy loaded future states","location":null,"status":"passed","title":"should not match fuzzy on lazy loaded future states"},{"ancestorTitles":["uiSrefActive","ng-{class,style} interface, and handle values as arrays"],"failureMessages":[],"fullName":"uiSrefActive ng-{class,style} interface, and handle values as arrays should match on abstract states that are included by the current state","location":null,"status":"passed","title":"should match on abstract states that are included by the current state"},{"ancestorTitles":["uiSrefActive","ng-{class,style} interface, and handle values as arrays"],"failureMessages":[],"fullName":"uiSrefActive ng-{class,style} interface, and handle values as arrays should match on state parameters","location":null,"status":"passed","title":"should match on state parameters"},{"ancestorTitles":["uiSrefActive","ng-{class,style} interface, and handle values as arrays"],"failureMessages":[],"fullName":"uiSrefActive ng-{class,style} interface, and handle values as arrays should support multiple <className, stateOrName> pairs","location":null,"status":"passed","title":"should support multiple <className, stateOrName> pairs"},{"ancestorTitles":["uiSrefActive","ng-{class,style} interface, and handle values as arrays"],"failureMessages":[],"fullName":"uiSrefActive ng-{class,style} interface, and handle values as arrays should update the active classes when compiled","location":null,"status":"passed","title":"should update the active classes when compiled"}],"endTime":1674625410684,"message":"","name":"/home/flakie/package/test/stateDirectivesSpec.ts","startTime":1674625374666,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["state","provider"],"failureMessages":[],"fullName":"state provider should ignore Object properties when registering states","location":null,"status":"passed","title":"should ignore Object properties when registering states"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() returns a promise for the target state","location":null,"status":"passed","title":"returns a promise for the target state"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() allows transitions by name","location":null,"status":"passed","title":"allows transitions by name"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ transition.dynamic() ]:"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ transition.dynamic() ]: is considered fully dynamic when only dynamic params have changed","location":null,"status":"passed","title":"is considered fully dynamic when only dynamic params have changed"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ transition.dynamic() ]:"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ transition.dynamic() ]: is not considered fully dynamic if any state is entered","location":null,"status":"passed","title":"is not considered fully dynamic if any state is entered"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ transition.dynamic() ]:"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ transition.dynamic() ]: is not considered fully dynamic if any state is exited","location":null,"status":"passed","title":"is not considered fully dynamic if any state is exited"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ transition.dynamic() ]:"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ transition.dynamic() ]: is not considered fully dynamic if any state is reloaded","location":null,"status":"passed","title":"is not considered fully dynamic if any state is reloaded"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ transition.dynamic() ]:"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ transition.dynamic() ]: is not considered fully dynamic if any non-dynamic parameter changes","location":null,"status":"passed","title":"is not considered fully dynamic if any non-dynamic parameter changes"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ promises ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ promises ] runs successful transition when fully dynamic","location":null,"status":"passed","title":"runs successful transition when fully dynamic"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ promises ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ promises ] resolves the $state.go() promise with the original/final state, when fully dynamic","location":null,"status":"passed","title":"resolves the $state.go() promise with the original/final state, when fully dynamic"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ enter/exit ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ enter/exit ] does not exit nor enter any states when fully dynamic","location":null,"status":"passed","title":"does not exit nor enter any states when fully dynamic"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ enter/exit ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ enter/exit ] does not exit nor enter the state when only dynamic search params change","location":null,"status":"passed","title":"does not exit nor enter the state when only dynamic search params change"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ enter/exit ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ enter/exit ] does not exit nor enter the state when only dynamic path params change","location":null,"status":"passed","title":"does not exit nor enter the state when only dynamic path params change"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ enter/exit ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ enter/exit ] exits and enters a state when a non-dynamic search param changes","location":null,"status":"passed","title":"exits and enters a state when a non-dynamic search param changes"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ enter/exit ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ enter/exit ] exits and enters a state when a non-dynamic path param changes","location":null,"status":"passed","title":"exits and enters a state when a non-dynamic path param changes"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ enter/exit ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ enter/exit ] does not exit nor enter a state when only dynamic params change (triggered via url)","location":null,"status":"passed","title":"does not exit nor enter a state when only dynamic params change (triggered via url)"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ enter/exit ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ enter/exit ] exits and enters a state when any non-dynamic params change (triggered via url)","location":null,"status":"passed","title":"exits and enters a state when any non-dynamic params change (triggered via url)"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ enter/exit ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ enter/exit ] does not exit nor enter a state when only dynamic params change (triggered via $state transition)","location":null,"status":"passed","title":"does not exit nor enter a state when only dynamic params change (triggered via $state transition)"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ global $stateParams service ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ global $stateParams service ] updates the global $stateParams object","location":null,"status":"passed","title":"updates the global $stateParams object"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ global $stateParams service ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ global $stateParams service ] updates $stateParams and $location.search when only dynamic params change (triggered via url)","location":null,"status":"passed","title":"updates $stateParams and $location.search when only dynamic params change (triggered via url)"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ global $stateParams service ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ global $stateParams service ] updates $stateParams and $location.search when only dynamic params change (triggered via $state transition)","location":null,"status":"passed","title":"updates $stateParams and $location.search when only dynamic params change (triggered via $state transition)"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ global $stateParams service ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ global $stateParams service ] dynamic param changes can be observed by watching the global $stateParams","location":null,"status":"passed","title":"dynamic param changes can be observed by watching the global $stateParams"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ uiOnParamsChanged ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ uiOnParamsChanged ] should be called when dynamic parameter values change","location":null,"status":"passed","title":"should be called when dynamic parameter values change"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ uiOnParamsChanged ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ uiOnParamsChanged ] should not be called if a non-dynamic parameter changes (causing the controller's state to exit/enter)","location":null,"status":"passed","title":"should not be called if a non-dynamic parameter changes (causing the controller's state to exit/enter)"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ uiOnParamsChanged ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ uiOnParamsChanged ] should not be called, when entering a new state, if no parameter values change","location":null,"status":"passed","title":"should not be called, when entering a new state, if no parameter values change"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ uiOnParamsChanged ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ uiOnParamsChanged ] should be called, when entering a new state, if any dynamic parameter value changed","location":null,"status":"passed","title":"should be called, when entering a new state, if any dynamic parameter value changed"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ uiOnParamsChanged ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ uiOnParamsChanged ] should be called, when entering a new state, if a new parameter value is added","location":null,"status":"passed","title":"should be called, when entering a new state, if a new parameter value is added"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ uiOnParamsChanged ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ uiOnParamsChanged ] should be called, when reactivating the uiOnParamsChanged state, if a dynamic parameter changed","location":null,"status":"passed","title":"should be called, when reactivating the uiOnParamsChanged state, if a dynamic parameter changed"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ uiOnParamsChanged ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ uiOnParamsChanged ] should not be called, when reactivating the uiOnParamsChanged state \"dyn\", if any of dyns non-dynamic parameters changed","location":null,"status":"passed","title":"should not be called, when reactivating the uiOnParamsChanged state \"dyn\", if any of dyns non-dynamic parameters changed"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ uiOnParamsChanged ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ uiOnParamsChanged ] should be called with an object containing only the changed params","location":null,"status":"passed","title":"should be called with an object containing only the changed params"},{"ancestorTitles":["state",".transitionTo()","dynamic transitions","[ uiOnParamsChanged ]"],"failureMessages":[],"fullName":"state .transitionTo() dynamic transitions [ uiOnParamsChanged ] should be called on all active controllers that have a uiOnParamsChanged","location":null,"status":"passed","title":"should be called on all active controllers that have a uiOnParamsChanged"},{"ancestorTitles":["state",".transitionTo()","(with dynamic params because reloadOnSearch=false)","and only query params changed"],"failureMessages":[],"fullName":"state .transitionTo() (with dynamic params because reloadOnSearch=false) and only query params changed doesn't re-enter state (triggered by url change)","location":null,"status":"passed","title":"doesn't re-enter state (triggered by url change)"},{"ancestorTitles":["state",".transitionTo()","(with dynamic params because reloadOnSearch=false)","and only query params changed"],"failureMessages":[],"fullName":"state .transitionTo() (with dynamic params because reloadOnSearch=false) and only query params changed doesn't re-enter state (triggered by $state transition)","location":null,"status":"passed","title":"doesn't re-enter state (triggered by $state transition)"},{"ancestorTitles":["state",".transitionTo()","(with dynamic params because reloadOnSearch=false)","and only query params changed"],"failureMessages":[],"fullName":"state .transitionTo() (with dynamic params because reloadOnSearch=false) and only query params changed updates $stateParams","location":null,"status":"passed","title":"updates $stateParams"},{"ancestorTitles":["state",".transitionTo()","(with dynamic params because reloadOnSearch=false)","and only query params changed"],"failureMessages":[],"fullName":"state .transitionTo() (with dynamic params because reloadOnSearch=false) and only query params changed updates URL when (triggered by $state transition)","location":null,"status":"passed","title":"updates URL when (triggered by $state transition)"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() ignores non-applicable state parameters","location":null,"status":"passed","title":"ignores non-applicable state parameters"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() is a no-op when passing the current state and identical parameters","location":null,"status":"passed","title":"is a no-op when passing the current state and identical parameters"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() aborts pending transitions (last call wins)","location":null,"status":"passed","title":"aborts pending transitions (last call wins)"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() aborts pending transitions even when going back to the current state","location":null,"status":"passed","title":"aborts pending transitions even when going back to the current state"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() aborts pending transitions when aborted from callbacks","location":null,"status":"passed","title":"aborts pending transitions when aborted from callbacks"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() triggers onEnter and onExit callbacks","location":null,"status":"passed","title":"triggers onEnter and onExit callbacks"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() injects resolve values from the exited state into onExit","location":null,"status":"passed","title":"injects resolve values from the exited state into onExit"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() doesn't transition to parent state when child has no URL","location":null,"status":"passed","title":"doesn't transition to parent state when child has no URL"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() notifies on failed relative state resolution","location":null,"status":"passed","title":"notifies on failed relative state resolution"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() uses the templateProvider to get template dynamically","location":null,"status":"passed","title":"uses the templateProvider to get template dynamically"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() uses the controllerProvider to get controller dynamically","location":null,"status":"passed","title":"uses the controllerProvider to get controller dynamically"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() updates the location #fragment, if specified","location":null,"status":"passed","title":"updates the location #fragment, if specified"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() runs a transition when the location #fragment is updated","location":null,"status":"passed","title":"runs a transition when the location #fragment is updated"},{"ancestorTitles":["state",".transitionTo()"],"failureMessages":[],"fullName":"state .transitionTo() injects $transition$ into resolves","location":null,"status":"passed","title":"injects $transition$ into resolves"},{"ancestorTitles":["state",".go()"],"failureMessages":[],"fullName":"state .go() transitions to a relative state","location":null,"status":"passed","title":"transitions to a relative state"},{"ancestorTitles":["state",".go()"],"failureMessages":[],"fullName":"state .go() keeps parameters from common ancestor states","location":null,"status":"passed","title":"keeps parameters from common ancestor states"},{"ancestorTitles":["state",".reload()"],"failureMessages":[],"fullName":"state .reload() returns a promise for the state transition","location":null,"status":"passed","title":"returns a promise for the state transition"},{"ancestorTitles":["state",".reload()"],"failureMessages":[],"fullName":"state .reload() should reload the current state with the current parameters","location":null,"status":"passed","title":"should reload the current state with the current parameters"},{"ancestorTitles":["state",".reload()"],"failureMessages":[],"fullName":"state .reload() should invoke the controller","location":null,"status":"passed","title":"should invoke the controller"},{"ancestorTitles":["state",".reload()"],"failureMessages":[],"fullName":"state .reload() should invoke the controllers by state when given state name","location":null,"status":"passed","title":"should invoke the controllers by state when given state name"},{"ancestorTitles":["state",".reload()"],"failureMessages":[],"fullName":"state .reload() should not reload states when passing false","location":null,"status":"passed","title":"should not reload states when passing false"},{"ancestorTitles":["state",".reload()"],"failureMessages":[],"fullName":"state .reload() should reload all states when passing true","location":null,"status":"passed","title":"should reload all states when passing true"},{"ancestorTitles":["state",".reload()"],"failureMessages":[],"fullName":"state .reload() should invoke the controllers by state when given stateObj","location":null,"status":"passed","title":"should invoke the controllers by state when given stateObj"},{"ancestorTitles":["state",".reload()"],"failureMessages":[],"fullName":"state .reload() should throw an exception for invalid reload state name","location":null,"status":"passed","title":"should throw an exception for invalid reload state name"},{"ancestorTitles":["state",".reload()"],"failureMessages":[],"fullName":"state .reload() should throw an exception for invalid reload state object","location":null,"status":"passed","title":"should throw an exception for invalid reload state object"},{"ancestorTitles":["state",".is()"],"failureMessages":[],"fullName":"state .is() should return true when the current state is passed","location":null,"status":"passed","title":"should return true when the current state is passed"},{"ancestorTitles":["state",".is()"],"failureMessages":[],"fullName":"state .is() should return undefined when queried state does not exist","location":null,"status":"passed","title":"should return undefined when queried state does not exist"},{"ancestorTitles":["state",".is()"],"failureMessages":[],"fullName":"state .is() should return true when the current state is passed with matching parameters","location":null,"status":"passed","title":"should return true when the current state is passed with matching parameters"},{"ancestorTitles":["state",".is()"],"failureMessages":[],"fullName":"state .is() should work for relative states","location":null,"status":"passed","title":"should work for relative states"},{"ancestorTitles":["state",".includes()"],"failureMessages":[],"fullName":"state .includes() should return true when the current state is passed","location":null,"status":"passed","title":"should return true when the current state is passed"},{"ancestorTitles":["state",".includes()"],"failureMessages":[],"fullName":"state .includes() should return true when the current state's parent is passed","location":null,"status":"passed","title":"should return true when the current state's parent is passed"},{"ancestorTitles":["state",".includes()"],"failureMessages":[],"fullName":"state .includes() should return undefined when queried state does not exist","location":null,"status":"passed","title":"should return undefined when queried state does not exist"},{"ancestorTitles":["state",".includes()"],"failureMessages":[],"fullName":"state .includes() should return true when the current state is passed with partial matching parameters","location":null,"status":"passed","title":"should return true when the current state is passed with partial matching parameters"},{"ancestorTitles":["state",".includes()"],"failureMessages":[],"fullName":"state .includes() should return true when the current state is passed with partial matching parameters from state's parent","location":null,"status":"passed","title":"should return true when the current state is passed with partial matching parameters from state's parent"},{"ancestorTitles":["state",".includes()"],"failureMessages":[],"fullName":"state .includes() should return true when the current state is passed with partial glob patterns","location":null,"status":"passed","title":"should return true when the current state is passed with partial glob patterns"},{"ancestorTitles":["state",".includes()"],"failureMessages":[],"fullName":"state .includes() should work for relative states","location":null,"status":"passed","title":"should work for relative states"},{"ancestorTitles":["state",".current"],"failureMessages":[],"fullName":"state .current is always defined","location":null,"status":"passed","title":"is always defined"},{"ancestorTitles":["state",".current"],"failureMessages":[],"fullName":"state .current updates asynchronously as the transitionTo() promise is resolved","location":null,"status":"passed","title":"updates asynchronously as the transitionTo() promise is resolved"},{"ancestorTitles":["state","$current"],"failureMessages":[],"fullName":"state $current is always defined","location":null,"status":"passed","title":"is always defined"},{"ancestorTitles":["state","$current"],"failureMessages":[],"fullName":"state $current wraps the raw state object","location":null,"status":"passed","title":"wraps the raw state object"},{"ancestorTitles":["state",".params"],"failureMessages":[],"fullName":"state .params is always defined","location":null,"status":"passed","title":"is always defined"},{"ancestorTitles":["state",".params"],"failureMessages":[],"fullName":"state .params contains the parameter values for the current state","location":null,"status":"passed","title":"contains the parameter values for the current state"},{"ancestorTitles":["state",".href()"],"failureMessages":[],"fullName":"state .href() aborts on un-navigable states","location":null,"status":"passed","title":"aborts on un-navigable states"},{"ancestorTitles":["state",".href()"],"failureMessages":[],"fullName":"state .href() generates a parent state URL when lossy is true","location":null,"status":"passed","title":"generates a parent state URL when lossy is true"},{"ancestorTitles":["state",".href()"],"failureMessages":[],"fullName":"state .href() generates a URL without parameters","location":null,"status":"passed","title":"generates a URL without parameters"},{"ancestorTitles":["state",".href()"],"failureMessages":[],"fullName":"state .href() generates a URL with parameters","location":null,"status":"passed","title":"generates a URL with parameters"},{"ancestorTitles":["state",".href()"],"failureMessages":[],"fullName":"state .href() inherit url parameters from current url","location":null,"status":"passed","title":"inherit url parameters from current url"},{"ancestorTitles":["state",".href()","generates an absolute url","when html5mode is false"],"failureMessages":[],"fullName":"state .href() generates an absolute url when html5mode is false and absolute is true","location":null,"status":"passed","title":"and absolute is true"},{"ancestorTitles":["state",".href()","generates an absolute url","when html5mode is false"],"failureMessages":[],"fullName":"state .href() generates an absolute url when html5mode is false and absolute is true and a base tag is present","location":null,"status":"passed","title":"and absolute is true and a base tag is present"},{"ancestorTitles":["state",".href()","generates an absolute url","when html5mode is false"],"failureMessages":[],"fullName":"state .href() generates an absolute url when html5mode is false and absolute is true and the app is served from a nested document root","location":null,"status":"passed","title":"and absolute is true and the app is served from a nested document root"},{"ancestorTitles":["state",".href()","generates an absolute url"],"failureMessages":[],"fullName":"state .href() generates an absolute url when html5Mode is true","location":null,"status":"passed","title":"when html5Mode is true"},{"ancestorTitles":["state",".href()"],"failureMessages":[],"fullName":"state .href() respects $locationProvider.hashPrefix()","location":null,"status":"passed","title":"respects $locationProvider.hashPrefix()"},{"ancestorTitles":["state",".href()"],"failureMessages":[],"fullName":"state .href() generates urls with unsquashable default params","location":null,"status":"passed","title":"generates urls with unsquashable default params"},{"ancestorTitles":["state",".href()","when $browser.baseHref() exists"],"failureMessages":[],"fullName":"state .href() when $browser.baseHref() exists does not prepend relative urls","location":null,"status":"passed","title":"does not prepend relative urls"},{"ancestorTitles":["state",".href()","when $browser.baseHref() exists"],"failureMessages":[],"fullName":"state .href() when $browser.baseHref() exists prepends absolute urls","location":null,"status":"passed","title":"prepends absolute urls"},{"ancestorTitles":["state",".href()","when $browser.baseHref() exists"],"failureMessages":[],"fullName":"state .href() when $browser.baseHref() exists prepends relative and absolute urls in html5Mode","location":null,"status":"passed","title":"prepends relative and absolute urls in html5Mode"},{"ancestorTitles":["state",".get()"],"failureMessages":[],"fullName":"state .get() should return the state's config","location":null,"status":"passed","title":"should return the state's config"},{"ancestorTitles":["state",".get()"],"failureMessages":[],"fullName":"state .get() should return all of the state's config","location":null,"status":"passed","title":"should return all of the state's config"},{"ancestorTitles":["state",".get()"],"failureMessages":[],"fullName":"state .get() should work for relative states","location":null,"status":"passed","title":"should work for relative states"},{"ancestorTitles":["state",".get()"],"failureMessages":[],"fullName":"state .get() should return undefined on invalid state query","location":null,"status":"passed","title":"should return undefined on invalid state query"},{"ancestorTitles":["state","optional parameters"],"failureMessages":[],"fullName":"state optional parameters should be populated during transition, if unspecified","location":null,"status":"passed","title":"should be populated during transition, if unspecified"},{"ancestorTitles":["state","optional parameters"],"failureMessages":[],"fullName":"state optional parameters should allow null default value for non-url params","location":null,"status":"passed","title":"should allow null default value for non-url params"},{"ancestorTitles":["state","optional parameters"],"failureMessages":[],"fullName":"state optional parameters should allow falsy default values for non-url params","location":null,"status":"passed","title":"should allow falsy default values for non-url params"},{"ancestorTitles":["state","optional parameters"],"failureMessages":[],"fullName":"state optional parameters should allow arbitrary objects to pass for non-url params","location":null,"status":"passed","title":"should allow arbitrary objects to pass for non-url params"},{"ancestorTitles":["state","optional parameters"],"failureMessages":[],"fullName":"state optional parameters should be populated during primary transition, if unspecified","location":null,"status":"passed","title":"should be populated during primary transition, if unspecified"},{"ancestorTitles":["state","optional parameters"],"failureMessages":[],"fullName":"state optional parameters should allow mixed URL and config params","location":null,"status":"passed","title":"should allow mixed URL and config params"},{"ancestorTitles":["state","non-optional parameters"],"failureMessages":[],"fullName":"state non-optional parameters should cause transition failure, when unspecified.","location":null,"status":"passed","title":"should cause transition failure, when unspecified."},{"ancestorTitles":["state","url handling"],"failureMessages":[],"fullName":"state url handling should transition to the same state with different parameters","location":null,"status":"passed","title":"should transition to the same state with different parameters"},{"ancestorTitles":["state","url handling"],"failureMessages":[],"fullName":"state url handling preserve hash","location":null,"status":"passed","title":"preserve hash"},{"ancestorTitles":["state","url handling"],"failureMessages":[],"fullName":"state url handling should correctly handle absolute urls","location":null,"status":"passed","title":"should correctly handle absolute urls"},{"ancestorTitles":["state","url handling"],"failureMessages":[],"fullName":"state url handling should ignore bad urls","location":null,"status":"passed","title":"should ignore bad urls"},{"ancestorTitles":["state","url handling","slashes in parameter values","with no \"/\" in the params"],"failureMessages":[],"fullName":"state url handling slashes in parameter values with no \"/\" in the params should call $state.go once","location":null,"status":"passed","title":"should call $state.go once"},{"ancestorTitles":["state","url handling","slashes in parameter values","with no \"/\" in the params"],"failureMessages":[],"fullName":"state url handling slashes in parameter values with no \"/\" in the params should call $state.transitionTo once","location":null,"status":"passed","title":"should call $state.transitionTo once"},{"ancestorTitles":["state","url handling","slashes in parameter values","with no \"/\" in the params"],"failureMessages":[],"fullName":"state url handling slashes in parameter values with no \"/\" in the params should call myController once","location":null,"status":"passed","title":"should call myController once"},{"ancestorTitles":["state","url handling","slashes in parameter values","with a \"/\" in the params"],"failureMessages":[],"fullName":"state url handling slashes in parameter values with a \"/\" in the params should call $state.go once","location":null,"status":"passed","title":"should call $state.go once"},{"ancestorTitles":["state","url handling","slashes in parameter values","with a \"/\" in the params"],"failureMessages":[],"fullName":"state url handling slashes in parameter values with a \"/\" in the params should call $state.transitionTo once","location":null,"status":"passed","title":"should call $state.transitionTo once"},{"ancestorTitles":["state","url handling","slashes in parameter values","with a \"/\" in the params"],"failureMessages":[],"fullName":"state url handling slashes in parameter values with a \"/\" in the params should call myController once","location":null,"status":"passed","title":"should call myController once"},{"ancestorTitles":["state","url handling","slashes in parameter values","with an encoded \"/\" in the params"],"failureMessages":[],"fullName":"state url handling slashes in parameter values with an encoded \"/\" in the params should call $state.go once","location":null,"status":"passed","title":"should call $state.go once"},{"ancestorTitles":["state","url handling","slashes in parameter values","with an encoded \"/\" in the params"],"failureMessages":[],"fullName":"state url handling slashes in parameter values with an encoded \"/\" in the params should call $state.transitionTo once","location":null,"status":"passed","title":"should call $state.transitionTo once"},{"ancestorTitles":["state","url handling","slashes in parameter values","with an encoded \"/\" in the params"],"failureMessages":[],"fullName":"state url handling slashes in parameter values with an encoded \"/\" in the params should call myController once","location":null,"status":"passed","title":"should call myController once"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should initialize parameters without a hacky empty test","location":null,"status":"passed","title":"should initialize parameters without a hacky empty test"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should ignore bad url parameters","location":null,"status":"passed","title":"should ignore bad url parameters"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should ignore bad state parameters","location":null,"status":"passed","title":"should ignore bad state parameters"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should allow param objects containing $scope","location":null,"status":"passed","title":"should allow param objects containing $scope"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should map default param values to/from the $location.url() and $stateParams","location":null,"status":"passed","title":"should map default param values to/from the $location.url() and $stateParams"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should combine and map params and default param values to/from the $location.url() and $stateParams, except for nonurl params","location":null,"status":"passed","title":"should combine and map params and default param values to/from the $location.url() and $stateParams, except for nonurl params"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should map json param values to/from the $location.url() and $stateParams","location":null,"status":"passed","title":"should map json param values to/from the $location.url() and $stateParams"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should combine and map array default param values and normal param values to/from the $location.url() and $stateParams","location":null,"status":"passed","title":"should combine and map array default param values and normal param values to/from the $location.url() and $stateParams"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should map array default param values to/from the $location.url() and $stateParams","location":null,"status":"passed","title":"should map array default param values to/from the $location.url() and $stateParams"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should map multi-value array default param values to/from the $location.url() and $stateParams","location":null,"status":"passed","title":"should map multi-value array default param values to/from the $location.url() and $stateParams"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should map boolean as integers to/from the $location.url() and $stateParams","location":null,"status":"passed","title":"should map boolean as integers to/from the $location.url() and $stateParams"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should map all the things to/from the $location.url() and $stateParams","location":null,"status":"passed","title":"should map all the things to/from the $location.url() and $stateParams"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should support non-url parameters","location":null,"status":"passed","title":"should support non-url parameters"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should not transition if a required non-url parameter is missing","location":null,"status":"passed","title":"should not transition if a required non-url parameter is missing"},{"ancestorTitles":["state","url handling","typed parameter handling"],"failureMessages":[],"fullName":"state url handling typed parameter handling should not transition if a required non-url parameter is invalid","location":null,"status":"passed","title":"should not transition if a required non-url parameter is invalid"},{"ancestorTitles":["state","url handling"],"failureMessages":[],"fullName":"state url handling should revert to last known working url on state change failure","location":null,"status":"passed","title":"should revert to last known working url on state change failure"},{"ancestorTitles":["state","url handling"],"failureMessages":[],"fullName":"state url handling should not revert to last known working url on state change failure","location":null,"status":"passed","title":"should not revert to last known working url on state change failure"},{"ancestorTitles":["state","url handling"],"failureMessages":[],"fullName":"state url handling should replace browser history when \"replace\" enabled","location":null,"status":"passed","title":"should replace browser history when \"replace\" enabled"},{"ancestorTitles":["state","url handling"],"failureMessages":[],"fullName":"state url handling should not replace history normally","location":null,"status":"passed","title":"should not replace history normally"},{"ancestorTitles":["state","\"data\" property inheritance/override"],"failureMessages":[],"fullName":"state \"data\" property inheritance/override should stay immutable for if state doesn't have parent","location":null,"status":"passed","title":"should stay immutable for if state doesn't have parent"},{"ancestorTitles":["state","\"data\" property inheritance/override"],"failureMessages":[],"fullName":"state \"data\" property inheritance/override should be inherited from parent if state doesn't define it","location":null,"status":"passed","title":"should be inherited from parent if state doesn't define it"},{"ancestorTitles":["state","\"data\" property inheritance/override"],"failureMessages":[],"fullName":"state \"data\" property inheritance/override should be overridden/extended if state defines it","location":null,"status":"passed","title":"should be overridden/extended if state defines it"},{"ancestorTitles":["state","substate and stateParams inheritance"],"failureMessages":[],"fullName":"state substate and stateParams inheritance should inherit the parent param","location":null,"status":"passed","title":"should inherit the parent param"},{"ancestorTitles":["state","substate and stateParams inheritance"],"failureMessages":[],"fullName":"state substate and stateParams inheritance should not inherit siblings' states","location":null,"status":"passed","title":"should not inherit siblings' states"},{"ancestorTitles":["state","html5Mode compatibility"],"failureMessages":[],"fullName":"state html5Mode compatibility should generate non-hashbang URLs in HTML5 mode","location":null,"status":"passed","title":"should generate non-hashbang URLs in HTML5 mode"},{"ancestorTitles":["state","default properties"],"failureMessages":[],"fullName":"state default properties should always have a name","location":null,"status":"passed","title":"should always have a name"},{"ancestorTitles":["state","default properties"],"failureMessages":[],"fullName":"state default properties should include itself and parent states","location":null,"status":"passed","title":"should include itself and parent states"},{"ancestorTitles":["state","template handling"],"failureMessages":[],"fullName":"state template handling should inject $stateParams into templateUrl function","location":null,"status":"passed","title":"should inject $stateParams into templateUrl function"},{"ancestorTitles":["state","provider decorators"],"failureMessages":[],"fullName":"state provider decorators should return built-in decorators","location":null,"status":"passed","title":"should return built-in decorators"},{"ancestorTitles":["state","provider decorators"],"failureMessages":[],"fullName":"state provider decorators should allow built-in decorators to be overridden","location":null,"status":"passed","title":"should allow built-in decorators to be overridden"},{"ancestorTitles":["state","provider decorators"],"failureMessages":[],"fullName":"state provider decorators should allow new decorators to be added","location":null,"status":"passed","title":"should allow new decorators to be added"},{"ancestorTitles":["state","provider decorators"],"failureMessages":[],"fullName":"state provider decorators should allow built-in decorators to be extended","location":null,"status":"passed","title":"should allow built-in decorators to be extended"},{"ancestorTitles":["state","provider decorators"],"failureMessages":[],"fullName":"state provider decorators should invoke multiple decorators, if exist","location":null,"status":"passed","title":"should invoke multiple decorators, if exist"},{"ancestorTitles":["state","provider decorators"],"failureMessages":[],"fullName":"state provider decorators should allow any decorator to short circuit the chain","location":null,"status":"passed","title":"should allow any decorator to short circuit the chain"},{"ancestorTitles":["state","provider decorators"],"failureMessages":[],"fullName":"state provider decorators should allow any decorator to modify the return value of the parent","location":null,"status":"passed","title":"should allow any decorator to modify the return value of the parent"},{"ancestorTitles":["state queue"],"failureMessages":[],"fullName":"state queue should work across modules","location":null,"status":"passed","title":"should work across modules"},{"ancestorTitles":["state queue"],"failureMessages":[],"fullName":"state queue should work when parent is name string","location":null,"status":"passed","title":"should work when parent is name string"},{"ancestorTitles":["Targeted Views","view targeting"],"failureMessages":[],"fullName":"Targeted Views view targeting should target the unnamed ui-view in the parent context, when the view's name is '$default'","location":null,"status":"passed","title":"should target the unnamed ui-view in the parent context, when the view's name is '$default'"},{"ancestorTitles":["Targeted Views","view targeting"],"failureMessages":[],"fullName":"Targeted Views view targeting should relatively target a ui-view in the grandparent context, when the viewname starts with '^.'","location":null,"status":"passed","title":"should relatively target a ui-view in the grandparent context, when the viewname starts with '^.'"},{"ancestorTitles":["Targeted Views","view targeting"],"failureMessages":[],"fullName":"Targeted Views view targeting should relatively target a ui-view in the great-grandparent context, when the viewname starts with '^.^.'","location":null,"status":"passed","title":"should relatively target a ui-view in the great-grandparent context, when the viewname starts with '^.^.'"},{"ancestorTitles":["Targeted Views","view targeting"],"failureMessages":[],"fullName":"Targeted Views view targeting should target the root ui-view, when the view's name is '!$default'","location":null,"status":"passed","title":"should target the root ui-view, when the view's name is '!$default'"},{"ancestorTitles":["Targeted Views","view targeting"],"failureMessages":[],"fullName":"Targeted Views view targeting should target a ui-view absolutely using the ui-view's FQN when the view name is preceded by the '!' character","location":null,"status":"passed","title":"should target a ui-view absolutely using the ui-view's FQN when the view name is preceded by the '!' character"},{"ancestorTitles":["Targeted Views","with view@context style view targeting"],"failureMessages":[],"fullName":"Targeted Views with view@context style view targeting should target the unnamed ui-view in the parent context, when the view's name is ''","location":null,"status":"passed","title":"should target the unnamed ui-view in the parent context, when the view's name is ''"},{"ancestorTitles":["Targeted Views","with view@context style view targeting"],"failureMessages":[],"fullName":"Targeted Views with view@context style view targeting should target a ui-view named 'named2' at the context named 'A.b' when the view's name is 'named2@A.b'","location":null,"status":"passed","title":"should target a ui-view named 'named2' at the context named 'A.b' when the view's name is 'named2@A.b'"},{"ancestorTitles":["Targeted Views","with view@context style view targeting"],"failureMessages":[],"fullName":"Targeted Views with view@context style view targeting should target a ui-view named 'named' at the context named 'A' when the view's name is 'named@A'","location":null,"status":"passed","title":"should target a ui-view named 'named' at the context named 'A' when the view's name is 'named@A'"},{"ancestorTitles":["Targeted Views","with view@context style view targeting"],"failureMessages":[],"fullName":"Targeted Views with view@context style view targeting should target the unnamed ui-view at the root context (named ''), when the view's name is '@'","location":null,"status":"passed","title":"should target the unnamed ui-view at the root context (named ''), when the view's name is '@'"},{"ancestorTitles":["Targeted Views","with view@context style view targeting"],"failureMessages":[],"fullName":"Targeted Views with view@context style view targeting should target ui-views on own state when the state anchor is '.' (view name ends with '@.')","location":null,"status":"passed","title":"should target ui-views on own state when the state anchor is '.' (view name ends with '@.')"},{"ancestorTitles":[".onInvalid()"],"failureMessages":[],"fullName":".onInvalid() should fire when the to-state reference is invalid","location":null,"status":"passed","title":"should fire when the to-state reference is invalid"},{"ancestorTitles":[".onInvalid()"],"failureMessages":[],"fullName":".onInvalid() should allow redirection if an ITargetState is returned","location":null,"status":"passed","title":"should allow redirection if an ITargetState is returned"},{"ancestorTitles":["exceptions in onEnter"],"failureMessages":[],"fullName":"exceptions in onEnter trigger transition.onError","location":null,"status":"passed","title":"trigger transition.onError"},{"ancestorTitles":["$stateParams"],"failureMessages":[],"fullName":"$stateParams should start empty","location":null,"status":"passed","title":"should start empty"},{"ancestorTitles":["$stateParams"],"failureMessages":[],"fullName":"$stateParams should allow setting values on it","location":null,"status":"passed","title":"should allow setting values on it"},{"ancestorTitles":["$stateParams"],"failureMessages":[],"fullName":"$stateParams should be cleared between tests","location":null,"status":"passed","title":"should be cleared between tests"},{"ancestorTitles":["otherwise and state redirects"],"failureMessages":[],"fullName":"otherwise and state redirects should not go into an infinite loop","location":null,"status":"passed","title":"should not go into an infinite loop"},{"ancestorTitles":["transition hook"],"failureMessages":[],"fullName":"transition hook redirects from .otherwise() should go to the redirect-to target state and url","location":null,"status":"passed","title":"redirects from .otherwise() should go to the redirect-to target state and url"},{"ancestorTitles":["transition hook"],"failureMessages":[],"fullName":"transition hook redirects should be able to change option.reload","location":null,"status":"passed","title":"redirects should be able to change option.reload"},{"ancestorTitles":["transition hook"],"failureMessages":[],"fullName":"transition hook redirects should re-resolve when reloading during a redirect","location":null,"status":"passed","title":"redirects should re-resolve when reloading during a redirect"},{"ancestorTitles":["transition hook"],"failureMessages":[],"fullName":"transition hook aborts should reset the URL to the prevous state's","location":null,"status":"passed","title":"aborts should reset the URL to the prevous state's"}],"endTime":1674625431064,"message":"","name":"/home/flakie/package/test/stateSpec.ts","startTime":1674625367674,"status":"passed","summary":""}],"wasInterrupted":false}