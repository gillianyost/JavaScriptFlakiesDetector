{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":4,"numPassedTests":22,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":4,"numTotalTests":22,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":173,"total":173,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1674738011653,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"Input emulator commands test","location":null,"status":"passed","title":"Input emulator commands test"},{"ancestorTitles":[],"failureMessages":[],"fullName":"Input emulator work as React if values dont match","location":null,"status":"passed","title":"Input emulator work as React if values dont match"},{"ancestorTitles":[],"failureMessages":[],"fullName":"renderInputState test","location":null,"status":"passed","title":"renderInputState test"}],"endTime":1674738014900,"message":"","name":"/home/flakie/package/tests/utils/InputEmulator.test.js","startTime":1674738013573,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"format works","location":null,"status":"passed","title":"format works"},{"ancestorTitles":[],"failureMessages":[],"fullName":"format with custom accept works","location":null,"status":"passed","title":"format with custom accept works"},{"ancestorTitles":[],"failureMessages":[],"fullName":"format with fixed point delete backspace","location":null,"status":"passed","title":"format with fixed point delete backspace"},{"ancestorTitles":[],"failureMessages":[],"fullName":"format works even if state is not updated on equal vals","location":null,"status":"passed","title":"format works even if state is not updated on equal vals"},{"ancestorTitles":[],"failureMessages":[],"fullName":"format can work with case changes","location":null,"status":"passed","title":"format can work with case changes"},{"ancestorTitles":[],"failureMessages":[],"fullName":"replace is applied to input value","location":null,"status":"passed","title":"replace is applied to input value"},{"ancestorTitles":[],"failureMessages":[],"fullName":"moves cursor to expected position when deleting with more than 1 non-accepted chars after cursor","location":null,"status":"passed","title":"moves cursor to expected position when deleting with more than 1 non-accepted chars after cursor"}],"endTime":1674738015087,"message":"","name":"/home/flakie/package/tests/RifmFormat.test.js","startTime":1674738013506,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"mask behaviour","location":null,"status":"passed","title":"mask behaviour"},{"ancestorTitles":[],"failureMessages":[],"fullName":"mask behaviour with bad symbols","location":null,"status":"passed","title":"mask behaviour with bad symbols"},{"ancestorTitles":[],"failureMessages":[],"fullName":"mask behaviour with delete","location":null,"status":"passed","title":"mask behaviour with delete"},{"ancestorTitles":[],"failureMessages":[],"fullName":"mask works even if state is not updated on equal vals","location":null,"status":"passed","title":"mask works even if state is not updated on equal vals"},{"ancestorTitles":[],"failureMessages":[],"fullName":"mask replace should update even format is not changed","location":null,"status":"passed","title":"mask replace should update even format is not changed"},{"ancestorTitles":[],"failureMessages":[],"fullName":"xxx mask symbols can be added","location":null,"status":"passed","title":"xxx mask symbols can be added"}],"endTime":1674738015108,"message":"","name":"/home/flakie/package/tests/RifmMask.test.js","startTime":1674738013573,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"formatNumber check that format(format(v)) === format(v) in case of parse is identity","location":null,"status":"passed","title":"formatNumber check that format(format(v)) === format(v) in case of parse is identity"},{"ancestorTitles":[],"failureMessages":[],"fullName":"formatNumber check that format doesn't change original value","location":null,"status":"passed","title":"formatNumber check that format doesn't change original value"},{"ancestorTitles":[],"failureMessages":[],"fullName":"formatNumber fixed must return equal to scale amount of digits at fractional part","location":null,"status":"passed","title":"formatNumber fixed must return equal to scale amount of digits at fractional part"},{"ancestorTitles":[],"failureMessages":[],"fullName":"formatNumber non fixed must not allow 0 at scale position","location":null,"status":"passed","title":"formatNumber non fixed must not allow 0 at scale position"},{"ancestorTitles":[],"failureMessages":[],"fullName":"formatNumber non fixed must allow 0 at non scale position otherwise impossible to enter 0.101","location":null,"status":"passed","title":"formatNumber non fixed must allow 0 at non scale position otherwise impossible to enter 0.101"},{"ancestorTitles":[],"failureMessages":[],"fullName":"formatNumber fixed in absense of fixed point should insert it instead of adding .00","location":null,"status":"passed","title":"formatNumber fixed in absense of fixed point should insert it instead of adding .00"}],"endTime":1674738017523,"message":"","name":"/home/flakie/package/tests/formatters.test.js","startTime":1674738013507,"status":"passed","summary":""}],"wasInterrupted":false}