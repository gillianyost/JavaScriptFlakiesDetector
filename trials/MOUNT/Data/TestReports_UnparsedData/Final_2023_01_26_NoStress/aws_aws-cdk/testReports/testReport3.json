{"numFailedTestSuites":992,"numFailedTests":0,"numPassedTestSuites":4,"numPassedTests":38,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":992,"numTodoTests":0,"numTotalTestSuites":996,"numTotalTests":38,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":true,"filesAdded":0,"filesRemoved":6,"filesRemovedList":["/home/flakie/package/packages/cdk-dasm/test/__snapshots__/dasm.test.js.snap","/home/flakie/package/packages/@aws-cdk/aws-lambda-nodejs/test/__snapshots__/bundling.test.js.snap","/home/flakie/package/packages/@aws-cdk/aws-msk/test/__snapshots__/cluster.test.js.snap","/home/flakie/package/packages/@aws-cdk/cloud-assembly-schema/test/__snapshots__/manifest.test.js.snap","/home/flakie/package/packages/@aws-cdk/cx-api/test/__snapshots__/cloud-assembly.test.js.snap","/home/flakie/package/packages/@aws-cdk/region-info/test/__snapshots__/region-info.test.js.snap"],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1674756389815,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":[],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"No tests are specified for this package","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"No tests are specified for this package"}],"endTime":1674756396268,"message":"","name":"/home/flakie/package/tools/@aws-cdk/individual-pkg-gen/test/gen.test.ts","startTime":1674756390673,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/providers/provider.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/providers/provider.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":[],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"dummy","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"dummy"}],"endTime":1674756396869,"message":"","name":"/home/flakie/package/packages/@aws-cdk/cdk-assets-schema/test/dummy.test.ts","startTime":1674756390773,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/integ-runner/test/runner/private/integ-manifest.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-runner/test/runner/private/integ-manifest.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/integ-runner/test/runner/private/cloud-assembly.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-runner/test/runner/private/cloud-assembly.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":[],"duration":94,"failureDetails":[],"failureMessages":[],"fullName":"stable release","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"stable release"},{"ancestorTitles":[],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"stable release with alpha modules","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"stable release with alpha modules"},{"ancestorTitles":[],"duration":86,"failureDetails":[],"failureMessages":[],"fullName":"alpha releases","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"alpha releases"},{"ancestorTitles":[],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"rc releases","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"rc releases"},{"ancestorTitles":[],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"rc release with alpha modules","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"rc release with alpha modules"},{"ancestorTitles":[],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"v1 changelog is still called CHANGELOG.md for backwards compatibility","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"v1 changelog is still called CHANGELOG.md for backwards compatibility"},{"ancestorTitles":[],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"to support BUMP_CANDIDATE stable branches can be bumped towards a pre-release","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"to support BUMP_CANDIDATE stable branches can be bumped towards a pre-release"},{"ancestorTitles":[],"duration":193,"failureDetails":[],"failureMessages":[],"fullName":"invalid release type","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"invalid release type"},{"ancestorTitles":[],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"invalid major version (less then min)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"invalid major version (less then min)"},{"ancestorTitles":[],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"invalid major version (over max)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"invalid major version (over max)"},{"ancestorTitles":[],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"invalid major version (non-number)","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"invalid major version (non-number)"},{"ancestorTitles":[],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"no version file","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"no version file"},{"ancestorTitles":[],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"actual version not the right major","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"actual version not the right major"},{"ancestorTitles":[],"duration":85,"failureDetails":[],"failureMessages":[],"fullName":"actual version not the right pre-release","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"actual version not the right pre-release"}],"endTime":1674756397168,"message":"","name":"/home/flakie/package/scripts/@aws-cdk/script-tests/resolve-version.test.js","startTime":1674756390565,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/private/hash.test.ts:2\n    import { md5hash } from '../../../lib/assertions/private/hash';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/private/hash.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/providers/lambda-handler/sdk.test.ts: Missing initializer in const declaration. (9:15)\n\n       7 |\n       8 | function sdkHandler() {\n    >  9 |   const context: any = {\n         |                ^\n      10 |     getRemainingTimeInMillis: () => 50000,\n      11 |   };\n      12 |   return new AwsApiCallHandler({} as any, context); // as any to ignore all type checks\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/providers/lambda-handler/sdk.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/pipelines/test/legacy/fs.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/legacy/fs.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/providers/lambda-handler/assertion.test.ts: Missing initializer in const declaration. (6:15)\n\n      4 |\n      5 | function assertionHandler() {\n    > 6 |   const context: any = {\n        |                ^\n      7 |     getRemainingTimeInMillis: () => 50000,\n      8 |   };\n      9 |   return new AssertionHandler({} as any, context); // as any to ignore all type checks\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/providers/lambda-handler/assertion.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/providers/lambda-handler/base.test.ts: Unexpected reserved word 'interface'. (4:0)\n\n      2 | import { CustomResourceHandler } from '../../../../lib/assertions/providers/lambda-handler/base';\n      3 |\n    > 4 | interface MyHandlerRequest {\n        | ^\n      5 |   readonly input: string;\n      6 | }\n      7 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/providers/lambda-handler/base.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/blueprint/helpers-internal/dependencies.test.ts: Missing semicolon. (6:10)\n\n      4 | describe('with nested graphs', () => {\n      5 |   const graph = mkGraph('G', G => {\n    > 6 |     let aa: GraphNode<any>;\n        |           ^\n      7 |\n      8 |     const A = G.graph('A', [], GA => {\n      9 |       aa = GA.node('aa');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/blueprint/helpers-internal/dependencies.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/blueprint/helpers-internal/graph.test.ts: Missing semicolon. (27:8)\n\n      25 |\n      26 | test('\"allDeps\" combines node deps and parent deps', () => {\n    > 27 |   let n4: any;\n         |         ^\n      28 |   mkGraph('MyGraph', G => {\n      29 |     G.graph('g1', [], G1 => {\n      30 |       G1.node('n1');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/blueprint/helpers-internal/graph.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/blueprint/helpers-internal/pipeline-graph.test.ts: Missing semicolon. (8:7)\n\n       6 | import { AppWithOutput, AppWithExposedStacks, OneStackApp, TestApp } from '../../testhelpers/test-app';\n       7 |\n    >  8 | let app: TestApp;\n         |        ^\n       9 |\n      10 | beforeEach(() => {\n      11 |   app = new TestApp();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/blueprint/helpers-internal/pipeline-graph.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/escape-hatching.test.ts: Missing semicolon. (10:7)\n\n       8 | import { behavior, FileAssetApp, LegacyTestGitHubNpmPipeline, ModernTestGitHubNpmPipeline, PIPELINE_ENV, TestApp, TestGitHubAction } from '../testhelpers';\n       9 |\n    > 10 | let app: TestApp;\n         |        ^\n      11 | let pipelineStack: Stack;\n      12 | let sourceArtifact: cp.Artifact;\n      13 | let cloudAssemblyArtifact: cp.Artifact;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/escape-hatching.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/custom-resources/test/aws-custom-resource/runtime/index.test.ts: Unexpected token, expected \",\" (29:15)\n\n      27 | jest.mock('https', () => {\n      28 |   return {\n    > 29 |     request: (_: any, callback: () => void) => {\n         |                ^\n      30 |       return {\n      31 |         on: () => undefined,\n      32 |         write: () => true,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/custom-resources/test/aws-custom-resource/runtime/index.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/security-check.test.ts: Missing semicolon. (8:7)\n\n       6 | import { behavior } from '../testhelpers/compliance';\n       7 |\n    >  8 | let app: TestApp;\n         |        ^\n       9 | let pipelineStack: Stack;\n      10 |\n      11 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/security-check.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/stack-ordering.test.ts: Missing semicolon. (5:7)\n\n      3 | import { behavior, LegacyTestGitHubNpmPipeline, ModernTestGitHubNpmPipeline, OneStackApp, PIPELINE_ENV, sortByRunOrder, TestApp, ThreeStackApp, TwoStackApp } from '../testhelpers';\n      4 |\n    > 5 | let app: App;\n        |        ^\n      6 | let pipelineStack: Stack;\n      7 |\n      8 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/stack-ordering.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/blueprint/helpers-internal/pipeline-queries.test.ts: Missing semicolon. (6:7)\n\n      4 | import { AppWithOutput, TestApp } from '../../testhelpers/test-app';\n      5 |\n    > 6 | let app: TestApp;\n        |        ^\n      7 |\n      8 | beforeEach(() => {\n      9 |   app = new TestApp();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/blueprint/helpers-internal/pipeline-queries.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/environments.test.ts: Missing semicolon. (6:7)\n\n      4 | import { behavior, LegacyTestGitHubNpmPipeline, OneStackApp, PIPELINE_ENV, TestApp, ModernTestGitHubNpmPipeline, stringLike } from '../testhelpers';\n      5 |\n    > 6 | let app: TestApp;\n        |        ^\n      7 | let pipelineStack: Stack;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/environments.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/basic-behavior.test.ts: Missing semicolon. (9:7)\n\n       7 | import { behavior, LegacyTestGitHubNpmPipeline, OneStackApp, BucketStack, PIPELINE_ENV, TestApp, ModernTestGitHubNpmPipeline, stringLike } from '../testhelpers';\n       8 |\n    >  9 | let app: TestApp;\n         |        ^\n      10 | let pipelineStack: Stack;\n      11 |\n      12 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/basic-behavior.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/docker-credentials.test.ts: Missing semicolon. (14:7)\n\n      12 | const secretPublishArn = 'arn:aws:secretsmanager:eu-west-1:0123456789012:secret:publish-012345';\n      13 |\n    > 14 | let app: TestApp;\n         |        ^\n      15 | let pipelineStack: Stack;\n      16 | let secretSynth: secretsmanager.ISecret;\n      17 | let secretUpdate: secretsmanager.ISecret;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/docker-credentials.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/pipelines/test/codepipeline/codepipeline-existing.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as codePipeline from '@aws-cdk/aws-codepipeline';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/codepipeline/codepipeline-existing.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/assets.test.ts: Missing semicolon. (15:7)\n\n      13 | const IMAGE_PUBLISHING_ROLE = 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-${AWS::AccountId}-${AWS::Region}';\n      14 |\n    > 15 | let app: TestApp;\n         |        ^\n      16 | let pipelineStack: Stack;\n      17 |\n      18 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/assets.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/http/private/integration.test.ts: Unexpected token (14:13)\n\n      12 |       }\n      13 |\n    > 14 |       public bind(options: HttpRouteIntegrationBindOptions): HttpRouteIntegrationConfig {\n         |              ^\n      15 |         const vpcLink = this._configureVpcLink(options, {});\n      16 |\n      17 |         return {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/http/private/integration.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/codepipeline/codepipeline.test.ts: Missing semicolon. (13:7)\n\n      11 | import { PIPELINE_ENV, TestApp, ModernTestGitHubNpmPipeline, FileAssetApp } from '../testhelpers';\n      12 |\n    > 13 | let app: TestApp;\n         |        ^\n      14 |\n      15 | beforeEach(() => {\n      16 |   app = new TestApp();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/codepipeline/codepipeline.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/codepipeline/codepipeline-sources.test.ts: Missing semicolon. (11:7)\n\n       9 | import { PIPELINE_ENV, TestApp, ModernTestGitHubNpmPipeline } from '../testhelpers';\n      10 |\n    > 11 | let app: TestApp;\n         |        ^\n      12 | let pipelineStack: Stack;\n      13 |\n      14 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/codepipeline/codepipeline-sources.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/main/pipeline-base.test.ts: Unexpected reserved word 'implements'. (16:27)\n\n      14 |       constructor() {\n      15 |         super(pipelineStack, 'Pipeline', {\n    > 16 |           synth: new class implements IFileSetProducer {\n         |                            ^\n      17 |             public readonly primaryOutput = new FileSet('PrimaryOutput');\n      18 |           }(),\n      19 |         });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/main/pipeline-base.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/pipelines/test/blueprint/stack-deployment.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/blueprint/stack-deployment.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/deploy-assert.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/deploy-assert.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/codepipeline/codebuild-step.test.ts: Missing semicolon. (9:7)\n\n       7 | import { PIPELINE_ENV, TestApp, ModernTestGitHubNpmPipeline, AppWithOutput } from '../testhelpers';\n       8 |\n    >  9 | let app: TestApp;\n         |        ^\n      10 | let pipelineStack: Stack;\n      11 |\n      12 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/codepipeline/codebuild-step.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/synths.test.ts: Missing semicolon. (13:7)\n\n      11 | import { behavior, PIPELINE_ENV, TestApp, LegacyTestGitHubNpmPipeline, ModernTestGitHubNpmPipeline, ModernTestGitHubNpmPipelineProps, OneStackApp } from '../testhelpers';\n      12 |\n    > 13 | let app: TestApp;\n         |        ^\n      14 | let pipelineStack: Stack;\n      15 | let sourceArtifact: codepipeline.Artifact;\n      16 | let cloudAssemblyArtifact: codepipeline.Artifact;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/synths.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/validations.test.ts: Missing semicolon. (13:7)\n\n      11 | import { AppWithOutput, behavior, LegacyTestGitHubNpmPipeline, ModernTestGitHubNpmPipeline, OneStackApp, PIPELINE_ENV, sortByRunOrder, StageWithStackOutput, stringNoLongerThan, TestApp, TwoStackApp } from '../testhelpers';\n      12 |\n    > 13 | let app: TestApp;\n         |        ^\n      14 | let pipelineStack: Stack;\n      15 |\n      16 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/validations.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/sdk.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template, Match } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-tests/test/assertions/sdk.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/blueprint/logicalid-stability.test.ts: Missing semicolon. (6:13)\n\n      4 | import { PIPELINE_ENV, TestApp, LegacyTestGitHubNpmPipeline, ModernTestGitHubNpmPipeline, MegaAssetsApp, stackTemplate } from '../testhelpers';\n      5 |\n    > 6 | let legacyApp: TestApp;\n        |              ^\n      7 | let modernApp: TestApp;\n      8 |\n      9 | let legacyPipelineStack: Stack;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/blueprint/logicalid-stability.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/integ-runner/test/workers/snapshot-worker.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as child_process from 'child_process';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-runner/test/workers/snapshot-worker.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/integ-runner/test/runner/integration-tests.test.ts: Missing semicolon. (6:16)\n\n      4 | describe('IntegrationTests', () => {\n      5 |   const tests = new IntegrationTests('test');\n    > 6 |   let stderrMock: jest.SpyInstance;\n        |                 ^\n      7 |   stderrMock = jest.spyOn(process.stderr, 'write').mockImplementation(() => { return true; });\n      8 |   beforeEach(() => {\n      9 |     mockfs({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-runner/test/runner/integration-tests.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/private/identifiers.test.ts: Unexpected token, expected \",\" (18:36)\n\n      16 |   });\n      17 |\n    > 18 |   const G2 = ((g.tryGetChild(long1) as Graph<any>)?.tryGetChild(long2) as Graph<any>);\n         |                                     ^\n      19 |   expect(G2).toBeDefined();\n      20 |\n      21 |   const prep = G2.tryGetChild('Prepare');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/private/identifiers.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/custom-resources/test/provider-framework/waiter-state-machine.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/custom-resources/test/provider-framework/waiter-state-machine.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/integ-runner/test/workers/integ-worker.test.ts: Missing semicolon. (7:14)\n\n       5 | import { integTestWorker } from '../../lib/workers/extract';\n       6 | import { runIntegrationTestsInParallel, runIntegrationTests } from '../../lib/workers/integ-test-worker';\n    >  7 | let stderrMock: jest.SpyInstance;\n         |               ^\n       8 | let pool: workerpool.WorkerPool;\n       9 | let spawnSyncMock: jest.SpyInstance;\n      10 | beforeAll(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-runner/test/workers/integ-worker.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/integ-runner/test/runner/snapshot-test-runner.test.ts: Missing semicolon. (9:11)\n\n       7 | import { MockCdkProvider } from '../helpers';\n       8 |\n    >  9 | let cdkMock: MockCdkProvider;\n         |            ^\n      10 | let synthMock: (options: SynthOptions) => void;\n      11 | let synthFastMock: (options: SynthFastOptions) => void;\n      12 | let deployMock: (options: DeployOptions) => void;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-runner/test/runner/snapshot-test-runner.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/integ-runner/test/runner/integ-test-suite.test.ts: Missing semicolon. (127:13)\n\n      125 |\n      126 | describe('Legacy Integration test cases', () => {\n    > 127 |   let cdkMock: MockCdkProvider;\n          |              ^\n      128 |   let listMock: (options: ListOptions) => string;\n      129 |   const testsFile = '/tmp/foo/bar/does/not/exist/integ.test.js';\n      130 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-runner/test/runner/integ-test-suite.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/stack-synthesis/old-style-synthesis.test.ts: Unexpected token (8:11)\n\n       6 |\n       7 |   class MyStack extends Stack {\n    >  8 |     public addFileAsset(asset: FileAssetSource) {\n         |            ^\n       9 |       called = true;\n      10 |       return super.addFileAsset(asset);\n      11 |     }\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/stack-synthesis/old-style-synthesis.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/custom-resources/test/provider-framework/runtime.test.ts: Unexpected token, expected \"from\" (4:19)\n\n      2 | /* eslint-disable no-console */\n      3 | /* eslint-disable @typescript-eslint/no-require-imports */\n    > 4 | import cfnResponse = require('../../lib/provider-framework/runtime/cfn-response');\n        |                    ^\n      5 | import framework = require('../../lib/provider-framework/runtime/framework');\n      6 | import outbound = require('../../lib/provider-framework/runtime/outbound');\n      7 | import mocks = require('./mocks');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/custom-resources/test/provider-framework/runtime.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/integ-runner/test/runner/integ-test-runner.test.ts: Missing semicolon. (9:11)\n\n       7 | import { MockCdkProvider } from '../helpers';\n       8 |\n    >  9 | let cdkMock: MockCdkProvider;\n         |            ^\n      10 | let synthMock: (options: SynthOptions) => void;\n      11 | let synthFastMock: (options: SynthFastOptions) => void;\n      12 | let deployMock: (options: DeployOptions) => void;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-runner/test/runner/integ-test-runner.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/custom-resources/test/provider-framework/provider.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/custom-resources/test/provider-framework/provider.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/custom-resources/test/aws-custom-resource/aws-custom-resource.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/custom-resources/test/aws-custom-resource/aws-custom-resource.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/private/unique-resource-name.test.ts: Unexpected token, expected \",\" (4:22)\n\n      2 | import { makeUniqueResourceName } from '../../lib/private/unique-resource-name';\n      3 |\n    > 4 | const pathHash = (path: string[]): string => {\n        |                       ^\n      5 |   return createHash('md5').update(path.join('/')).digest('hex').slice(0, 8).toUpperCase();\n      6 | };\n      7 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/private/unique-resource-name.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/stack-synthesis/new-style-synthesis.test.ts: Missing semicolon. (15:7)\n\n      13 | };\n      14 |\n    > 15 | let app: App;\n         |        ^\n      16 | let stack: Stack;\n      17 | describe('new style synthesis', () => {\n      18 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/stack-synthesis/new-style-synthesis.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/stack-synthesis/clicreds-synthesis.test.ts: Missing semicolon. (13:7)\n\n      11 | };\n      12 |\n    > 13 | let app: App;\n         |        ^\n      14 | let stack: Stack;\n      15 | describe('CLI creds synthesis', () => {\n      16 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/stack-synthesis/clicreds-synthesis.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/custom-resources/test/aws-custom-resource/aws-custom-resource-provider.test.ts: Unexpected token, expected \",\" (27:36)\n\n      25 | };\n      26 |\n    > 27 | function createRequest(bodyPredicate: (body: AWSLambda.CloudFormationCustomResourceResponse) => boolean) {\n         |                                     ^\n      28 |   return nock('https://localhost')\n      29 |     .put('/', bodyPredicate)\n      30 |     .reply(200);\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/custom-resources/test/aws-custom-resource/aws-custom-resource-provider.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/self-mutation.test.ts: Missing semicolon. (8:7)\n\n       6 | import { behavior, LegacyTestGitHubNpmPipeline, PIPELINE_ENV, TestApp, ModernTestGitHubNpmPipeline } from '../testhelpers';\n       7 |\n    >  8 | let app: TestApp;\n         |        ^\n       9 | let pipelineStack: Stack;\n      10 |\n      11 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/compliance/self-mutation.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/private/tree-metadata.test.ts: Missing semicolon. (7:8)\n\n       5 | import { App, CfnParameter, CfnResource, Lazy, Stack, TreeInspector } from '../../lib/index';\n       6 |\n    >  7 | abstract class AbstractCfnResource extends CfnResource {\n         |         ^\n       8 |   constructor(scope: Construct, id: string) {\n       9 |     super(scope, id, {\n      10 |       type: 'CDK::UnitTest::MyCfnResource',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/private/tree-metadata.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/private/physical-name-generator.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { App, Aws, Lazy, Resource, Stack, Token } from '../../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/private/physical-name-generator.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/private/cache.test.ts: Missing semicolon. (4:9)\n\n      2 |\n      3 | let invocations = 0;\n    > 4 | let cache: Cache<string>;\n        |          ^\n      5 |\n      6 | function returnFoo() {\n      7 |   invocations++;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/private/cache.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/fs/fs.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as fs from 'fs';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/fs/fs.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/fs/fs-fingerprint.test.ts: Unexpected token, expected \",\" (233:81)\n\n      231 |     // Simulate a Windows path.relative()\n      232 |     const originalPathRelative = path.relative;\n    > 233 |     const pathRelativeSpy = jest.spyOn(path, 'relative').mockImplementation((from: string, to: string): string => {\n          |                                                                                  ^\n      234 |       return originalPathRelative(from, to).replace(/\\//g, '\\\\');\n      235 |     });\n      236 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/fs/fs-fingerprint.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/fs/fs-ignore.test.ts: Unexpected token, expected \",\" (3:33)\n\n      1 | import { IgnoreStrategy } from '../../lib/fs';\n      2 |\n    > 3 | function strategyIgnores(strategy: IgnoreStrategy, files: string[]) {\n        |                                  ^\n      4 |   return files.filter(file => strategy.ignores(file));\n      5 | }\n      6 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/fs/fs-ignore.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/iam/broadening.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { diffTemplate, formatSecurityChanges } from '../../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/iam/broadening.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/fs/fs-copy.test.ts: Unexpected token, expected \",\" (128:17)\n\n      126 | });\n      127 |\n    > 128 | function tree(dir: string, depth = ''): string[] {\n          |                  ^\n      129 |   const lines = new Array<string>();\n      130 |   for (const file of fs.readdirSync(dir).sort()) {\n      131 |     const filePath = path.join(dir, file);\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/fs/fs-copy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/fs/utils.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as fs from 'fs';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/fs/utils.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/network/rule.test.ts: Missing semicolon. (18:24)\n\n      16 |   expect(rule.toPort).toEqual(20);\n      17 |\n    > 18 |   const peer = rule.peer!;\n         |                         ^\n      19 |   if (peer.kind !== 'cidr-ip') { throw new Error('Fail'); }\n      20 |   expect(peer.ip).toEqual('1.2.3.4/8');\n      21 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/network/rule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/stepfunctions/start-execution.test.ts: Missing semicolon. (6:9)\n\n      4 | import { StepFunctionsStartExecution } from '../../lib/stepfunctions/start-execution';\n      5 |\n    > 6 | let stack: Stack;\n        |          ^\n      7 | let child: sfn.StateMachine;\n      8 | beforeEach(() => {\n      9 |   stack = new Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/stepfunctions/start-execution.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/stepfunctions/invoke-activity.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/stepfunctions/invoke-activity.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/network/detect-changes.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { diffTemplate } from '../../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/network/detect-changes.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/custom-resource-provider/custom-resource-provider.test.ts: Missing semicolon. (26:120)\n\n      24 |     // The asset hash constantly changes, so in order to not have to chase it, just look\n      25 |     // it up from the output.\n    > 26 |     const staging = stack.node.tryFindChild('Custom:MyResourceTypeCustomResourceProvider')?.node.tryFindChild('Staging') as AssetStaging;\n         |                                                                                                                         ^\n      27 |     const assetHash = staging.assetHash;\n      28 |     const sourcePath = staging.sourcePath;\n      29 |     const paramNames = Object.keys(cfn.Parameters);\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/custom-resource-provider/custom-resource-provider.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/iam/statement.test.ts: Unexpected token (153:0)\n\n      151 |   fc.record({ Service: fc.string() }),\n      152 |   fc.record({ Federated: fc.string() }),\n    > 153 | );\n          | ^\n      154 | const arbitraryCondition = fc.oneof(\n      155 |   fc.constant(undefined),\n      156 |   fc.constant({ StringEquals: { Key: 'Value' } }),\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/iam/statement.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/iam/detect-changes.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { diffTemplate } from '../../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/iam/detect-changes.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/custom-resource-provider/nodejs-entrypoint.test.ts: Unexpected token, expected \",\" (149:22)\n\n      147 | });\n      148 |\n    > 149 | function makeEvent(req: Partial<AWSLambda.CloudFormationCustomResourceEvent>): AWSLambda.CloudFormationCustomResourceEvent {\n          |                       ^\n      150 |   return {\n      151 |     LogicalResourceId: '<LogicalResourceId>',\n      152 |     RequestId: '<RequestId>',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/custom-resource-provider/nodejs-entrypoint.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sqs/send-message.test.ts: Missing semicolon. (7:11)\n\n       5 |\n       6 | describe('SqsSendMessage', () => {\n    >  7 |   let stack: cdk.Stack;\n         |            ^\n       8 |   let queue: sqs.Queue;\n       9 |\n      10 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sqs/send-message.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sns/publish.test.ts: Missing initializer in const declaration. (139:20)\n\n      137 |   describe('invalid message attribute configurations', () => {\n      138 |     // GIVEN\n    > 139 |     const attributes: MessageAttribute[] = [\n          |                     ^\n      140 |       {\n      141 |         value: 2,\n      142 |         dataType: MessageAttributeDataType.STRING,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sns/publish.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sqs/send-to-queue.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as tasks from '../../lib';\n       6 |\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 | let queue: sqs.Queue;\n       9 |\n      10 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sqs/send-to-queue.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sns/publish-to-topic.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as sns from '@aws-cdk/aws-sns';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sns/publish-to-topic.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sagemaker/create-training-job.test.ts: Missing semicolon. (10:9)\n\n       8 | import { SageMakerCreateTrainingJob } from '../../lib/sagemaker/create-training-job';\n       9 |\n    > 10 | let stack: cdk.Stack;\n         |          ^\n      11 |\n      12 | beforeEach(() => {\n      13 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sagemaker/create-training-job.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sagemaker/create-transform-job.test.ts: Missing semicolon. (9:9)\n\n       7 | import { SageMakerCreateTransformJob } from '../../lib/sagemaker/create-transform-job';\n       8 |\n    >  9 | let stack: cdk.Stack;\n         |          ^\n      10 | let role: iam.Role;\n      11 |\n      12 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sagemaker/create-transform-job.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sagemaker/update-endpoint.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as tasks from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 |\n      8 | beforeEach(() => {\n      9 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sagemaker/update-endpoint.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sagemaker/create-model.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as tasks from '../../lib';\n       6 |\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 |\n       9 | beforeEach(() => {\n      10 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sagemaker/create-model.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/lambda/invoke-function.test.ts: Missing semicolon. (8:9)\n\n       6 | import * as tasks from '../../lib';\n       7 |\n    >  8 | let stack: Stack;\n         |          ^\n       9 | let fn: lambda.Function;\n      10 | beforeEach(() => {\n      11 |   stack = new Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/lambda/invoke-function.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sagemaker/create-endpoint-config.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as tasks from '../../lib';\n       6 |\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 |\n       9 | beforeEach(() => {\n      10 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sagemaker/create-endpoint-config.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/private/task-utils.test.ts: Missing initializer in const declaration. (9:29)\n\n       7 |     test('supported integration pattern', () => {\n       8 |       // GIVEN\n    >  9 |       const supportedPatterns: IntegrationPattern[] = [IntegrationPattern.REQUEST_RESPONSE];\n         |                              ^\n      10 |\n      11 |       expect( () => {\n      12 |         validatePatternSupported(IntegrationPattern.REQUEST_RESPONSE, supportedPatterns);\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/private/task-utils.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/glue/run-glue-job-task.test.ts: Missing semicolon. (8:9)\n\n       6 |\n       7 | const jobName = 'GlueJob';\n    >  8 | let stack: Stack;\n         |          ^\n       9 | beforeEach(() => {\n      10 |   stack = new Stack();\n      11 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/glue/run-glue-job-task.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emrcontainers/start-job-run.test.ts: Missing semicolon. (9:9)\n\n       7 | import { EmrContainersStartJobRun, VirtualClusterInput, ReleaseLabel, ApplicationConfiguration, Classification, EmrContainersStartJobRunProps } from '../../lib/emrcontainers/start-job-run';\n       8 |\n    >  9 | let stack: Stack;\n         |          ^\n      10 | let clusterId: string;\n      11 | let defaultProps: EmrContainersStartJobRunProps;\n      12 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emrcontainers/start-job-run.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/lambda/invoke.test.ts: Missing semicolon. (11:11)\n\n       9 | describe('LambdaInvoke', () => {\n      10 |\n    > 11 |   let stack: Stack;\n         |            ^\n      12 |   let lambdaFunction: lambda.Function;\n      13 |\n      14 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/lambda/invoke.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/eventbridge/put-events.test.ts: Missing semicolon. (8:11)\n\n       6 |\n       7 | describe('Put Events', () => {\n    >  8 |   let stack: cdk.Stack;\n         |            ^\n       9 |\n      10 |   beforeEach(() => {\n      11 |     // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/eventbridge/put-events.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emrcontainers/delete-virtual-cluster.test.ts: Missing semicolon. (6:9)\n\n      4 | import { EmrContainersDeleteVirtualCluster } from '../../lib/emrcontainers/delete-virtual-cluster';\n      5 |\n    > 6 | let stack: Stack;\n        |          ^\n      7 | let virtualClusterId: string;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emrcontainers/delete-virtual-cluster.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sagemaker/create-endpoint.test.ts: Missing semicolon. (5:9)\n\n      3 | import * as tasks from '../../lib';\n      4 |\n    > 5 | let stack: cdk.Stack;\n        |          ^\n      6 |\n      7 | beforeEach(() => {\n      8 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/sagemaker/create-endpoint.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/glue/start-job-run.test.ts: Missing semicolon. (8:9)\n\n       6 |\n       7 | const glueJobName = 'GlueJob';\n    >  8 | let stack: Stack;\n         |          ^\n       9 | beforeEach(() => {\n      10 |   stack = new Stack();\n      11 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/glue/start-job-run.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/lambda/run-lambda-task.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as tasks from '../../lib';\n       6 |\n    >  7 | let stack: Stack;\n         |          ^\n       8 | let fn: lambda.Function;\n       9 | beforeEach(() => {\n      10 |   stack = new Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/lambda/run-lambda-task.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-terminate-cluster.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as tasks from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 |\n      8 | beforeEach(() => {\n      9 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-terminate-cluster.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-set-cluster-termination-protection.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as tasks from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 |\n      8 | beforeEach(() => {\n      9 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-set-cluster-termination-protection.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-modify-instance-fleet-by-name.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as tasks from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 |\n      8 | beforeEach(() => {\n      9 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-modify-instance-fleet-by-name.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emrcontainers/create-virtual-cluster.test.ts: Missing semicolon. (8:9)\n\n       6 |\n       7 | const emrContainersVirtualClusterName = 'EMR Containers Virtual Cluster';\n    >  8 | let stack: Stack;\n         |          ^\n       9 | let clusterId: string;\n      10 |\n      11 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emrcontainers/create-virtual-cluster.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/ecs/run-tasks.test.ts: Missing semicolon. (9:9)\n\n       7 | import * as tasks from '../../lib';\n       8 |\n    >  9 | let stack: Stack;\n         |          ^\n      10 | let vpc: ec2.Vpc;\n      11 | let cluster: ecs.Cluster;\n      12 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/ecs/run-tasks.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-modify-instance-group-by-name.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as tasks from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 |\n      8 | beforeEach(() => {\n      9 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-modify-instance-group-by-name.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/ecs/ecs-tasks.test.ts: Missing semicolon. (10:9)\n\n       8 | import * as tasks from '../../lib';\n       9 |\n    > 10 | let stack: Stack;\n         |          ^\n      11 | let vpc: ec2.Vpc;\n      12 | let cluster: ecs.Cluster;\n      13 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/ecs/ecs-tasks.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/dynamodb/update-item.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as tasks from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let table: ddb.Table;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/dynamodb/update-item.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-add-step.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as tasks from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 |\n      8 | beforeEach(() => {\n      9 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-add-step.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-create-cluster.test.ts: Missing semicolon. (7:9)\n\n       5 | import { EmrCreateCluster } from '../../lib';\n       6 |\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 | let clusterRole: iam.Role;\n       9 | let serviceRole: iam.Role;\n      10 | let autoScalingRole: iam.Role;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-create-cluster.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-cancel-step.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as tasks from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 |\n      8 | beforeEach(() => {\n      9 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/emr/emr-cancel-step.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/eks/call.test.ts: Missing semicolon. (6:9)\n\n      4 | import { EksCall, HttpMethods } from '../../lib/eks/call';\n      5 |\n    > 6 | let stack: Stack;\n        |          ^\n      7 | let cluster: eks.Cluster;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/eks/call.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/dynamodb/shared-types.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as sfn from '@aws-cdk/aws-stepfunctions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/dynamodb/shared-types.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/dynamodb/get-item.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as tasks from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let table: ddb.Table;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/dynamodb/get-item.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/aws-sdk/call-aws-service.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as tasks from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 |\n      8 | beforeEach(() => {\n      9 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/aws-sdk/call-aws-service.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/dynamodb/put-item.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as tasks from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let table: ddb.Table;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/dynamodb/put-item.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/athena/get-query-execution.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as cdk from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/athena/get-query-execution.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/databrew/start-job-run.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as sfn from '@aws-cdk/aws-stepfunctions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/databrew/start-job-run.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/dynamodb/delete-item.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as tasks from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let table: ddb.Table;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/dynamodb/delete-item.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/batch/run-batch-job.test.ts: Missing semicolon. (10:9)\n\n       8 | import * as tasks from '../../lib';\n       9 |\n    > 10 | let stack: cdk.Stack;\n         |          ^\n      11 | let batchJobDefinition: batch.IJobDefinition;\n      12 | let batchJobQueue: batch.IJobQueue;\n      13 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/batch/run-batch-job.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/batch/submit-job.test.ts: Missing semicolon. (9:9)\n\n       7 | import { BatchSubmitJob } from '../../lib';\n       8 |\n    >  9 | let stack: cdk.Stack;\n         |          ^\n      10 | let batchJobDefinition: batch.IJobDefinition;\n      11 | let batchJobQueue: batch.IJobQueue;\n      12 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/batch/submit-job.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/apigateway/call-http-api.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as apigatewayv2 from '@aws-cdk/aws-apigatewayv2';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/apigateway/call-http-api.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/athena/start-query-execution.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as sfn from '@aws-cdk/aws-stepfunctions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/athena/start-query-execution.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":94,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Empty event payload fails","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Empty event payload fails"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Bogus operation fails","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Bogus operation fails"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":404,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Create operation requests a certificate","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Create operation requests a certificate"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Create operation with `SubjectAlternativeNames` requests a certificate with validation records for all options","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Create operation with `SubjectAlternativeNames` requests a certificate with validation records for all options"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":88,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Create operation with `SubjectAlternativeNames` requests a certificate for all options without duplicates","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Create operation with `SubjectAlternativeNames` requests a certificate for all options without duplicates"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Create operation with `SubjectAlternativeNames` gracefully handles partial results from DescribeCertificate","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Create operation with `SubjectAlternativeNames` gracefully handles partial results from DescribeCertificate"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":298,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Create operation fails after more than 60s if certificate has no DomainValidationOptions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Create operation fails after more than 60s if certificate has no DomainValidationOptions"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":96,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Create operation fails within 360s and 10 attempts if certificate has no DomainValidationOptions","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Create operation fails within 360s and 10 attempts if certificate has no DomainValidationOptions"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":194,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Create operation with a maximum of 1 attempts describes the certificate once","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Create operation with a maximum of 1 attempts describes the certificate once"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":9,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Create operation succeeds with no tags passed","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Create operation succeeds with no tags passed"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":94,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Create operation with `CertificateTransparencyLoggingPreference` requests a certificate with that preference set","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Create operation with `CertificateTransparencyLoggingPreference` requests a certificate with that preference set"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":8,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Delete operation deletes the certificate","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Delete operation deletes the certificate"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":92,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Delete operation is idempotent","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Delete operation is idempotent"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":97,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Delete operation succeeds if certificate becomes not-in-use","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Delete operation succeeds if certificate becomes not-in-use"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":102,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Delete operation fails within 360s and 10 attempts if certificate is in-use","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Delete operation fails within 360s and 10 attempts if certificate is in-use"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":98,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Delete operation fails if some other error is encountered during describe","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Delete operation fails if some other error is encountered during describe"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":201,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Delete operation fails if some other error is encountered during delete","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Delete operation fails if some other error is encountered during delete"},{"ancestorTitles":["DNS Validated Certificate Handler"],"duration":7,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Delete operation with a maximum of 1 attempts describes the certificate once","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"Delete operation with a maximum of 1 attempts describes the certificate once"},{"ancestorTitles":["DNS Validated Certificate Handler","Delete option record cleanup"],"duration":94,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Delete option record cleanup ignores records if CleanupRecords is not set","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"ignores records if CleanupRecords is not set"},{"ancestorTitles":["DNS Validated Certificate Handler","Delete option record cleanup"],"duration":297,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Delete option record cleanup ignores records if CleanupRecords is not set to \"true\"","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"ignores records if CleanupRecords is not set to \"true\""},{"ancestorTitles":["DNS Validated Certificate Handler","Delete option record cleanup"],"duration":110,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Delete option record cleanup deletes records if CleanupRecords is set to true and records are present","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"deletes records if CleanupRecords is set to true and records are present"},{"ancestorTitles":["DNS Validated Certificate Handler","Delete option record cleanup"],"duration":4,"failureDetails":[],"failureMessages":[],"fullName":"DNS Validated Certificate Handler Delete option record cleanup fails if CleanupRecords is set to true and records are not present","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"passed","title":"fails if CleanupRecords is set to true and records are not present"}],"endTime":1674756404780,"message":"","name":"/home/flakie/package/packages/@aws-cdk/aws-certificatemanager/lambda-packages/dns_validated_certificate_handler/test/handler.test.js","startTime":1674756390772,"status":"passed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/codebuild/start-build.test.ts: Missing semicolon. (6:9)\n\n      4 | import { CodeBuildStartBuild } from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let codebuildProject: codebuild.Project;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/codebuild/start-build.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-s3-notifications/test/lambda/lambda.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3-notifications/test/lambda/lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/athena/get-query-results.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as cdk from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/athena/get-query-results.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/athena/stop-query-execution.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as cdk from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/athena/stop-query-execution.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/apigateway/call-rest-api.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as apigateway from '@aws-cdk/aws-apigateway';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/apigateway/call-rest-api.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/private/intrinsics.test.ts: Unexpected token, expected \",\" (89:16)\n\n      87 | });\n      88 |\n    > 89 | function parse(x: string) {\n         |                 ^\n      90 |   return new IntrinsicParser(x).parseTopLevelIntrinsic();\n      91 | }\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/private/intrinsics.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-route53/test/cross-account-zone-delegation-handler/index.test.ts: Unexpected token, expected \",\" (15:38)\n\n      13 | jest.mock('aws-sdk', () => {\n      14 |   return {\n    > 15 |     ...(jest.requireActual('aws-sdk') as any),\n         |                                       ^\n      16 |     STS: jest.fn(() => mockStsClient),\n      17 |     Route53: jest.fn(() => mockRoute53Client),\n      18 |   };\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53/test/cross-account-zone-delegation-handler/index.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-redshift/test/database-query-provider/table.test.ts: Unexpected token, expected \"from\" (2:12)\n\n      1 | /* eslint-disable-next-line import/no-unresolved */\n    > 2 | import type * as AWSLambda from 'aws-lambda';\n        |             ^\n      3 |\n      4 | const mockExecuteStatement = jest.fn(() => ({ promise: jest.fn(() => ({ Id: 'statementId' })) }));\n      5 | jest.mock('aws-sdk/clients/redshiftdata', () => class {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-redshift/test/database-query-provider/table.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-redshift/test/database-query-provider/user.test.ts: Unexpected token, expected \"from\" (2:12)\n\n      1 | /* eslint-disable-next-line import/no-unresolved */\n    > 2 | import type * as AWSLambda from 'aws-lambda';\n        |             ^\n      3 |\n      4 | const password = 'password';\n      5 | const username = 'username';\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-redshift/test/database-query-provider/user.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-redshift/test/database-query-provider/index.test.ts: Unexpected token, expected \"from\" (2:12)\n\n      1 | /* eslint-disable-next-line import/no-unresolved */\n    > 2 | import type * as AWSLambda from 'aws-lambda';\n        |             ^\n      3 |\n      4 | const resourceProperties = {\n      5 |   handler: 'table',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-redshift/test/database-query-provider/index.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-redshift/test/database-query-provider/privileges.test.ts: Unexpected token, expected \"from\" (2:12)\n\n      1 | /* eslint-disable-next-line import/no-unresolved */\n    > 2 | import type * as AWSLambda from 'aws-lambda';\n        |             ^\n      3 |\n      4 | const username = 'username';\n      5 | const tableName = 'tableName';\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-redshift/test/database-query-provider/privileges.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iotevents-actions/test/lambda/lambda-invoke-action.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as actions from '../../lib';\n       6 |\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 | let input: iotevents.IInput;\n       9 | let func: lambda.IFunction;\n      10 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iotevents-actions/test/lambda/lambda-invoke-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-rds/test/mariadb/mariadb.instance-engine.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/mariadb/mariadb.instance-engine.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iotevents-actions/test/iot/reset-timer-action.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as actions from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let input: iotevents.IInput;\n      8 | beforeEach(() => {\n      9 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iotevents-actions/test/iot/reset-timer-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iotevents-actions/test/iot/set-variable-action.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as actions from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let input: iotevents.IInput;\n      8 | beforeEach(() => {\n      9 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iotevents-actions/test/iot/set-variable-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/s3/s3-put-object-action.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template, Match } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/s3/s3-put-object-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/sqs/sqs-queue-action.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template, Match } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/sqs/sqs-queue-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iotevents-actions/test/iot/clear-timer-action.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as actions from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let input: iotevents.IInput;\n      8 | beforeEach(() => {\n      9 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iotevents-actions/test/iot/clear-timer-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-rds/test/sql-server/sql-server.instance-engine.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/sql-server/sql-server.instance-engine.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/sns/sns-topic-action.test.ts: Missing semicolon. (10:9)\n\n       8 | const SNS_TOPIC_ARN = 'arn:aws:sns::123456789012:test-topic';\n       9 |\n    > 10 | let stack: cdk.Stack;\n         |          ^\n      11 | let topicRule: iot.TopicRule;\n      12 | let snsTopic: sns.ITopic;\n      13 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/sns/sns-topic-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/kinesis-stream/kinesis-put-record-action.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template, Match } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/kinesis-stream/kinesis-put-record-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/cloudwatch/cloudwatch-put-metric-action.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template, Match } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/cloudwatch/cloudwatch-put-metric-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/iot/iotevents-put-message-action.test.ts: Missing semicolon. (8:9)\n\n       6 | import * as actions from '../../lib';\n       7 |\n    >  8 | let stack: cdk.Stack;\n         |          ^\n       9 | let topicRule: iot.TopicRule;\n      10 | let input: iotevents.IInput;\n      11 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/iot/iotevents-put-message-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/iot/iot-republish-action.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as actions from '../../lib';\n       6 |\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 | let topicRule:iot.TopicRule;\n       9 | beforeEach(() => {\n      10 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/iot/iot-republish-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/lambda/lambda-function-action.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/lambda/lambda-function-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/kinesis-firehose/firehose-put-record-action.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template, Match } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/kinesis-firehose/firehose-put-record-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/cloudwatch/cloudwatch-logs-action.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template, Match } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/cloudwatch/cloudwatch-logs-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/dynamodbv2/dynamodbv2-put-item-action.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template, Match } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/dynamodbv2/dynamodbv2-put-item-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/stepfunctions/statemachine.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/stepfunctions/statemachine.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/cloudwatch/cloudwatch-set-alarm-state-action.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template, Match } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot-actions/test/cloudwatch/cloudwatch-set-alarm-state-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/sns/sns.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/sns/sns.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/logs/log-group.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/logs/log-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/logs/log-group-resource-policy.test.ts: Missing semicolon. (6:7)\n\n      4 | import { LogGroupResourcePolicy } from '../../lib/log-group-resource-policy';\n      5 |\n    > 6 | let app: App;\n        |        ^\n      7 | let stack: Stack;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/logs/log-group-resource-policy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/sqs/sqs.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/sqs/sqs.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/event-bus/event-rule-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/event-bus/event-rule-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/kinesis/kinesis-stream.test.ts: Missing semicolon. (8:11)\n\n       6 |\n       7 | describe('KinesisStream event target', () => {\n    >  8 |   let stack: Stack;\n         |            ^\n       9 |   let stream: kinesis.Stream;\n      10 |   let streamArn: any;\n      11 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/kinesis/kinesis-stream.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/codebuild/codebuild.test.ts: Missing semicolon. (10:11)\n\n       8 |\n       9 | describe('CodeBuild event target', () => {\n    > 10 |   let stack: Stack;\n         |            ^\n      11 |   let project: codebuild.PipelineProject;\n      12 |   let projectArn: any;\n      13 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/codebuild/codebuild.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/batch/batch.test.ts: Missing semicolon. (10:11)\n\n       8 |\n       9 | describe('Batch job event target', () => {\n    > 10 |   let stack: Stack;\n         |            ^\n      11 |   let jobQueue: batch.JobQueue;\n      12 |   let jobDefinition: batch.JobDefinition;\n      13 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/batch/batch.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/kinesis-firehose/kinesis-firehose-stream.test.ts: Missing semicolon. (8:11)\n\n       6 |\n       7 | describe('KinesisFirehoseStream event target', () => {\n    >  8 |   let stack: Stack;\n         |            ^\n       9 |   let stream: firehose.CfnDeliveryStream;\n      10 |   let streamArn: any;\n      11 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/kinesis-firehose/kinesis-firehose-stream.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/codepipeline/pipeline.test.ts: Missing semicolon. (11:11)\n\n       9 |\n      10 | describe('CodePipeline event target', () => {\n    > 11 |   let stack: Stack;\n         |            ^\n      12 |   let pipeline: codepipeline.Pipeline;\n      13 |   let pipelineArn: any;\n      14 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/codepipeline/pipeline.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/aws-api/aws-api.test.ts: Unexpected token, expected \",\" (21:6)\n\n      19 |       service: 'cool-service',\n      20 |       forceNewDeployment: true,\n    > 21 |     } as AWS.ECS.UpdateServiceRequest,\n         |       ^\n      22 |     catchErrorPattern: 'error',\n      23 |     apiVersion: '2019-01-01',\n      24 |   }));\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/aws-api/aws-api.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/ecs/event-rule-target.test.ts: Missing semicolon. (12:9)\n\n      10 | import * as targets from '../../lib';\n      11 |\n    > 12 | let stack: cdk.Stack;\n         |          ^\n      13 | let vpc: ec2.Vpc;\n      14 | let cluster: ecs.Cluster;\n      15 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/ecs/event-rule-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/api-gateway/api-gateway.test.ts: Unexpected token, expected \",\" (254:29)\n\n      252 | });\n      253 |\n    > 254 | function newTestRestApi(scope: constructs.Construct, suffix = '') {\n          |                              ^\n      255 |   const lambdaFunctin = new lambda.Function(scope, `MyLambda${suffix}`, {\n      256 |     code: new lambda.InlineCode('foo'),\n      257 |     handler: 'bar',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/api-gateway/api-gateway.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/aws-api/aws-api-handler.test.ts: Missing initializer in const declaration. (11:11)\n\n       9 | console.log = jest.fn();\n      10 |\n    > 11 | const event: AwsApiProps = {\n         |            ^\n      12 |   service: 'ECS',\n      13 |   action: 'updateService',\n      14 |   parameters: {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/aws-api/aws-api-handler.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/lambda/lambda.test.ts: Unexpected token, expected \",\" (422:28)\n\n      420 | });\n      421 |\n    > 422 | function newTestLambda(scope: constructs.Construct, suffix = '') {\n          |                             ^\n      423 |   return new lambda.Function(scope, `MyLambda${suffix}`, {\n      424 |     code: new lambda.InlineCode('foo'),\n      425 |     handler: 'bar',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/lambda/lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/nlb/actions.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as elbv2 from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let group1: elbv2.NetworkTargetGroup;\n      8 | let group2: elbv2.NetworkTargetGroup;\n      9 | let lb: elbv2.NetworkLoadBalancer;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/nlb/actions.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events-targets/test/api-destination/api-destination.test.ts: Missing semicolon. (9:11)\n\n       7 |\n       8 | describe('with basic auth connection', () => {\n    >  9 |   let stack: Stack;\n         |            ^\n      10 |   let connection: events.Connection;\n      11 |   let destination: events.ApiDestination;\n      12 |   let rule: events.Rule;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events-targets/test/api-destination/api-destination.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/nlb/load-balancer.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/nlb/load-balancer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/alb/actions.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as elbv2 from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let group1: elbv2.ApplicationTargetGroup;\n      8 | let group2: elbv2.ApplicationTargetGroup;\n      9 | let lb: elbv2.ApplicationLoadBalancer;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/alb/actions.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/nlb/target-group.test.ts: Unexpected token (581:49)\n\n      579 |\n      580 |     // WHEN\n    > 581 |     const metrics = new Array<cloudwatch.Metric>();\n          |                                                  ^\n      582 |     metrics.push(targetGroup.metricHealthyHostCount());\n      583 |     metrics.push(targetGroup.metricUnHealthyHostCount());\n      584 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/nlb/target-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/alb/target-group.test.ts: Unexpected token, expected \",\" (33:49)\n\n      31 |     const tg = new elbv2.ApplicationTargetGroup(stack, 'TG2');\n      32 |     tg.addTarget({\n    > 33 |       attachToApplicationTargetGroup(_targetGroup: elbv2.IApplicationTargetGroup): elbv2.LoadBalancerTargetProps {\n         |                                                  ^\n      34 |         return {\n      35 |           targetType: elbv2.TargetType.LAMBDA,\n      36 |           targetJson: { id: 'arn:aws:lambda:eu-west-1:123456789012:function:myFn' },\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/alb/target-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/alb/load-balancer.test.ts: Unexpected token, expected \",\" (153:29)\n\n      151 |   describe('logAccessLogs', () => {\n      152 |\n    > 153 |     function loggingSetup(app: cdk.App): { stack: cdk.Stack, bucket: s3.Bucket, lb: elbv2.ApplicationLoadBalancer } {\n          |                              ^\n      154 |       const stack = new cdk.Stack(app, undefined, { env: { region: 'us-east-1' } });\n      155 |       const vpc = new ec2.Vpc(stack, 'Stack');\n      156 |       const bucket = new s3.Bucket(stack, 'AccessLoggingBucket');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/alb/load-balancer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/alb/security-group.test.ts: Unexpected token, expected \",\" (237:37)\n\n      235 | const IMPORTED_LB_SECURITY_GROUP = { 'Fn::ImportValue': 'Stack:ExportsOutputFnGetAttLBSecurityGroup8A41EA2BGroupId851EE1F6' };\n      236 |\n    > 237 | function expectSameStackSGRules(stack: cdk.Stack) {\n          |                                      ^\n      238 |   expectSGRules(stack, LB_SECURITY_GROUP);\n      239 | }\n      240 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/alb/security-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/alb/conditions.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as elbv2 from '../../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/alb/conditions.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/fargate/scheduled-fargate-task.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Annotations, Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/fargate/scheduled-fargate-task.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/fargate/load-balanced-fargate-service.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/fargate/load-balanced-fargate-service.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/fargate/queue-processing-fargate-service.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/fargate/queue-processing-fargate-service.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/ec2/scheduled-ecs-task.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Annotations, Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/ec2/scheduled-ecs-task.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/nlb/listener.test.ts: Missing initializer in const declaration. (314:26)\n\n      312 |     });\n      313 |\n    > 314 |     const validationErrors: string[] = targetGroup.node.validate();\n          |                           ^\n      315 |     const intervalError = validationErrors.find((err) => /Health check interval '60' not supported. Must be one of the following values/.test(err));\n      316 |     expect(intervalError).toBeDefined();\n      317 |   });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/nlb/listener.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs/test/images/tag-parameter-container-image.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/images/tag-parameter-container-image.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs/test/fargate/fargate-service.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Annotations, Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/fargate/fargate-service.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/alb/listener.test.ts: Missing initializer in const declaration. (477:26)\n\n      475 |\n      476 |     // THEN\n    > 477 |     const validationErrors: string[] = group.node.validate();\n          |                           ^\n      478 |     expect(validationErrors).toEqual([\"Health check protocol 'TCP' is not supported. Must be one of [HTTP, HTTPS]\"]);\n      479 |   });\n      480 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2/test/alb/listener.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/ec2/l3s.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/ec2/l3s.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/fargate/load-balanced-fargate-service-v2.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/fargate/load-balanced-fargate-service-v2.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/ec2/queue-processing-ecs-service.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/ec2/queue-processing-ecs-service.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/ec2/l3s-v2.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs-patterns/test/ec2/l3s-v2.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs/test/fargate/fargate-task-definition.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/fargate/fargate-task-definition.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecs/test/ec2/cross-stack.test.ts: Missing semicolon. (10:7)\n\n       8 | // Test various cross-stack Cluster/Service/ALB scenario's\n       9 |\n    > 10 | let app: App;\n         |        ^\n      11 | let stack1: Stack;\n      12 | let stack2: Stack;\n      13 | let cluster: ecs.Cluster;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/ec2/cross-stack.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs/test/ec2/ec2-task-definition.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/ec2/ec2-task-definition.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs/test/external/external-service.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/external/external-service.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-idps/google.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-idps/google.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs/test/external/external-task-definition.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/external/external-task-definition.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/aspects/require-imdsv2-aspect.test.ts: Missing semicolon. (18:9)\n\n      16 |\n      17 | describe('RequireImdsv2Aspect', () => {\n    > 18 |   let app: cdk.App;\n         |          ^\n      19 |   let stack: cdk.Stack;\n      20 |   let vpc: Vpc;\n      21 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/aspects/require-imdsv2-aspect.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-idps/oidc.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-idps/oidc.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/private/cache-behavior.test.ts: Missing semicolon. (6:7)\n\n      4 | import { CacheBehavior } from '../../lib/private/cache-behavior';\n      5 |\n    > 6 | let app: App;\n        |        ^\n      7 | let stack: Stack;\n      8 | const publicKey = `-----BEGIN PUBLIC KEY-----\n      9 | MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAudf8/iNkQgdvjEdm6xYS\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/private/cache-behavior.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-idps/facebook.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-idps/facebook.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/experimental/edge-function.test.ts: Missing semicolon. (9:7)\n\n       7 | import * as cloudfront from '../../lib';\n       8 |\n    >  9 | let app: cdk.App;\n         |        ^\n      10 | let stack: cdk.Stack;\n      11 |\n      12 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/experimental/edge-function.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-idps/amazon.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-idps/amazon.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/stepfunctions/stepfunctions-invoke-actions.test.ts: Unexpected token, expected \",\" (149:30)\n\n      147 | });\n      148 |\n    > 149 | function minimalPipeline(stack: Stack): codepipeline.IStage {\n          |                               ^\n      150 |   const sourceOutput = new codepipeline.Artifact();\n      151 |   const startState = new stepfunction.Pass(stack, 'StartState');\n      152 |   const simpleStateMachine = new stepfunction.StateMachine(stack, 'SimpleStateMachine', {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/stepfunctions/stepfunctions-invoke-actions.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-idps/base.test.ts: Unexpected token (6:9)\n\n      4 |\n      5 | class MyIdp extends UserPoolIdentityProviderBase {\n    > 6 |   public readonly providerName = 'MyProvider';\n        |          ^\n      7 |   public readonly mapping = this.configureAttributeMapping();\n      8 | }\n      9 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-idps/base.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/s3/s3-deploy-action.test.ts: Unexpected reserved word 'interface'. (196:0)\n\n      194 | });\n      195 |\n    > 196 | interface MinimalPipelineOptions {\n          | ^\n      197 |   readonly accessControl?: s3.BucketAccessControl;\n      198 |   readonly bucket?: s3.IBucket;\n      199 |   readonly cacheControl?: cpactions.CacheControl[];\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/s3/s3-deploy-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iotevents-actions/test/iot/set-timer-action.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as actions from '../../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let input: iotevents.IInput;\n      8 | beforeEach(() => {\n      9 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iotevents-actions/test/iot/set-timer-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/servicecatalog/servicecatalog-deploy-action-beta1.test.ts: Unexpected token (106:9)\n\n      104 |  */\n      105 | class TestFixture extends Stack {\n    > 106 |   public readonly pipeline: codepipeline.Pipeline;\n          |          ^\n      107 |   public readonly sourceStage: codepipeline.IStage;\n      108 |   public readonly deployStage: codepipeline.IStage;\n      109 |   public readonly repo: codecommit.Repository;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/servicecatalog/servicecatalog-deploy-action-beta1.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecs/test/ec2/ec2-service.test.ts: Unexpected token, expected \",\" (2200:74)\n\n      2198 |     describe('correctly setting ingress and egress port', () => {\n      2199 |       test('with bridge/NAT network mode and 0 host port', () => {\n    > 2200 |         [ecs.NetworkMode.BRIDGE, ecs.NetworkMode.NAT].forEach((networkMode: ecs.NetworkMode) => {\n           |                                                                           ^\n      2201 |           // GIVEN\n      2202 |           const stack = new cdk.Stack();\n      2203 |           const vpc = new ec2.Vpc(stack, 'MyVpc', {});\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/ec2/ec2-service.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/ecr/ecr-source-action.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template, Match } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/ecr/ecr-source-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/s3/s3-source-action.test.ts: Unexpected reserved word 'interface'. (265:0)\n\n      263 | });\n      264 |\n    > 265 | interface MinimalPipelineOptions {\n          | ^\n      266 |   readonly trigger?: cpactions.S3Trigger;\n      267 |\n      268 |   readonly bucket?: s3.IBucket;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/s3/s3-source-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/codebuild/codebuild-action.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/codebuild/codebuild-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/ecs/ecs-deploy-action.test.ts: Unexpected token, expected \"{\" (280:24)\n\n      278 | });\n      279 |\n    > 280 | function anyEcsService(): ecs.FargateService {\n          |                         ^\n      281 |   const stack = new cdk.Stack();\n      282 |   const taskDefinition = new ecs.FargateTaskDefinition(stack, 'TaskDefinition');\n      283 |   taskDefinition.addContainer('MainContainer', {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/ecs/ecs-deploy-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/github/github-source-action.test.ts: Missing semicolon. (158:21)\n\n      156 |\n      157 |       expect(() => {\n    > 158 |         App.of(stack)!.synth();\n          |                      ^\n      159 |       }).toThrow(/Cannot reference variables of action 'Source2', as that action was never added to a pipeline/);\n      160 |\n      161 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/github/github-source-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/lambda/lambda-invoke-action.test.ts: Unexpected reserved word 'interface'. (332:0)\n\n      330 | });\n      331 |\n    > 332 | interface HelperProps {\n          | ^\n      333 |   readonly userParams?: { [key: string]: any };\n      334 |   readonly userParamsString?: string;\n      335 |   readonly lambdaInput?: codepipeline.Artifact;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/lambda/lambda-invoke-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/codedeploy/ecs-deploy-action.test.ts: Missing initializer in const declaration. (14:32)\n\n      12 |       const artifact = new codepipeline.Artifact('Artifact');\n      13 |\n    > 14 |       const containerImageInputs: cpactions.CodeDeployEcsContainerImageInput[] = [];\n         |                                 ^\n      15 |       for (let i = 0; i < 5; i++) {\n      16 |         containerImageInputs.push({\n      17 |           input: artifact,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/codedeploy/ecs-deploy-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/codestar-connections/codestar-connections-source-action.test.ts: Missing semicolon. (235:19)\n\n      233 |\n      234 |     expect(() => {\n    > 235 |       App.of(stack)!.synth();\n          |                    ^\n      236 |     }).toThrow(/Cannot reference variables of action 'UnusedBitBucket', as that action was never added to a pipeline/);\n      237 |   });\n      238 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/codestar-connections/codestar-connections-source-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/server/deployment-config.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/server/deployment-config.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/lambda/deployment-group.test.ts: Unexpected token, expected \",\" (8:27)\n\n       6 | import * as codedeploy from '../../lib';\n       7 |\n    >  8 | function mockFunction(stack: cdk.Stack, id: string) {\n         |                            ^\n       9 |   return new lambda.Function(stack, id, {\n      10 |     code: lambda.Code.fromInline('mock'),\n      11 |     handler: 'index.handler',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/lambda/deployment-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/codecommit/codecommit-source-action.test.ts: Unexpected token, expected \",\" (597:30)\n\n      595 | });\n      596 |\n    > 597 | function minimalPipeline(stack: Stack, trigger: cpactions.CodeCommitTrigger | undefined): codepipeline.Pipeline {\n          |                               ^\n      598 |   const sourceOutput = new codepipeline.Artifact();\n      599 |   return new codepipeline.Pipeline(stack, 'MyPipeline', {\n      600 |     stages: [\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/codecommit/codecommit-source-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/server/deployment-group.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/server/deployment-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/lambda/application.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/lambda/application.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/cloudformation/pipeline-actions.test.ts: Unexpected reserved word 'interface'. (235:0)\n\n      233 | });\n      234 |\n    > 235 | interface PolicyStatementJson {\n          | ^\n      236 |   Effect: 'Allow' | 'Deny';\n      237 |   Action: string | string[];\n      238 |   Resource: string | string[];\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/cloudformation/pipeline-actions.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/cloudformation/cloudformation-stackset-pipeline-actions.test.ts: Missing semicolon. (8:9)\n\n       6 | /* eslint-disable quote-props */\n       7 |\n    >  8 | let stack: TestFixture;\n         |          ^\n       9 | let importedAdminRole: iam.IRole;\n      10 | beforeEach(() => {\n      11 |   stack = new TestFixture({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/cloudformation/cloudformation-stackset-pipeline-actions.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/aspects/require-imdsv2-aspect.test.ts: Missing semicolon. (11:9)\n\n       9 |\n      10 | describe('AutoScalingGroupRequireImdsv2Aspect', () => {\n    > 11 |   let app: cdk.App;\n         |          ^\n      12 |   let stack: cdk.Stack;\n      13 |   let vpc: ec2.Vpc;\n      14 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/aspects/require-imdsv2-aspect.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/lambda/custom-deployment-config.test.ts: Unexpected token, expected \",\" (6:27)\n\n      4 | import * as codedeploy from '../../lib';\n      5 |\n    > 6 | function mockFunction(stack: cdk.Stack, id: string) {\n        |                            ^\n      7 |   return new lambda.Function(stack, id, {\n      8 |     code: lambda.Code.fromInline('mock'),\n      9 |     handler: 'index.handler',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/lambda/custom-deployment-config.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/ecs/deployment-group.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as cdk from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/ecs/deployment-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/cloudformation/cloudformation-pipeline-actions.test.ts: Missing semicolon. (715:87)\n\n      713 |       });\n      714 |\n    > 715 |       const otherStack = app.node.findChild('cross-account-support-stack-123456789012') as cdk.Stack;\n          |                                                                                        ^\n      716 |       Template.fromStack(otherStack).hasResourceProperties('AWS::IAM::Role', {\n      717 |         'RoleName': 'pipelinestack-support-123loycfnactionrole56af64af3590f311bc50',\n      718 |       });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/cloudformation/cloudformation-pipeline-actions.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/http/service-discovery.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/http/service-discovery.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/websocket/mock.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/websocket/mock.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/ecs/application.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codedeploy/test/ecs/application.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/bitbucket/bitbucket-source-action.test.ts: Unexpected token, expected \",\" (161:50)\n\n      159 | });\n      160 |\n    > 161 | function createBitBucketAndCodeBuildPipeline(stack: Stack, props: Partial<cpactions.BitBucketSourceActionProps>): void {\n          |                                                   ^\n      162 |   const sourceOutput = new codepipeline.Artifact();\n      163 |   new codepipeline.Pipeline(stack, 'Pipeline', {\n      164 |     stages: [\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/bitbucket/bitbucket-source-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-authorizers/test/websocket/iam.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-authorizers/test/websocket/iam.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/websocket/lambda.test.ts: Unexpected token, expected \",\" (51:26)\n\n      49 | });\n      50 |\n    > 51 | function fooFunction(stack: Stack, id: string) {\n         |                           ^\n      52 |   return new Function(stack, id, {\n      53 |     code: Code.fromInline('foo'),\n      54 |     runtime: Runtime.NODEJS_14_X,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/websocket/lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/http/alb.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/http/alb.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-authorizers/test/websocket/lambda.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-authorizers/test/websocket/lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/http/http-proxy.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/http/http-proxy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/http/nlb.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/http/nlb.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/http/lambda.test.ts: Unexpected token, expected \",\" (111:26)\n\n      109 | });\n      110 |\n    > 111 | function fooFunction(stack: Stack, id: string) {\n          |                           ^\n      112 |   return new Function(stack, id, {\n      113 |     code: Code.fromInline('foo'),\n      114 |     runtime: Runtime.NODEJS_14_X,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-integrations/test/http/lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-authorizers/test/http/user-pool.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-authorizers/test/http/user-pool.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/websocket/route.test.ts: Unexpected token, expected \",\" (127:18)\n\n      125 |\n      126 | class DummyIntegration extends WebSocketRouteIntegration {\n    > 127 |   constructor(name?: string) {\n          |                   ^\n      128 |     super(name ?? 'DummyIntegration');\n      129 |   }\n      130 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/websocket/route.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/websocket/stage.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/websocket/stage.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/websocket/authorizer.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/websocket/authorizer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-authorizers/test/http/jwt.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-authorizers/test/http/jwt.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/websocket/api.test.ts: Unexpected token, expected \",\" (178:15)\n\n      176 |   }\n      177 |\n    > 178 |   bind(_options: WebSocketRouteIntegrationBindOptions): WebSocketRouteIntegrationConfig {\n          |                ^\n      179 |     return {\n      180 |       type: WebSocketIntegrationType.AWS_PROXY,\n      181 |       uri: 'some-uri',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/websocket/api.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/http/domain-name.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/http/domain-name.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/http/stage.test.ts: Unexpected token (100:38)\n\n       98 |\n       99 |     // WHEN\n    > 100 |     const metrics = new Array<Metric>();\n          |                                       ^\n      101 |     metrics.push(stage.metricClientError({ color }));\n      102 |     metrics.push(stage.metricServerError({ color }));\n      103 |     metrics.push(stage.metricDataProcessed({ color }));\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/http/stage.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/http/authorizer.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/http/authorizer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/authorizers/identity-source.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { IdentitySource } from '../../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/authorizers/identity-source.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/common/api-mapping.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/common/api-mapping.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/authorizers/lambda.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/authorizers/lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/http/route.test.ts: Unexpected token (174:13)\n\n      172 |\n      173 |     class PrivateIntegration extends HttpRouteIntegration {\n    > 174 |       public bind(): HttpRouteIntegrationConfig {\n          |              ^\n      175 |         return {\n      176 |           method: HttpMethod.ANY,\n      177 |           payloadFormatVersion: PayloadFormatVersion.VERSION_1_0,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/http/route.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/http/api.test.ts: Unexpected token (175:40)\n\n      173 |\n      174 |       // WHEN\n    > 175 |       const metrics = new Array<Metric>();\n          |                                         ^\n      176 |       metrics.push(api.metricClientError({ color }));\n      177 |       metrics.push(api.metricServerError({ color }));\n      178 |       metrics.push(api.metricDataProcessed({ color }));\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/http/api.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/integrations/lambda.test.ts: Unexpected token, expected \",\" (263:21)\n\n      261 |     // THEN\n      262 |     expect(bindResult?.deploymentToken).toBeDefined();\n    > 263 |     expect(bindResult!.deploymentToken).toEqual('{\"functionName\":\"ThisFunction\"}');\n          |                      ^\n      264 |   });\n      265 |\n      266 |   test('fingerprint is not computed when functionName is not specified', () => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/integrations/lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/authorizers/cognito.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/authorizers/cognito.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-amplify/test/asset-deployment-handler/index.test.ts: Missing semicolon. (44:19)\n\n      42 | describe('handler', () => {\n      43 |\n    > 44 |   let oldConsoleLog: any;\n         |                    ^\n      45 |\n      46 |   beforeAll(() => {\n      47 |     oldConsoleLog = global.console.log;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-amplify/test/asset-deployment-handler/index.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-authorizers/test/http/lambda.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2-authorizers/test/http/lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/http/vpc-link.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigatewayv2/test/http/vpc-link.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/integrations/stepfunctions.test.ts: Missing initializer in const declaration. (306:24)\n\n      304 |       });\n      305 |\n    > 306 |       const stateMachine: sfn.IStateMachine = new StateMachine(stack, 'StateMachine', {\n          |                         ^\n      307 |         definition: passTask,\n      308 |         stateMachineType: sfn.StateMachineType.EXPRESS,\n      309 |       });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/integrations/stepfunctions.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/hotswap/nested-stacks-hotswap.test.ts: Missing semicolon. (5:24)\n\n      3 | import * as setup from './hotswap-test-setup';\n      4 |\n    > 5 | let mockUpdateLambdaCode: (params: Lambda.Types.UpdateFunctionCodeRequest) => Lambda.Types.FunctionConfiguration;\n        |                         ^\n      6 | let mockPublishVersion: jest.Mock<Lambda.FunctionConfiguration, Lambda.PublishVersionRequest[]>;\n      7 | let hotswapMockSdkProvider: setup.HotswapMockSdkProvider;\n      8 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/hotswap/nested-stacks-hotswap.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/assertions/test/private/section.test.ts: Missing semicolon. (20:28)\n\n      18 |       // THEN\n      19 |       expect(result.match).toEqual(true);\n    > 20 |       const success = result as MatchSuccess;\n         |                             ^\n      21 |       expect(Object.keys(success.matches).length).toEqual(2);\n      22 |       expect(success.matches.Entry1).toEqual({ foo: 'bar' });\n      23 |       expect(success.matches.Entry2).toEqual({ foo: 'bar', baz: 'qux' });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/assertions/test/private/section.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/aws-cdk/test/integ/helpers/resource-pool.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { ResourcePool } from './resource-pool';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/aws-cdk/test/integ/helpers/resource-pool.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/tools/@aws-cdk/eslint-plugin/test/rules/fixtures.test.ts: Missing semicolon. (8:10)\n\n       6 | rulesDirPlugin.RULES_DIR = path.join(__dirname, '../../lib/rules');\n       7 |\n    >  8 | let linter: ESLint;\n         |           ^\n       9 |\n      10 | const outputRoot = path.join(process.cwd(), '.test-output');\n      11 | fs.mkdirpSync(outputRoot);\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/tools/@aws-cdk/eslint-plugin/test/rules/fixtures.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/util/display.test.ts: Missing semicolon. (6:11)\n\n      4 |\n      5 | describe('Rewritable Block Tests', () => {\n    > 6 |   let block: RewritableBlock;\n        |            ^\n      7 |   beforeEach(() => {\n      8 |     block = new RewritableBlock(process.stderr);\n      9 |     process.stderr.rows = 80;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/util/display.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/hotswap/lambda-versions-aliases-hotswap-deployments.test.ts: Missing semicolon. (4:24)\n\n      2 | import * as setup from './hotswap-test-setup';\n      3 |\n    > 4 | let mockUpdateLambdaCode: (params: Lambda.Types.UpdateFunctionCodeRequest) => Lambda.Types.FunctionConfiguration;\n        |                         ^\n      5 | let mockPublishVersion: jest.Mock<Lambda.FunctionConfiguration, Lambda.PublishVersionRequest[]>;\n      6 | let mockUpdateAlias: (params: Lambda.UpdateAliasRequest) => Lambda.AliasConfiguration;\n      7 | let hotswapMockSdkProvider: setup.HotswapMockSdkProvider;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/hotswap/lambda-versions-aliases-hotswap-deployments.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/hotswap/hotswap-deployments.test.ts: Missing semicolon. (4:26)\n\n      2 | import * as setup from './hotswap-test-setup';\n      3 |\n    > 4 | let hotswapMockSdkProvider: setup.HotswapMockSdkProvider;\n        |                           ^\n      5 | let mockUpdateLambdaCode: (params: Lambda.Types.UpdateFunctionCodeRequest) => Lambda.Types.FunctionConfiguration;\n      6 | let mockUpdateMachineDefinition: (params: StepFunctions.Types.UpdateStateMachineInput) => StepFunctions.Types.UpdateStateMachineOutput;\n      7 | let mockGetEndpointSuffix: () => string;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/hotswap/hotswap-deployments.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/tools/@aws-cdk/node-bundle/test/api/bundle.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/tools/@aws-cdk/node-bundle/test/api/bundle.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/hotswap/s3-bucket-hotswap-deployments.test.ts: Missing semicolon. (5:20)\n\n      3 | import * as setup from './hotswap-test-setup';\n      4 |\n    > 5 | let mockLambdaInvoke: (params: Lambda.Types.InvocationRequest) => Lambda.Types.InvocationResponse;\n        |                     ^\n      6 | let hotswapMockSdkProvider: setup.HotswapMockSdkProvider;\n      7 |\n      8 | const payloadWithoutCustomResProps = {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/hotswap/s3-bucket-hotswap-deployments.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/hotswap/lambda-functions-docker-hotswap-deployments.test.ts: Missing semicolon. (4:24)\n\n      2 | import * as setup from './hotswap-test-setup';\n      3 |\n    > 4 | let mockUpdateLambdaCode: (params: Lambda.Types.UpdateFunctionCodeRequest) => Lambda.Types.FunctionConfiguration;\n        |                         ^\n      5 | let mockTagResource: (params: Lambda.Types.TagResourceRequest) => {};\n      6 | let mockUntagResource: (params: Lambda.Types.UntagResourceRequest) => {};\n      7 | let hotswapMockSdkProvider: setup.HotswapMockSdkProvider;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/hotswap/lambda-functions-docker-hotswap-deployments.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/hotswap/state-machine-hotswap-deployments.test.ts: Missing semicolon. (4:31)\n\n      2 | import * as setup from './hotswap-test-setup';\n      3 |\n    > 4 | let mockUpdateMachineDefinition: (params: StepFunctions.Types.UpdateStateMachineInput) => StepFunctions.Types.UpdateStateMachineOutput;\n        |                                ^\n      5 | let hotswapMockSdkProvider: setup.HotswapMockSdkProvider;\n      6 |\n      7 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/hotswap/state-machine-hotswap-deployments.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/hotswap/lambda-functions-inline-hotswap-deployments.test.ts: Missing semicolon. (4:24)\n\n      2 | import * as setup from './hotswap-test-setup';\n      3 |\n    > 4 | let mockUpdateLambdaCode: (params: Lambda.Types.UpdateFunctionCodeRequest) => Lambda.Types.FunctionConfiguration;\n        |                         ^\n      5 | let mockTagResource: (params: Lambda.Types.TagResourceRequest) => {};\n      6 | let mockUntagResource: (params: Lambda.Types.UntagResourceRequest) => {};\n      7 | let hotswapMockSdkProvider: setup.HotswapMockSdkProvider;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/hotswap/lambda-functions-inline-hotswap-deployments.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/hotswap/lambda-functions-hotswap-deployments.test.ts: Missing semicolon. (4:24)\n\n      2 | import * as setup from './hotswap-test-setup';\n      3 |\n    > 4 | let mockUpdateLambdaCode: (params: Lambda.Types.UpdateFunctionCodeRequest) => Lambda.Types.FunctionConfiguration;\n        |                         ^\n      5 | let mockUpdateLambdaConfiguration: (\n      6 |   params: Lambda.Types.UpdateFunctionConfigurationRequest\n      7 | ) => Lambda.Types.FunctionConfiguration;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/hotswap/lambda-functions-hotswap-deployments.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/hotswap/appsync-mapping-templates-hotswap-deployments.test.ts: Missing semicolon. (4:26)\n\n      2 | import * as setup from './hotswap-test-setup';\n      3 |\n    > 4 | let hotswapMockSdkProvider: setup.HotswapMockSdkProvider;\n        |                           ^\n      5 | let mockUpdateResolver: (params: AppSync.UpdateResolverRequest) => AppSync.UpdateResolverResponse;\n      6 | let mockUpdateFunction: (params: AppSync.UpdateFunctionRequest) => AppSync.UpdateFunctionResponse;\n      7 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/hotswap/appsync-mapping-templates-hotswap-deployments.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/logs/logs-monitor.test.ts: Missing semicolon. (6:7)\n\n      4 | import { MockSdk } from '../../util/mock-sdk';\n      5 |\n    > 6 | let sdk: MockSdk;\n        |        ^\n      7 | let stderrMock: jest.SpyInstance;\n      8 | let monitor: CloudWatchLogEventMonitor;\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/logs/logs-monitor.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/logs/find-cloudwatch-logs.test.ts: Missing semicolon. (7:23)\n\n       5 | import { MockSdkProvider } from '../../util/mock-sdk';\n       6 |\n    >  7 | let logsMockSdkProvider: LogsMockSdkProvider;\n         |                        ^\n       8 | let mockGetEndpointSuffix: () => string;\n       9 |\n      10 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/logs/find-cloudwatch-logs.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/pipelines/test/docker-credentials.test.ts: Missing semicolon. (11:7)\n\n       9 | import { DockerAssetApp, TestApp } from './testhelpers';\n      10 |\n    > 11 | let app: cdk.App;\n         |        ^\n      12 | let stack: cdk.Stack;\n      13 |\n      14 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/pipelines/test/docker-credentials.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/hotswap/code-build-projects-hotswap-deployments.test.ts: Missing semicolon. (4:26)\n\n      2 | import * as setup from './hotswap-test-setup';\n      3 |\n    > 4 | let hotswapMockSdkProvider: setup.HotswapMockSdkProvider;\n        |                           ^\n      5 | let mockUpdateProject: (params: CodeBuild.UpdateProjectInput) => CodeBuild.UpdateProjectOutput;\n      6 |\n      7 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/hotswap/code-build-projects-hotswap-deployments.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/hotswap/ecs-services-hotswap-deployments.test.ts: Missing semicolon. (4:26)\n\n      2 | import * as setup from './hotswap-test-setup';\n      3 |\n    > 4 | let hotswapMockSdkProvider: setup.HotswapMockSdkProvider;\n        |                           ^\n      5 | let mockRegisterTaskDef: jest.Mock<AWS.ECS.RegisterTaskDefinitionResponse, AWS.ECS.RegisterTaskDefinitionRequest[]>;\n      6 | let mockUpdateService: (params: AWS.ECS.UpdateServiceRequest) => AWS.ECS.UpdateServiceResponse;\n      7 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/hotswap/ecs-services-hotswap-deployments.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/yaml-cfn/test/deserialization.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as yaml_cfn from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/yaml-cfn/test/deserialization.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/triggers/test/trigger-handler.test.ts: Unexpected token, expected \",\" (64:27)\n\n      62 | describe('function error', () => {\n      63 |\n    > 64 |   const makeTest = (payload: string | undefined, expectedError: string) => {\n         |                            ^\n      65 |     return async () => {\n      66 |       const invokeMock = jest.spyOn(lambda, 'invoke').mockResolvedValue({\n      67 |         StatusCode: 200,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/triggers/test/trigger-handler.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/region-info/test/fact.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Fact, FactName } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/region-info/test/fact.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/yaml-cfn/test/serialization.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as yaml_cfn from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/yaml-cfn/test/serialization.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/lambda-layer-awscli/test/awscli-layer.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/lambda-layer-awscli/test/awscli-layer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/region-info/test/region-info.test.ts: Missing initializer in const declaration. (6:16)\n\n      4 |\n      5 | test('built-in data is correct', () => {\n    > 6 |   const snapshot: any = {};\n        |                 ^\n      7 |   for (const name of AWS_REGIONS) {\n      8 |     const region = RegionInfo.get(name);\n      9 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/region-info/test/region-info.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/lambda-layer-node-proxy-agent/test/proxy-agent-layer.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/lambda-layer-node-proxy-agent/test/proxy-agent-layer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/region-info/test/default.test.ts: Unexpected token, expected \",\" (77:44)\n\n      75 |   });\n      76 |\n    > 77 |   function expectServicePrincipals(principal: string, regionMap: Record<string, string>) {\n         |                                             ^\n      78 |     expect(Object.fromEntries(Object.keys(regionMap).map(reg => [reg, Default.servicePrincipal(principal, reg, 'EXTENSION')]))).toEqual(regionMap);\n      79 |   }\n      80 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/region-info/test/default.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/example-construct-library/test/example-resource.test.ts: Missing semicolon. (30:11)\n\n      28 |\n      29 | describe('Example Resource', () => {\n    > 30 |   let stack: core.Stack;\n         |            ^\n      31 |\n      32 |   beforeEach(() => {\n      33 |     // try to factor out as much boilerplate test setup to before methods -\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/example-construct-library/test/example-resource.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/integ-tests/test/manifest-writer.test.ts: Missing semicolon. (8:12)\n\n       6 |\n       7 | describe(IntegManifestWriter, () => {\n    >  8 |   let tmpDir: string;\n         |             ^\n       9 |   const manifest: IntegManifest = {\n      10 |     version: 'does not matter',\n      11 |     testCases: {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-tests/test/manifest-writer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/cx-api/test/features.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { testLegacyBehavior } from '@aws-cdk/cdk-build-tools/lib/feature-flag';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/cx-api/test/features.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/lambda-layer-kubectl/test/kubectl-layer.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/lambda-layer-kubectl/test/kubectl-layer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/triggers/test/triggers.test.ts: Unexpected token, expected \",\" (59:29)\n\n      57 |   const resources = template.toJSON().Resources;\n      58 |\n    > 59 |   const dependsOn = (sourceId: string, targetId: string) => {\n         |                              ^\n      60 |     expect(resources[sourceId].DependsOn).toContain(targetId);\n      61 |   };\n      62 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/triggers/test/triggers.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/integ-tests/test/manifest-synthesizer.test.ts: Missing semicolon. (10:9)\n\n       8 | import { IntegManifestSynthesizer } from '../lib/manifest-synthesizer';\n       9 | import { IntegManifestWriter } from '../lib/manifest-writer';\n    > 10 | let write: jest.SpyInstance;\n         |          ^\n      11 | let tmpDir: string;\n      12 | let assembly: CloudAssemblyBuilder;\n      13 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/integ-tests/test/manifest-synthesizer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cx-api/test/cloud-assembly.test.ts: Unexpected token, expected \",\" (38:21)\n\n      36 |   const treeArtifact = assembly.tree();\n      37 |   expect(treeArtifact).toBeDefined();\n    > 38 |   expect(treeArtifact!.file).toEqual('foo.tree.json');\n         |                      ^\n      39 |   expect(treeArtifact!.manifest).toMatchSnapshot();\n      40 | });\n      41 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cx-api/test/cloud-assembly.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cx-api/test/stack-artifact.test.ts: Missing semicolon. (15:11)\n\n      13 | };\n      14 |\n    > 15 | let builder: cxapi.CloudAssemblyBuilder;\n         |            ^\n      16 | beforeEach(() => {\n      17 |   builder = new cxapi.CloudAssemblyBuilder();\n      18 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cx-api/test/stack-artifact.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cx-api/test/placeholders.test.ts: Missing initializer in const declaration. (4:16)\n\n      2 |\n      3 | test('complex placeholder substitution', async () => {\n    > 4 |   const replacer: IEnvironmentPlaceholderProvider = {\n        |                 ^\n      5 |     accountId: () => Promise.resolve('current_account'),\n      6 |     region: () => Promise.resolve('current_region'),\n      7 |     partition: () => Promise.resolve('current_partition'),\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cx-api/test/placeholders.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/util.test.ts: Unexpected token, expected \",\" (85:19)\n\n      83 |     expect(path(aa)).toEqual(['a', 'aa']);\n      84 |     expect(path(a)).toEqual(['a']);\n    > 85 |     function path(s: Stack) {\n         |                    ^\n      86 |       return pathToTopLevelStack(s).map(x => x.node.id);\n      87 |     }\n      88 |   });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/util.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/cx-api/test/environment.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { EnvironmentUtils } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/cx-api/test/environment.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cx-api/test/cloud-assembly-builder.test.ts: Missing initializer in const declaration. (137:13)\n\n      135 |   const session = new cxapi.CloudAssemblyBuilder(outdir);\n      136 |\n    > 137 |   const props: cxschema.ContextQueryProperties = {\n          |              ^\n      138 |     account: '1234',\n      139 |     region: 'asdf',\n      140 |     filter: { a: 'a' },\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cx-api/test/cloud-assembly-builder.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/synthesis.test.ts: Unexpected token, expected \",\" (116:23)\n\n      114 |\n      115 |     class MyConstruct extends Construct {\n    > 116 |       constructor(scope: Construct, id: string) {\n          |                        ^\n      117 |         super(scope, id);\n      118 |\n      119 |         cdk.attachCustomSynthesis(this, {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/synthesis.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/staging.test.ts: Unexpected reserved word 'enum'. (13:0)\n\n      11 | const STUB_INPUT_CONCAT_FILE = '/tmp/docker-stub.input.concat';\n      12 |\n    > 13 | enum DockerStubCommand {\n         | ^\n      14 |   SUCCESS = 'DOCKER_STUB_SUCCESS',\n      15 |   FAIL = 'DOCKER_STUB_FAIL',\n      16 |   SUCCESS_NO_OUTPUT = 'DOCKER_STUB_SUCCESS_NO_OUTPUT',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/staging.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/size.test.ts: Unexpected token, expected \",\" (103:26)\n\n      101 | });\n      102 |\n    > 103 | function floatEqual(actual: number, expected: number) {\n          |                           ^\n      104 |   expect(\n      105 |     // Floats are subject to rounding errors up to Number.ESPILON\n      106 |     actual >= expected - Number.EPSILON && actual <= expected + Number.EPSILON,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/size.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/tokens.test.ts: Missing initializer in const declaration. (366:19)\n\n      364 |\n      365 |       // WHEN\n    > 366 |       const encoded: string[] = Token.asList(token);\n          |                    ^\n      367 |       encoded.push('hello');\n      368 |\n      369 |       // THEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/tokens.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/tag-aspect.test.ts: Unexpected token (6:9)\n\n      4 |\n      5 | class TaggableResource extends CfnResource {\n    > 6 |   public readonly tags: TagManager;\n        |          ^\n      7 |   constructor(scope: Construct, id: string, props: CfnResourceProps) {\n      8 |     super(scope, id, props);\n      9 |     const tags = props.properties?.tags;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/tag-aspect.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/rule.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { CfnRule, Fn, Stack } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/rule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/runtime-info.test.ts: Missing semicolon. (8:7)\n\n       6 | const JSII_RUNTIME_SYMBOL = Symbol.for('jsii.rtti');\n       7 |\n    >  8 | let app: App;\n         |        ^\n       9 | let stack: Stack;\n      10 | let _cdkVersion: string | undefined = undefined;\n      11 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/runtime-info.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/tag-manager.test.ts: Missing initializer in const declaration. (60:16)\n\n      58 |\n      59 |   test('#renderTags() handles standard, map, keyValue, and ASG tag formats', () => {\n    > 60 |     const tagged: TagManager[] = [];\n         |                 ^\n      61 |     const standard = new TagManager(TagType.STANDARD, 'AWS::Resource::Type');\n      62 |     const asg = new TagManager(TagType.AUTOSCALING_GROUP, 'AWS::Resource::Type');\n      63 |     const keyValue = new TagManager(TagType.KEY_VALUE, 'AWS::Resource::Type');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/tag-manager.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/stack.test.ts: Missing semicolon. (320:13)\n\n      318 |       stackName: 'SoThisCouldPotentiallyBeAVeryLongStackName',\n      319 |     });\n    > 320 |     let scope: Construct = stack1;\n          |              ^\n      321 |\n      322 |     // WHEN - deeply nested\n      323 |     for (let i = 0; i < 50; i++) {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/stack.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/parameter.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Construct } from 'constructs';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/parameter.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/secret-value.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { testDeprecated } from '@aws-cdk/cdk-build-tools';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/secret-value.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/stage.test.ts: Unexpected token, expected \"{\" (302:21)\n\n      300 | });\n      301 |\n    > 302 | class TouchingAspect implements IAspect {\n          |                      ^\n      303 |   public readonly visits = new Array<IConstruct>();\n      304 |   public visit(node: IConstruct): void {\n      305 |     this.visits.push(node);\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/stage.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/output.test.ts: Missing semicolon. (4:7)\n\n      2 | import { toCloudFormation } from './util';\n      3 |\n    > 4 | let app: App;\n        |        ^\n      5 | let stack: Stack;\n      6 | beforeEach(() => {\n      7 |   app = new App();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/output.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/metadata-resource.test.ts: Missing semicolon. (8:9)\n\n       6 |\n       7 | describe('MetadataResource', () => {\n    >  8 |   let app: App;\n         |          ^\n       9 |   let stack: Stack;\n      10 |\n      11 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/metadata-resource.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/resource.test.ts: Unexpected token, expected \",\" (272:73)\n\n      270 |   test('the \"type\" property is required when creating a resource', () => {\n      271 |     const stack = new Stack();\n    > 272 |     expect(() => new CfnResource(stack, 'Resource', { notypehere: true } as any)).toThrow();\n          |                                                                          ^\n      273 |   });\n      274 |\n      275 |   test('removal policy is a high level abstraction of deletion policy used by l2', () => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/resource.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/nested-stack.test.ts: Missing semicolon. (10:57)\n\n       8 |     const stack = new Stack();\n       9 |     var nestedStack = new NestedStack(stack, 'MyNestedStack');\n    > 10 |     var cfn_nestedStack = (nestedStack.node.defaultChild) as CfnStack;\n         |                                                          ^\n      11 |     cfn_nestedStack.addPropertyOverride('TemplateURL', 'http://my-url.com');\n      12 |     expect(toCloudFormation(stack)).toEqual({\n      13 |       Resources: {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/nested-stack.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/fn.test.ts: Unexpected token, expected \",\" (6:21)\n\n      4 | import { Intrinsic } from '../lib/private/intrinsic';\n      5 |\n    > 6 | function asyncTest(cb: () => Promise<void>): () => void {\n        |                      ^\n      7 |   return async () => {\n      8 |     let error: any;\n      9 |     try {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/fn.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/expiration.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Duration, Expiration } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/expiration.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/feature-flags.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as cxapi from '@aws-cdk/cx-api';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/feature-flags.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/mappings.test.ts: Missing semicolon. (212:11)\n\n      210 |\n      211 | describe('lazy mapping', () => {\n    > 212 |   let stack: Stack;\n          |            ^\n      213 |   let mapping: CfnMapping;\n      214 |   const backing = {\n      215 |     TopLevelKey1: {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/mappings.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/environment.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { App, Aws, Stack, Token } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/environment.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/custom-resource.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { CustomResource, RemovalPolicy, Stack } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/custom-resource.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/logical-id.test.ts: Unexpected token (211:16)\n\n      209 |   test('customize logical id allocation behavior by overriding `Stack.allocateLogicalId`', () => {\n      210 |     class MyStack extends Stack {\n    > 211 |       protected allocateLogicalId(element: CfnElement): string {\n          |                 ^\n      212 |         if (element.node.id === 'A') { return 'LogicalIdOfA'; }\n      213 |         if (element.node.id === 'B') { return 'LogicalIdOfB'; }\n      214 |         throw new Error('Invalid element ID');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/logical-id.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/include.test.ts: Unexpected token, expected \",\" (101:18)\n\n       99 |  * @returns a deep clone of ``obj`.\n      100 |  */\n    > 101 | function clone(obj: any): any {\n          |                   ^\n      102 |   switch (typeof obj) {\n      103 |     case 'object':\n      104 |       if (Array.isArray(obj)) {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/include.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/dynamic-reference.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { CfnDynamicReference, CfnDynamicReferenceService, Stack } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/dynamic-reference.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/duration.test.ts: Unexpected token, expected \",\" (234:26)\n\n      232 | });\n      233 |\n    > 234 | function floatEqual(actual: number, expected: number) {\n          |                           ^\n      235 |   expect(\n      236 |     // Floats are subject to rounding errors up to Number.ESPILON\n      237 |     actual >= expected - Number.EPSILON && actual <= expected + Number.EPSILON,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/duration.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/cross-environment-token.test.ts: Unexpected token (262:9)\n\n      260 |\n      261 | class MyResource extends Resource {\n    > 262 |   public readonly arn: string;\n          |          ^\n      263 |   public readonly name: string;\n      264 |\n      265 |   constructor(scope: Construct, id: string, physicalName?: string) {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/cross-environment-token.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/context.test.ts: Unexpected token, expected \",\" (172:33)\n\n      170 |  * Get the expected context key from a stack with missing parameters\n      171 |  */\n    > 172 | function expectedContextKey(stack: Stack): string {\n          |                                  ^\n      173 |   const missing = synthesize(stack).manifest.missing;\n      174 |   if (!missing || missing.length !== 1) {\n      175 |     throw new Error('Expecting assembly to include a single missing context report');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/context.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/condition.test.ts: Missing initializer in const declaration. (39:19)\n\n      37 |     // GIVEN\n      38 |     const stack = new cdk.Stack();\n    > 39 |     const propValue: string = cdk.Fn.conditionIf('Cond', 'A', 'B').toString();\n         |                    ^\n      40 |\n      41 |     // WHEN\n      42 |     new cdk.CfnResource(stack, 'MyResource', {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/condition.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/construct.test.ts: Unexpected token, expected \",\" (57:38)\n\n      55 |\n      56 |   test('if \"undefined\" is forcefully used as an \"id\", it will be treated as an empty string', () => {\n    > 57 |     const c = new Construct(undefined as any, undefined as any);\n         |                                       ^\n      58 |     expect(c.node.id).toEqual('');\n      59 |   });\n      60 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/construct.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/cfn-parameter.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { CfnParameter, Stack } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/cfn-parameter.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/cfn-resource.test.ts: Unexpected token, expected \",\" (14:16)\n\n      12 |\n      13 |       let called = false;\n    > 14 |       (resource as any).renderProperties = (val: any) => {\n         |                 ^\n      15 |         called = true;\n      16 |         expect(val).not.toBeNull();\n      17 |       };\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/cfn-resource.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/bundling.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as child_process from 'child_process';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/bundling.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/cfn-codedeploy-blue-green-hook.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { CfnCodeDeployBlueGreenHook, CfnTrafficRoutingType, Stack } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/cfn-codedeploy-blue-green-hook.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/app.test.ts: Unexpected token, expected \",\" (8:22)\n\n       6 | import { App, AppProps } from '../lib/app';\n       7 |\n    >  8 | function withApp(props: AppProps, block: (app: App) => void): cxapi.CloudAssembly {\n         |                       ^\n       9 |   const app = new App({\n      10 |     stackTraces: false,\n      11 |     ...props,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/app.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/cloudformation-json.test.ts: Missing semicolon. (5:7)\n\n      3 | import { evaluateCFN } from './evaluate-cfn';\n      4 |\n    > 5 | let app: App;\n        |        ^\n      6 | let stack: Stack;\n      7 | beforeEach(() => {\n      8 |   app = new App();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/cloudformation-json.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/assets.test.ts: Missing semicolon. (7:9)\n\n       5 |\n       6 | describe('assets', () => {\n    >  7 |   let app: App;\n         |          ^\n       8 |   let stack: Stack;\n       9 |\n      10 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/assets.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/core/test/annotations.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Construct } from 'constructs';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/annotations.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/cfn-json.test.ts: Unexpected token, expected \",\" (82:6)\n\n      80 |         Value: JSON.stringify(input),\n      81 |       },\n    > 82 |     } as any);\n         |       ^\n      83 |     expect(input).toEqual(response.Data.Value);\n      84 |   });\n      85 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/cfn-json.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/arn.test.ts: Unexpected reserved word 'interface'. (129:6)\n\n      127 |\n      128 |     test('various successful parses', () => {\n    > 129 |       interface TestArnComponents extends ArnComponents {\n          |       ^\n      130 |         /** @default true */\n      131 |         checkCfnEncoding?: boolean;\n      132 |       }\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/arn.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cloudformation-include/test/yaml-templates.test.ts: Missing semicolon. (13:11)\n\n      11 |\n      12 | describe('CDK Include', () => {\n    > 13 |   let stack: core.Stack;\n         |            ^\n      14 |\n      15 |   beforeEach(() => {\n      16 |     stack = new core.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cloudformation-include/test/yaml-templates.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/core/test/aspect.test.ts: Unexpected token (7:9)\n\n       5 |\n       6 | class MyConstruct extends Construct {\n    >  7 |   public static IsMyConstruct(x: any): x is MyConstruct {\n         |          ^\n       8 |     return x.visitCounter !== undefined;\n       9 |   }\n      10 |   public visitCounter: number = 0;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/core/test/aspect.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cloudformation-include/test/valid-templates.test.ts: Missing semicolon. (15:11)\n\n      13 |\n      14 | describe('CDK Include', () => {\n    > 15 |   let stack: core.Stack;\n         |            ^\n      16 |\n      17 |   beforeEach(() => {\n      18 |     stack = new core.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cloudformation-include/test/valid-templates.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cloud-assembly-schema/test/manifest.test.ts: Unexpected token, expected \",\" (9:21)\n\n       7 | const FIXTURES = path.join(__dirname, 'fixtures');\n       8 |\n    >  9 | function fixture(name: string) {\n         |                      ^\n      10 |   return path.join(FIXTURES, name, 'manifest.json');\n      11 | }\n      12 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cloud-assembly-schema/test/manifest.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/diff-template.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { diffTemplate, ResourceImpact } from '../lib/diff-template';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/diff-template.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/cfnspec/test/scrutiny.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { propertySpecification, resourceSpecification } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/cfnspec/test/scrutiny.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cloudformation-include/test/nested-stacks.test.ts: Missing semicolon. (13:11)\n\n      11 |\n      12 | describe('CDK Include for nested stacks', () => {\n    > 13 |   let stack: core.Stack;\n         |            ^\n      14 |\n      15 |   beforeEach(() => {\n      16 |     const app = new core.App({ context: { [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false } });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cloudformation-include/test/nested-stacks.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cloudformation-include/test/invalid-templates.test.ts: Missing semicolon. (8:9)\n\n       6 |\n       7 | describe('CDK Include', () => {\n    >  8 |   let app: core.App;\n         |          ^\n       9 |   let stack: core.Stack;\n      10 |\n      11 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cloudformation-include/test/invalid-templates.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cfnspec/test/validate-cfn.test.ts: Unexpected token, expected \",\" (66:23)\n\n      64 | });\n      65 |\n    > 66 | function errorsFor(spec: any) {\n         |                        ^\n      67 |   return CfnSpecValidator.validate(spec).map(e => e.message);\n      68 | }\n      69 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cfnspec/test/validate-cfn.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/render-intrinsics.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { renderIntrinsics } from '../lib/render-intrinsics';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/cloudformation-diff/test/render-intrinsics.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cloudformation-include/test/serverless-transform.test.ts: Missing semicolon. (13:11)\n\n      11 |\n      12 | describe('CDK Include for templates with SAM transform', () => {\n    > 13 |   let stack: core.Stack;\n         |            ^\n      14 |\n      15 |   beforeEach(() => {\n      16 |     const app = new core.App({ context: { [cxapi.NEW_STYLE_STACK_SYNTHESIS_CONTEXT]: false } });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cloudformation-include/test/serverless-transform.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cloud-assembly-schema/test/assets.test.ts: Unexpected token, expected \",\" (184:26)\n\n      182 | });\n      183 |\n    > 184 | function validate(manifest: any) {\n          |                           ^\n      185 |   const dir = fs.mkdtempSync(path.join(os.tmpdir(), 'assets.test.'));\n      186 |   const filePath = path.join(dir, 'manifest.json');\n      187 |   fs.writeFileSync(filePath, JSON.stringify(manifest, undefined, 2));\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cloud-assembly-schema/test/assets.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/cfnspec/test/filtered-specification.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { filteredSpecification, resourceTypes, specification } from '../lib/index';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/cfnspec/test/filtered-specification.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cfnspec/test/patch-set.test.ts: Unexpected token, expected \",\" (7:19)\n\n       5 | import { evaluatePatchSet, PatchSet } from '../build-tools/patch-set';\n       6 |\n    >  7 | function evaluate(p: PatchSet) {\n         |                    ^\n       8 |   return evaluatePatchSet(p, { quiet: true });\n       9 | }\n      10 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cfnspec/test/patch-set.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cloud-assembly-schema/test/schema.test.ts: Unexpected token, expected \",\" (29:29)\n\n      27 | });\n      28 |\n    > 29 | function removeStringKeys(obj: any, keys: string[]) {\n         |                              ^\n      30 |\n      31 |   function _recurse(o: any) {\n      32 |     for (const prop in o) {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cloud-assembly-schema/test/schema.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cloud-assembly-schema/test/integ-tests.test.ts: Unexpected token, expected \",\" (127:26)\n\n      125 | });\n      126 |\n    > 127 | function validate(manifest: any) {\n          |                           ^\n      128 |   const dir = fs.mkdtempSync(path.join(os.tmpdir(), 'integ.test.'));\n      129 |   const filePath = path.join(dir, 'manifest.json');\n      130 |   fs.writeFileSync(filePath, JSON.stringify(manifest, undefined, 2));\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cloud-assembly-schema/test/integ-tests.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/cfnspec/test/docs.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as cfnspec from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/cfnspec/test/docs.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/cfnspec/test/cfnlint-annotations.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as cfnspec from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/cfnspec/test/cfnlint-annotations.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/cfnspec/test/namespaces.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { namespaces } from '../lib/index';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/cfnspec/test/namespaces.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cfnspec/test/augmentation.test.ts: Unexpected token, expected \",\" (6:42)\n\n      4 | import { MetricType } from '../lib/schema';\n      5 |\n    > 6 | function resourceAugmentationTest(resource: string) {\n        |                                           ^\n      7 |   return () => {\n      8 |     const model = cfnspec.resourceAugmentation(resource);\n      9 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cfnspec/test/augmentation.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/cfnspec/test/canned-metrics.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as cfnspec from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/cfnspec/test/canned-metrics.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-xray/test/xray.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-xray/test/xray.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-voiceid/test/voiceid.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-voiceid/test/voiceid.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-wafv2/test/wafv2.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-wafv2/test/wafv2.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-wisdom/test/aws-wisdom.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-wisdom/test/aws-wisdom.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-waf/test/waf.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-waf/test/waf.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-synthetics/test/schedule.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as synthetics from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-synthetics/test/schedule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-transfer/test/transfer.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-transfer/test/transfer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-timestream/test/timestream.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-timestream/test/timestream.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/cfnspec/test/build.test.ts: Missing initializer in const declaration. (5:12)\n\n      3 |\n      4 | test('dropTypelessAttributes works correctly', () => {\n    > 5 |   const spec: schema.Specification = {\n        |             ^\n      6 |     Fingerprint: 'some-fingerprint',\n      7 |     PropertyTypes: {\n      8 |       'CDK::Test::Property': {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/cfnspec/test/build.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-synthetics/test/code.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-synthetics/test/code.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-synthetics/test/metric.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { App, Stack } from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-synthetics/test/metric.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-workspaces/test/workspaces.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-workspaces/test/workspaces.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-wafregional/test/wafregional.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-wafregional/test/wafregional.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/invoke-activity.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/invoke-activity.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/evaluate-expression.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as tasks from '../lib';\n      5 |\n    > 6 | let stack: Stack;\n        |          ^\n      7 | beforeEach(() => {\n      8 |   stack = new Stack();\n      9 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/evaluate-expression.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/start-execution.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as tasks from '../lib';\n       6 |\n    >  7 | let stack: Stack;\n         |          ^\n       8 | let child: sfn.StateMachine;\n       9 | beforeEach(() => {\n      10 |   stack = new Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/start-execution.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-synthetics/test/canary.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-synthetics/test/canary.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/wait.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as cdk from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/wait.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/task-base.test.ts: Missing semicolon. (8:11)\n\n       6 |\n       7 | describe('Task base', () => {\n    >  8 |   let stack: cdk.Stack;\n         |            ^\n       9 |   let task: sfn.TaskStateBase;\n      10 |\n      11 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/task-base.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/eval-nodejs-handler.test.ts: Missing initializer in const declaration. (6:13)\n\n      4 | test('with numbers', async () => {\n      5 |   // GIVEN\n    > 6 |   const event: Event = {\n        |              ^\n      7 |     expression: '$.a + $.b',\n      8 |     expressionAttributeValues: {\n      9 |       '$.a': 4,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions-tasks/test/eval-nodejs-handler.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/state-machine.test.ts: Unexpected token, expected \",\" (70:36)\n\n      68 |\n      69 |     // WHEN\n    > 70 |     const createStateMachine = (name: string) => {\n         |                                     ^\n      71 |       new stepfunctions.StateMachine(stack, name + 'StateMachine', {\n      72 |         stateMachineName: name,\n      73 |         definition: stepfunctions.Chain.start(new stepfunctions.Pass(stack, name + 'Pass')),\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/state-machine.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/pass.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Result } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/pass.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/state-machine-fragment.test.ts: Unexpected token (45:9)\n\n      43 |\n      44 | class ParallelMachineFragment extends stepfunctions.StateMachineFragment {\n    > 45 |   public readonly startState: stepfunctions.State;\n         |          ^\n      46 |   public readonly endStates: stepfunctions.INextable[];\n      47 |\n      48 |   constructor(scope: Construct, id: string) {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/state-machine-fragment.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/state-transition-metrics.test.ts: Unexpected token, expected \",\" (46:38)\n\n      44 | });\n      45 |\n    > 46 | function verifyTransitionMetric(metric: Metric, metricName: string, statistic: string) {\n         |                                       ^\n      47 |   expect(metric).toEqual(expect.objectContaining({\n      48 |     dimensions: { ServiceMetric: 'StateTransition' },\n      49 |     namespace: 'AWS/States',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/state-transition-metrics.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/parallel.test.ts: Unexpected token, expected \",\" (63:18)\n\n      61 | });\n      62 |\n    > 63 | function render(sm: stepfunctions.IChainable) {\n         |                   ^\n      64 |   return new cdk.Stack().resolve(new stepfunctions.StateGraph(sm.startState, 'Test Graph').toGraphJson());\n      65 | }\n      66 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/parallel.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/task.test.ts: Missing semicolon. (8:11)\n\n       6 | describeDeprecated('Task state', () => {\n       7 |\n    >  8 |   let stack: cdk.Stack;\n         |            ^\n       9 |   let task: sfn.Task;\n      10 |\n      11 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/task.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/state-machine-resources.test.ts: Unexpected token (605:49)\n\n      603 |\n      604 |     // WHEN\n    > 605 |     const metrics = new Array<cloudwatch.Metric>();\n          |                                                  ^\n      606 |     metrics.push(stateMachine.metricAborted({ color }));\n      607 |     metrics.push(stateMachine.metricFailed({ color }));\n      608 |     metrics.push(stateMachine.metricStarted({ color }));\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/state-machine-resources.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/fail.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as cdk from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/fail.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/states-language.test.ts: Unexpected token (697:9)\n\n      695 |\n      696 | class ReusableStateMachine extends stepfunctions.StateMachineFragment {\n    > 697 |   public readonly startState: stepfunctions.State;\n          |          ^\n      698 |   public readonly endStates: stepfunctions.INextable[];\n      699 |   constructor(scope: Construct, id: string) {\n      700 |     super(scope, id);\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/states-language.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/map.test.ts: Unexpected token, expected \",\" (197:18)\n\n      195 | });\n      196 |\n    > 197 | function render(sm: stepfunctions.IChainable) {\n          |                   ^\n      198 |   return new cdk.Stack().resolve(new stepfunctions.StateGraph(sm.startState, 'Test Graph').toGraphJson());\n      199 | }\n      200 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/map.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/fields.test.ts: Unexpected token, expected \",\" (141:32)\n\n      139 |       field: JsonPath.stringAt('$.stringField'),\n      140 |       deepField: JsonPath.numberAt('$.numField'),\n    > 141 |       recursiveField: undefined as any,\n          |                                 ^\n      142 |     };\n      143 |     const paths = {\n      144 |       bool: false,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/fields.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ssmcontacts/test/ssmcontacts.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ssmcontacts/test/ssmcontacts.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/custom-state.test.ts: Missing semicolon. (6:11)\n\n      4 |\n      5 | describe('Custom State', () => {\n    > 6 |   let stack: cdk.Stack;\n        |            ^\n      7 |   let stateJson: any;\n      8 |\n      9 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/custom-state.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/activity.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/activity.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-sso/test/sso.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-sso/test/sso.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ssmincidents/test/ssmincidents.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ssmincidents/test/ssmincidents.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ssm/test/util.test.ts:3\n    import { Stack, Token } from '@aws-cdk/core';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ssm/test/util.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/condition.test.ts: Missing initializer in const declaration. (31:15)\n\n      29 |   }),\n      30 |   test('Exercise a number of other conditions', () => {\n    > 31 |     const cases: Array<[stepfunctions.Condition, object]> = [\n         |                ^\n      32 |       [stepfunctions.Condition.stringLessThan('$.a', 'foo'), { Variable: '$.a', StringLessThan: 'foo' }],\n      33 |       [stepfunctions.Condition.stringLessThanEquals('$.a', 'foo'), { Variable: '$.a', StringLessThanEquals: 'foo' }],\n      34 |       [stepfunctions.Condition.stringGreaterThan('$.a', 'foo'), { Variable: '$.a', StringGreaterThan: 'foo' }],\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-stepfunctions/test/condition.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ssm/test/parameter-store-string.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ssm/test/parameter-store-string.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ssm/test/parameter.test.ts:3\n    import { Template } from '@aws-cdk/assertions';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ssm/test/parameter.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-signer/test/signing-profile.test.ts: Missing semicolon. (5:7)\n\n      3 | import * as signer from '../lib';\n      4 |\n    > 5 | let app: cdk.App;\n        |        ^\n      6 | let stack: cdk.Stack;\n      7 | beforeEach( () => {\n      8 |   app = new cdk.App( {} );\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-signer/test/signing-profile.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-sns/test/sns.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-sns/test/sns.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ses-actions/test/actions.test.ts: Missing semicolon. (10:9)\n\n       8 | import * as actions from '../lib';\n       9 |\n    > 10 | let stack: Stack;\n         |          ^\n      11 | let rule: ses.ReceiptRule;\n      12 | let topic: sns.Topic;\n      13 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ses-actions/test/actions.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ses/test/receipt-rule.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ses/test/receipt-rule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ses/test/receipt-rule-set.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ses/test/receipt-rule-set.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-sns-subscriptions/test/subs.test.ts: Missing semicolon. (12:9)\n\n      10 | /* eslint-disable quote-props */\n      11 | const restrictSqsDescryption = { [cxapi.SNS_SUBSCRIPTIONS_SQS_DECRYPTION_POLICY]: true };\n    > 12 | let stack: Stack;\n         |          ^\n      13 | let topic: sns.Topic;\n      14 |\n      15 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-sns-subscriptions/test/subs.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ssm/test/ssm-document.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ssm/test/ssm-document.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-sns/test/subscription.test.ts: Unexpected token, expected \",\" (223:56)\n\n      221 |       SubscriptionProtocol.APPLICATION,\n      222 |     ])\n    > 223 |   ('throws with raw delivery for %s protocol', (protocol: SubscriptionProtocol) => {\n          |                                                         ^\n      224 |     // GIVEN\n      225 |     const stack = new cdk.Stack();\n      226 |     const topic = new sns.Topic(stack, 'Topic');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-sns/test/subscription.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ses/test/email-identity.test.ts: Missing semicolon. (6:9)\n\n      4 | import { ConfigurationSet, DkimIdentity, EmailIdentity, Identity, MailFromBehaviorOnMxFailure } from '../lib';\n      5 |\n    > 6 | let stack: Stack;\n        |          ^\n      7 | beforeEach(() => {\n      8 |   stack = new Stack();\n      9 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ses/test/email-identity.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ses/test/receipt-filter.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ses/test/receipt-filter.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-sqs/test/sqs.test.ts: Unexpected token, expected \",\" (579:25)\n\n      577 | });\n      578 |\n    > 579 | function testGrant(action: (q: sqs.Queue, principal: iam.IPrincipal) => void, ...expectedActions: string[]) {\n          |                          ^\n      580 |   const stack = new Stack();\n      581 |   const queue = new sqs.Queue(stack, 'MyQueue');\n      582 |   const principal = new iam.User(stack, 'User');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-sqs/test/sqs.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ses/test/dedicated-ip-pool.test.ts: Missing semicolon. (5:9)\n\n      3 | import { DedicatedIpPool } from '../lib';\n      4 |\n    > 5 | let stack: Stack;\n        |          ^\n      6 | beforeEach(() => {\n      7 |   stack = new Stack();\n      8 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ses/test/dedicated-ip-pool.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-servicediscovery/test/service.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-servicediscovery/test/service.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ses/test/configuration-set.test.ts: Missing semicolon. (5:9)\n\n      3 | import { ConfigurationSet, ConfigurationSetTlsPolicy, DedicatedIpPool, SuppressionReasons } from '../lib';\n      4 |\n    > 5 | let stack: Stack;\n        |          ^\n      6 | beforeEach(() => {\n      7 |   stack = new Stack();\n      8 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ses/test/configuration-set.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-servicediscovery/test/namespace.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-servicediscovery/test/namespace.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-servicecatalogappregistry/test/application.test.ts: Missing semicolon. (7:11)\n\n       5 |\n       6 | describe('Application', () => {\n    >  7 |   let stack: cdk.Stack;\n         |            ^\n       8 |\n       9 |   beforeEach(() => {\n      10 |     const app = new cdk.App({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-servicecatalogappregistry/test/application.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-securityhub/test/securityhub.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-securityhub/test/securityhub.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-servicediscovery/test/instance.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-servicediscovery/test/instance.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-servicecatalogappregistry/test/attribute-group.test.ts: Missing semicolon. (7:11)\n\n       5 |\n       6 | describe('Attribute Group', () => {\n    >  7 |   let stack: cdk.Stack;\n         |            ^\n       8 |\n       9 |   beforeEach(() => {\n      10 |     const app = new cdk.App({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-servicecatalogappregistry/test/attribute-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-servicecatalog/test/product-stack.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as fs from 'fs';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-servicecatalog/test/product-stack.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-servicecatalog/test/tag-option.test.ts: Missing semicolon. (6:9)\n\n      4 |\n      5 | describe('TagOptions', () => {\n    > 6 |   let app: cdk.App;\n        |          ^\n      7 |   let stack: cdk.Stack;\n      8 |\n      9 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-servicecatalog/test/tag-option.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-secretsmanager/test/rotation-schedule.test.ts: Missing semicolon. (9:9)\n\n       7 | import * as secretsmanager from '../lib';\n       8 |\n    >  9 | let stack: cdk.Stack;\n         |          ^\n      10 | beforeEach(() => {\n      11 |   stack = new cdk.Stack();\n      12 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-secretsmanager/test/rotation-schedule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-sam/test/function.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-sam/test/function.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-sdb/test/sdb.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-sdb/test/sdb.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-servicecatalog/test/product.test.ts: Missing semicolon. (12:9)\n\n      10 | /* eslint-disable quote-props */\n      11 | describe('Product', () => {\n    > 12 |   let app: cdk.App;\n         |          ^\n      13 |   let stack: cdk.Stack;\n      14 |\n      15 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-servicecatalog/test/product.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-secretsmanager/test/secret-rotation.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as secretsmanager from '../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let vpc: ec2.IVpc;\n      8 | let secret: secretsmanager.ISecret;\n      9 | let securityGroup: ec2.SecurityGroup;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-secretsmanager/test/secret-rotation.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-servicecatalog/test/portfolio.test.ts: Missing semicolon. (8:11)\n\n       6 |\n       7 | describe('Portfolio', () => {\n    >  8 |   let stack: cdk.Stack;\n         |            ^\n       9 |\n      10 |   beforeEach(() => {\n      11 |     const app = new cdk.App({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-servicecatalog/test/portfolio.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-secretsmanager/test/secret.test.ts: Missing semicolon. (9:7)\n\n       7 | import * as secretsmanager from '../lib';\n       8 |\n    >  9 | let app: cdk.App;\n         |        ^\n      10 | let stack: cdk.Stack;\n      11 | beforeEach(() => {\n      12 |   app = new cdk.App();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-secretsmanager/test/secret.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-sam/test/application.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-sam/test/application.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-sagemaker/test/sagemaker.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-sagemaker/test/sagemaker.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-s3objectlambda/test/s3objectlambda.test.ts: Missing semicolon. (7:9)\n\n       5 | import { AccessPoint } from '../lib';\n       6 |\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 | let bucket: s3.Bucket;\n       9 | let handler: lambda.Function;\n      10 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3objectlambda/test/s3objectlambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-s3-deployment/test/lambda.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { spawnSync } from 'child_process';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3-deployment/test/lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-s3-notifications/test/sns.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3-notifications/test/sns.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-s3outposts/test/s3outposts.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3outposts/test/s3outposts.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-s3-notifications/test/notifications.test.ts: Missing initializer in const declaration. (137:19)\n\n      135 |   const bucket = new s3.Bucket(stack, 'TestBucket');\n      136 |\n    > 137 |   const queueTarget: s3.IBucketNotificationDestination = {\n          |                    ^\n      138 |     bind: _ => ({\n      139 |       type: s3.BucketNotificationDestinationType.QUEUE,\n      140 |       arn: 'arn:aws:sqs:...',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3-notifications/test/notifications.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-s3-notifications/test/queue.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template, Annotations } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3-notifications/test/queue.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-s3-deployment/test/content.test.ts: Unexpected token, expected \",\" (88:106)\n\n      86 |   const stack = new Stack();\n      87 |   const handler = new lambda.Function(stack, 'Handler', { runtime: lambda.Runtime.NODEJS_14_X, code: lambda.Code.fromInline('foo'), handler: 'index.handler' });\n    > 88 |   const actual = Source.data('file1.txt', `boom-${stack.account}`).bind(stack, { handlerRole: handler.role! });\n         |                                                                                                           ^\n      89 |   expect(actual.markers).toStrictEqual({\n      90 |     '<<marker:0xbaba:0>>': { Ref: 'AWS::AccountId' },\n      91 |   });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3-deployment/test/content.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-s3/test/notifications-resource.lambda.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { spawnSync } from 'child_process';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3/test/notifications-resource.lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-sam/test/api.test.ts: Missing semicolon. (6:11)\n\n      4 |\n      5 | describe('AWS::Serverless::Api', () => {\n    > 6 |   let stack: cdk.Stack;\n        |            ^\n      7 |   beforeEach(() => {\n      8 |     stack = new cdk.Stack();\n      9 |   });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-sam/test/api.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-s3-deployment/test/bucket-deployment.test.ts: Missing initializer in const declaration. (452:22)\n\n      450 | // type checking structure that forces to update it if BucketAccessControl changes\n      451 | // see `--acl` here: https://docs.aws.amazon.com/cli/latest/reference/s3/sync.html\n    > 452 | const accessControlMap: Record<s3.BucketAccessControl, string> = {\n          |                       ^\n      453 |   [s3.BucketAccessControl.PRIVATE]: 'private',\n      454 |   [s3.BucketAccessControl.PUBLIC_READ]: 'public-read',\n      455 |   [s3.BucketAccessControl.PUBLIC_READ_WRITE]: 'public-read-write',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3-deployment/test/bucket-deployment.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-s3/test/notification.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3/test/notification.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-s3/test/util.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as cdk from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3/test/util.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-s3/test/rules.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3/test/rules.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-s3-assets/test/asset.test.ts: Unexpected token, expected \",\" (34:28)\n\n      32 |   const session = app.synth();\n      33 |\n    > 34 |   expect(stack.resolve(entry!.data)).toEqual({\n         |                             ^\n      35 |     path: SAMPLE_ASSET_DIR,\n      36 |     id: '6b84b87243a4a01c592d78e1fd3855c4bfef39328cd0a450cc97e81717fea2a2',\n      37 |     packaging: 'zip',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3-assets/test/asset.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-s3-assets/test/compat.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { FollowMode } from '@aws-cdk/assets';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3-assets/test/compat.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-s3/test/cors.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3/test/cors.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-s3/test/metrics.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3/test/metrics.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-rum/test/rum.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rum/test/rum.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-s3/test/bucket-policy.test.ts: Unexpected token, expected \",\" (179:44)\n\n      177 |     });\n      178 |\n    > 179 |     function bucketPolicyForBucketNamed(name: string): CfnBucketPolicy {\n          |                                             ^\n      180 |       return new s3.CfnBucketPolicy(stack, `CfnBucketPolicy-${name}`, {\n      181 |         policyDocument: {\n      182 |           'Statement': [\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3/test/bucket-policy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-route53resolver/test/firewall-domain-list.test.ts: Missing semicolon. (7:9)\n\n       5 | import { FirewallDomainList, FirewallDomains } from '../lib';\n       6 |\n    >  7 | let stack: Stack;\n         |          ^\n       8 | beforeEach(() => {\n       9 |   stack = new Stack();\n      10 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53resolver/test/firewall-domain-list.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/userpool-domain.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/userpool-domain.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-s3/test/auto-delete-objects-handler.test.ts: Missing initializer in const declaration. (26:13)\n\n      24 | test('does nothing on create event', async () => {\n      25 |   // GIVEN\n    > 26 |   const event: Partial<AWSLambda.CloudFormationCustomResourceCreateEvent> = {\n         |              ^\n      27 |     RequestType: 'Create',\n      28 |     ResourceProperties: {\n      29 |       ServiceToken: 'Foo',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3/test/auto-delete-objects-handler.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-s3/test/aspect.test.ts: Unexpected token, expected \"{\" (36:30)\n\n      34 | });\n      35 |\n    > 36 | class BucketVersioningChecker implements cdk.IAspect {\n         |                               ^\n      37 |   public visit(node: IConstruct): void {\n      38 |     if (node instanceof s3.CfnBucket) {\n      39 |       if (!node.versioningConfiguration ||\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3/test/aspect.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53recoverycontrol/test/route53recoverycontrol.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53recoverycontrol/test/route53recoverycontrol.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-s3/test/bucket.test.ts: Missing semicolon. (718:13)\n\n      716 |\n      717 |   describe('fromCfnBucket()', () => {\n    > 718 |     let stack: cdk.Stack;\n          |              ^\n      719 |     let cfnBucket: s3.CfnBucket;\n      720 |     let bucket: s3.IBucket;\n      721 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-s3/test/bucket.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53recoveryreadiness/test/route53recoveryreadiness.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53recoveryreadiness/test/route53recoveryreadiness.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/interface-vpc-endpoint-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/interface-vpc-endpoint-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/elastic-beanstalk-environment-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/elastic-beanstalk-environment-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/route53-record.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/route53-record.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/cloudfront-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/cloudfront-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-route53/test/vpc-endpoint-service-domain-name.test.ts: Missing semicolon. (6:9)\n\n      4 | import { PublicHostedZone, VpcEndpointServiceDomainName } from '../lib';\n      5 |\n    > 6 | let stack: Stack;\n        |          ^\n      7 | let nlb: IVpcEndpointServiceLoadBalancer;\n      8 | let vpces: VpcEndpointService;\n      9 | let zone: PublicHostedZone;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53/test/vpc-endpoint-service-domain-name.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/load-balancer-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/load-balancer-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/classic-load-balancer-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/classic-load-balancer-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/apigatewayv2-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/apigatewayv2-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53-patterns/test/bucket-website-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53-patterns/test/bucket-website-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/global-accelerator-target.test.ts: Support for the experimental syntax 'jsx' isn't currently enabled (37:40):\n\n      35 |   const stack = new Stack();\n      36 |   const accelerator = new globalaccelerator.Accelerator(stack, 'Accelerator');\n    > 37 |   const logicalId = stack.getLogicalId(<globalaccelerator.CfnAccelerator>accelerator.node.defaultChild);\n         |                                        ^\n      38 |   const zone = new route53.PublicHostedZone(stack, 'HostedZone', { zoneName: 'test.public' });\n      39 |\n      40 |   // WHEN\n\n    Add @babel/preset-react (https://github.com/babel/babel/tree/main/packages/babel-preset-react) to the 'presets' section of your Babel config to enable transformation.\n    If you want to leave it as-is, add @babel/plugin-syntax-jsx (https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx) to the 'plugins' section to enable parsing.\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/global-accelerator-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/apigateway-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/apigateway-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53/test/util.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as cdk from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53/test/util.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/bucket-website-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53-targets/test/bucket-website-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-route53/test/route53.test.ts: Unexpected token, expected \",\" (57:31)\n\n      55 |     });\n      56 |\n    > 57 |     new TxtRecord(importedZone as any, 'Record', {\n         |                                ^\n      58 |       zone: importedZone,\n      59 |       recordName: 'lookHere',\n      60 |       values: ['SeeThere'],\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53/test/route53.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-route53/test/delete-existing-record-set-handler.test.ts: Missing initializer in const declaration. (24:11)\n\n      22 | import { handler } from '../lib/delete-existing-record-set-handler';\n      23 |\n    > 24 | const event: AWSLambda.CloudFormationCustomResourceEvent & { PhysicalResourceId?: string } = {\n         |            ^\n      25 |   RequestType: 'Create',\n      26 |   ServiceToken: 'service-token',\n      27 |   ResponseURL: 'response-url',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53/test/delete-existing-record-set-handler.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-resourcegroups/test/resourcegroups.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-resourcegroups/test/resourcegroups.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-robomaker/test/robomaker.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-robomaker/test/robomaker.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-route53resolver/test/firewall-rule-group.test.ts: Missing semicolon. (6:9)\n\n      4 | import { DnsBlockResponse, FirewallDomainList, FirewallRuleAction, FirewallRuleGroup, IFirewallDomainList } from '../lib';\n      5 |\n    > 6 | let stack: Stack;\n        |          ^\n      7 | let firewallDomainList: IFirewallDomainList;\n      8 | beforeEach(() => {\n      9 |   stack = new Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53resolver/test/firewall-rule-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-resiliencehub/test/resiliencehub.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-resiliencehub/test/resiliencehub.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-redshiftserverless/test/redshiftserverless.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-redshiftserverless/test/redshiftserverless.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-route53/test/hosted-zone.test.ts: Missing semicolon. (182:18)\n\n      180 |   test('fromLookup throws error when domainName is undefined', () => {\n      181 |     // GIVEN\n    > 182 |     let domainName!: string;\n          |                   ^\n      183 |     const stack = new cdk.Stack(undefined, 'TestStack', {\n      184 |       env: { account: '123456789012', region: 'us-east-1' },\n      185 |     });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53/test/hosted-zone.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-route53/test/record-set.test.ts: Missing initializer in const declaration. (157:16)\n\n      155 |     });\n      156 |\n    > 157 |     const target: route53.IAliasRecordTarget = {\n          |                 ^\n      158 |       bind: () => {\n      159 |         return {\n      160 |           hostedZoneId: 'Z2P70J7EXAMPLE',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53/test/record-set.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-redshift/test/user.test.ts: Missing semicolon. (9:11)\n\n       7 |\n       8 | describe('cluster user', () => {\n    >  9 |   let stack: cdk.Stack;\n         |            ^\n      10 |   let vpc: ec2.Vpc;\n      11 |   let cluster: redshift.ICluster;\n      12 |   const databaseName = 'databaseName';\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-redshift/test/user.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-route53/test/hosted-zone-provider.test.ts: Missing semicolon. (17:56)\n\n      15 |\n      16 |       const assembly = app.synth().getStackArtifact(stack.artifactId);\n    > 17 |       const missing = assembly.assembly.manifest.missing!;\n         |                                                         ^\n      18 |       expect(missing && missing.length === 1).toEqual(true);\n      19 |\n      20 |       const fakeZoneId = '11111111111111';\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-route53/test/hosted-zone-provider.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-redshift/test/parameter-group.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-redshift/test/parameter-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-refactorspaces/test/refactorspaces.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-refactorspaces/test/refactorspaces.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-rekognition/test/aws-rekognition.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rekognition/test/aws-rekognition.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-redshift/test/table.test.ts: Missing initializer in const declaration. (8:20)\n\n       6 | describe('cluster table', () => {\n       7 |   const tableName = 'tableName';\n    >  8 |   const tableColumns: redshift.Column[] = [\n         |                     ^\n       9 |     { name: 'col1', dataType: 'varchar(4)' },\n      10 |     { name: 'col2', dataType: 'float' },\n      11 |   ];\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-redshift/test/table.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-redshift/test/subnet-group.test.ts: Missing semicolon. (6:9)\n\n      4 | import { ClusterSubnetGroup } from '../lib';\n      5 |\n    > 6 | let stack: Stack;\n        |          ^\n      7 | let vpc: ec2.IVpc;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-redshift/test/subnet-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-redshift/test/cluster.test.ts: Missing semicolon. (9:9)\n\n       7 | import { CfnCluster } from '../lib/redshift.generated';\n       8 |\n    >  9 | let stack: cdk.Stack;\n         |          ^\n      10 | let vpc: ec2.IVpc;\n      11 |\n      12 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-redshift/test/cluster.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-redshift/test/privileges.test.ts: Missing semicolon. (7:11)\n\n       5 |\n       6 | describe('table privileges', () => {\n    >  7 |   let stack: cdk.Stack;\n         |            ^\n       8 |   let vpc: ec2.Vpc;\n       9 |   let cluster: redshift.ICluster;\n      10 |   const databaseName = 'databaseName';\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-redshift/test/privileges.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-rds/test/subnet-group.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as rds from '../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let vpc: ec2.IVpc;\n      8 |\n      9 | describe('subnet group', () => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/subnet-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-rds/test/parameter-group.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/parameter-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-redshift/test/database-query.test.ts: Missing semicolon. (9:11)\n\n       7 |\n       8 | describe('database query', () => {\n    >  9 |   let stack: cdk.Stack;\n         |            ^\n      10 |   let vpc: ec2.Vpc;\n      11 |   let cluster: redshift.ICluster;\n      12 |   let minimalProps: DatabaseQueryProps<any>;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-redshift/test/database-query.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-rds/test/option-group.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/option-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-rds/test/serverless-cluster-from-snapshot.test.ts: Unexpected token, expected \"{\" (165:20)\n\n      163 | });\n      164 |\n    > 165 | function testStack(): cdk.Stack {\n          |                     ^\n      166 |   const stack = new cdk.Stack(undefined, undefined, { env: { account: '12345', region: 'us-test-1' } });\n      167 |   stack.node.setContext('availability-zones:12345:us-test-1', ['us-test-1a', 'us-test-1b']);\n      168 |   return stack;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/serverless-cluster-from-snapshot.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-rds/test/instance-engine.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/instance-engine.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-rds/test/proxy.test.ts: Missing semicolon. (8:9)\n\n       6 | import * as rds from '../lib';\n       7 |\n    >  8 | let stack: cdk.Stack;\n         |          ^\n       9 | let vpc: ec2.IVpc;\n      10 |\n      11 | let importedDbProxy: rds.IDatabaseProxy;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/proxy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-rds/test/database-secretmanager.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/database-secretmanager.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-quicksight/test/quicksight.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-quicksight/test/quicksight.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-rds/test/serverless-cluster.test.ts: Unexpected token, expected \",\" (941:22)\n\n      939 | });\n      940 |\n    > 941 | function testStack(app?: cdk.App, id?: string): cdk.Stack {\n          |                       ^\n      942 |   const stack = new cdk.Stack(app, id, { env: { account: '12345', region: 'us-test-1' } });\n      943 |   stack.node.setContext('availability-zones:12345:us-test-1', ['us-test-1a', 'us-test-1b']);\n      944 |   return stack;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/serverless-cluster.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-rds/test/instance.test.ts: Missing semicolon. (14:9)\n\n      12 | import * as rds from '../lib';\n      13 |\n    > 14 | let stack: cdk.Stack;\n         |          ^\n      15 | let vpc: ec2.Vpc;\n      16 |\n      17 | describe('instance', () => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/instance.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-rds/test/cluster.test.ts: Unexpected token, expected \",\" (144:47)\n\n      142 |     const instances = Object.keys(instanceResources);\n      143 |     const instanceDependencies = Object.values(instanceResources)\n    > 144 |       .map(properties => (properties.DependsOn as string[]).filter(dependency => instances.includes(dependency)));\n          |                                                ^\n      145 |     // check that there are only required dependencies to form a chain of dependant instances\n      146 |     for (const dependencies of instanceDependencies) {\n      147 |       expect(dependencies.length).toBeLessThanOrEqual(1);\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/cluster.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-rds/test/database-secret.test.ts: Unexpected token, expected \",\" (108:36)\n\n      106 | });\n      107 |\n    > 108 | function getSecretLogicalId(dbSecret: DatabaseSecret, stack: Stack): string {\n          |                                     ^\n      109 |   const cfnSecret = dbSecret.node.defaultChild as CfnResource;\n      110 |   return stack.resolve(cfnSecret.logicalId);\n      111 | }\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/database-secret.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-pinpointemail/test/pinpointemail.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-pinpointemail/test/pinpointemail.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-panorama/test/aws-panorama.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-panorama/test/aws-panorama.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-rds/test/cluster-engine.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { AuroraEngineVersion, AuroraMysqlEngineVersion, AuroraPostgresEngineVersion, DatabaseClusterEngine } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-rds/test/cluster-engine.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-opsworkscm/test/opsworkscm.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-opsworkscm/test/opsworkscm.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ram/test/ram.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ram/test/ram.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-opensearchservice/test/opensearch-access-policy.test.ts: Missing semicolon. (6:7)\n\n      4 | import { OpenSearchAccessPolicy } from '../lib/opensearch-access-policy';\n      5 |\n    > 6 | let app: App;\n        |        ^\n      7 | let stack: Stack;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-opensearchservice/test/opensearch-access-policy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-qldb/test/qldb.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-qldb/test/qldb.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-personalize/test/personalize.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-personalize/test/personalize.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-opensearchservice/test/log-group-resource-policy.test.ts: Missing semicolon. (6:7)\n\n      4 | import { LogGroupResourcePolicy } from '../lib/log-group-resource-policy';\n      5 |\n    > 6 | let app: App;\n        |        ^\n      7 | let stack: Stack;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-opensearchservice/test/log-group-resource-policy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-opensearchservice/test/domain.test.ts: Missing semicolon. (13:7)\n\n      11 | import { Domain, EngineVersion } from '../lib';\n      12 |\n    > 13 | let app: App;\n         |        ^\n      14 | let stack: Stack;\n      15 |\n      16 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-opensearchservice/test/domain.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-networkfirewall/test/networkfirewall.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-networkfirewall/test/networkfirewall.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-nimblestudio/test/nimblestudio.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-nimblestudio/test/nimblestudio.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-opsworks/test/opsworks.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-opsworks/test/opsworks.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-neptune/test/endpoint.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Endpoint } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-neptune/test/endpoint.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-pinpoint/test/pinpoint.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-pinpoint/test/pinpoint.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-neptune/test/subnet-group.test.ts: Missing semicolon. (6:9)\n\n      4 | import { SubnetGroup } from '../lib';\n      5 |\n    > 6 | let stack: Stack;\n        |          ^\n      7 | let vpc: ec2.IVpc;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-neptune/test/subnet-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-networkmanager/test/networkmanager.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-networkmanager/test/networkmanager.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-neptune/test/parameter-group.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-neptune/test/parameter-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-neptune/test/cluster.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-neptune/test/cluster.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-neptune/test/instance.test.ts: Unexpected token (146:9)\n\n      144 |\n      145 | class TestStack extends cdk.Stack {\n    > 146 |   public readonly vpc: ec2.Vpc;\n          |          ^\n      147 |   public readonly cluster: DatabaseCluster;\n      148 |\n      149 |   constructor(scope?: constructs.Construct, id?: string, props: cdk.StackProps = {}) {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-neptune/test/instance.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-mwaa/test/mwaa.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-mwaa/test/mwaa.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-msk/test/cluster.test.ts: Missing semicolon. (12:11)\n\n      10 | /* eslint-disable quote-props */\n      11 | describe('MSK Cluster', () => {\n    > 12 |   let stack: core.Stack;\n         |            ^\n      13 |   let vpc: ec2.IVpc;\n      14 |\n      15 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-msk/test/cluster.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-mediastore/test/mediastore.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-mediastore/test/mediastore.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lex/test/lex.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lex/test/lex.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-mediatailor/test/mediatailor.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-mediatailor/test/mediatailor.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-mediapackage/test/mediapackage.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-mediapackage/test/mediapackage.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-mediaconnect/test/mediaconnect.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-mediaconnect/test/mediaconnect.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-mediaconvert/test/mediaconvert.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-mediaconvert/test/mediaconvert.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-medialive/test/medialive.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-medialive/test/medialive.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-macie/test/macie.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-macie/test/macie.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-managedblockchain/test/managedblockchain.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-managedblockchain/test/managedblockchain.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lookoutvision/test/lookoutvision.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lookoutvision/test/lookoutvision.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-memorydb/test/memorydb.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-memorydb/test/memorydb.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-logs-destinations/test/lambda.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as dests from '../lib';\n       6 |\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 | let fn: lambda.Function;\n       9 | let logGroup: logs.LogGroup;\n      10 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-logs-destinations/test/lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lookoutmetrics/test/lookoutmetrics.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lookoutmetrics/test/lookoutmetrics.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-logs/test/policy.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-logs/test/policy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-logs-destinations/test/kinesis.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-logs-destinations/test/kinesis.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lookoutequipment/test/lookoutequipment.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lookoutequipment/test/lookoutequipment.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-logs/test/subscriptionfilter.test.ts: Unexpected token, expected \"{\" (28:22)\n\n      26 | });\n      27 |\n    > 28 | class FakeDestination implements ILogSubscriptionDestination {\n         |                       ^\n      29 |   public bind(_scope: Construct, _sourceLogGroup: ILogGroup) {\n      30 |     return {\n      31 |       arn: 'arn:bogus',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-logs/test/subscriptionfilter.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-logs/test/query-definition.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-logs/test/query-definition.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-logs/test/pattern.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { FilterPattern } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-logs/test/pattern.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-logs/test/logstream.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-logs/test/logstream.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-logs/test/metricfilter.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-logs/test/metricfilter.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-location/test/location.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-location/test/location.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-logs/test/destination.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template, Match } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-logs/test/destination.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-logs/test/loggroup.test.ts: Unexpected token, expected \",\" (197:12)\n\n      195 |     '',\n      196 |     ':*',\n    > 197 |   ], (suffix: string) => {\n          |             ^\n      198 |     // GIVEN\n      199 |     const stack = new Stack();\n      200 |     const user = new iam.User(stack, 'Role');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-logs/test/loggroup.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-logs/test/log-retention.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-logs/test/log-retention.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-logs/test/log-retention-provider.test.ts: Missing semicolon. (21:1)\n\n      19 | const context = {\n      20 |   functionName: 'provider',\n    > 21 | } as AWSLambda.Context;\n         |  ^\n      22 |\n      23 | function createRequest(type: string) {\n      24 |   return nock('https://localhost')\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-logs/test/log-retention-provider.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-licensemanager/test/licensemanager.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-licensemanager/test/licensemanager.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lightsail/test/lightsail.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lightsail/test/lightsail.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda-python/test/layer.test.ts: Missing semicolon. (26:9)\n\n      24 | });\n      25 |\n    > 26 | let stack: Stack;\n         |          ^\n      27 | beforeEach(() => {\n      28 |   stack = new Stack();\n      29 |   jest.clearAllMocks();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-python/test/layer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda-python/test/bundling.test.ts:20\n    import * as fs from 'fs';\n    ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-python/test/bundling.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda-nodejs/test/package-manager.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as os from 'os';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-nodejs/test/package-manager.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda-python/test/packaging.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-python/test/packaging.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda-nodejs/test/package-installation.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as child_process from 'child_process';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-nodejs/test/package-installation.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda-python/test/function.test.ts: Unexpected token, expected \",\" (11:51)\n\n       9 |   return {\n      10 |     Bundling: {\n    > 11 |       bundle: jest.fn().mockImplementation((options: BundlingProps): Code => {\n         |                                                    ^\n      12 |         const mockObjectKey = (() => {\n      13 |           const hashType = options.assetHashType ?? (options.assetHash ? 'custom' : 'source');\n      14 |           switch (hashType) {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-python/test/function.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda-nodejs/test/function.test.ts: Unexpected token (14:15)\n\n      12 |     Bundling: {\n      13 |       bundle: jest.fn().mockReturnValue({\n    > 14 |         bind: (): CodeConfig => {\n         |                ^\n      15 |           return {\n      16 |             s3Location: {\n      17 |               bucketName: 'my-bucket',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-nodejs/test/function.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda-nodejs/test/docker.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { spawnSync } from 'child_process';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-nodejs/test/docker.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda-go/test/docker.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { spawnSync } from 'child_process';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-go/test/docker.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda-go/test/function.test.ts: Missing semicolon. (21:9)\n\n      19 | });\n      20 |\n    > 21 | let stack: Stack;\n         |          ^\n      22 | beforeEach(() => {\n      23 |   stack = new Stack();\n      24 |   jest.clearAllMocks();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-go/test/function.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda-nodejs/test/bundling.test.ts: Missing semicolon. (13:33)\n\n      11 |\n      12 |\n    > 13 | let detectPackageInstallationMock: jest.SpyInstance<PackageInstallation | undefined>;\n         |                                  ^\n      14 | beforeEach(() => {\n      15 |   jest.clearAllMocks();\n      16 |   jest.resetAllMocks();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-nodejs/test/bundling.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda-go/test/util.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as child_process from 'child_process';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-go/test/util.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda-nodejs/test/util.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as child_process from 'child_process';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-nodejs/test/util.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/sqs.test.ts: Missing initializer in const declaration. (92:19)\n\n      90 |     const fn = new TestFunction(stack, 'Fn');\n      91 |     const q = new sqs.Queue(stack, 'Q');\n    > 92 |     const batchSize : number = 500;\n         |                    ^\n      93 |\n      94 |     // WHEN\n      95 |     fn.addEventSource(new sources.SqsEventSource(q, {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/sqs.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda-go/test/bundling.test.ts: Unexpected token, expected \",\" (316:29)\n\n      314 |     architecture: Architecture.X86_64,\n      315 |     commandHooks: {\n    > 316 |       beforeBundling(inputDir: string, outputDir: string): string[] {\n          |                              ^\n      317 |         return [\n      318 |           `echo hello > ${inputDir}/a.txt`,\n      319 |           `cp ${inputDir}/a.txt ${outputDir}`,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-go/test/bundling.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/kafka.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template, Match } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/kafka.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/dynamo.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/dynamo.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda/test/singleton-lambda.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/singleton-lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda-destinations/test/destinations.test.ts: Missing semicolon. (9:9)\n\n       7 | import * as destinations from '../lib';\n       8 |\n    >  9 | let stack: Stack;\n         |          ^\n      10 | beforeEach(() => {\n      11 |   stack = new Stack();\n      12 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-destinations/test/destinations.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda/test/vpc-lambda.test.ts: Missing semicolon. (9:11)\n\n       7 | describe('lambda + vpc', () => {\n       8 |   describe('lambda in vpc', () => {\n    >  9 |     let app: cdk.App;\n         |            ^\n      10 |     let stack: cdk.Stack;\n      11 |     let vpc: ec2.Vpc;\n      12 |     let fn: lambda.Function;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/vpc-lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda/test/lambda-version.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/lambda-version.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/sns.test.ts: Missing initializer in const declaration. (57:15)\n\n      55 |     const topic = new sns.Topic(stack, 'T');\n      56 |     const queue = new sqs.Queue(stack, 'Q');\n    > 57 |     const props: sources.SnsEventSourceProps = {\n         |                ^\n      58 |       deadLetterQueue: queue,\n      59 |       filterPolicy: {\n      60 |         Field: sns.SubscriptionFilter.stringFilter({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/sns.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda/test/runtime.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as lambda from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/runtime.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/api.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/api.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/s3.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/s3.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/kinesis.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda-event-sources/test/kinesis.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda/test/layers.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/layers.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda/test/lambda-platform.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/lambda-platform.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda/test/function-url.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/function-url.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lakeformation/test/lakeformation.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lakeformation/test/lakeformation.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda/test/function.test.ts: Missing semicolon. (435:13)\n\n      433 |\n      434 |   describe('Function.fromFunctionAttributes()', () => {\n    > 435 |     let stack: cdk.Stack;\n          |              ^\n      436 |\n      437 |     beforeEach(() => {\n      438 |       const app = new cdk.App();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/function.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda/test/code-signing-config.test.ts: Missing semicolon. (6:7)\n\n      4 | import * as lambda from '../lib';\n      5 |\n    > 6 | let app: cdk.App;\n        |        ^\n      7 | let stack: cdk.Stack;\n      8 | beforeEach( () => {\n      9 |   app = new cdk.App( {} );\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/code-signing-config.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda/test/event-source-mapping.test.ts: Missing semicolon. (5:9)\n\n      3 | import { Code, EventSourceMapping, Function, Runtime, Alias, StartingPosition } from '../lib';\n      4 |\n    > 5 | let stack: cdk.Stack;\n        |          ^\n      6 | let fn: Function;\n      7 | beforeEach(() => {\n      8 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/event-source-mapping.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-kms/test/key.test.ts: Missing initializer in const declaration. (8:19)\n\n       6 | import * as kms from '../lib';\n       7 |\n    >  8 | const ADMIN_ACTIONS: string[] = [\n         |                    ^\n       9 |   'kms:Create*',\n      10 |   'kms:Describe*',\n      11 |   'kms:Enable*',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-kms/test/key.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda/test/function-hash.test.ts: Missing semicolon. (147:14)\n\n      145 |\n      146 |   describe('lambda layers', () => {\n    > 147 |     let stack1: Stack;\n          |               ^\n      148 |     let layer1: lambda.LayerVersion;\n      149 |     let layer2: lambda.LayerVersion;\n      150 |     beforeAll(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/function-hash.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-kms/test/via-service-principal.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as iam from '@aws-cdk/aws-iam';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-kms/test/via-service-principal.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-lambda/test/alias.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Annotations, Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/alias.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda/test/lambda-insights.test.ts: Unexpected token, expected \",\" (11:7)\n\n       9 |  */\n      10 | function functionWithInsightsVersion(\n    > 11 |   stack: cdk.Stack,\n         |        ^\n      12 |   id: string,\n      13 |   insightsVersion: lambda.LambdaInsightsVersion,\n      14 |   architecture?: lambda.Architecture,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/lambda-insights.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-kms/test/key.from-lookup.test.ts: Unexpected reserved word 'interface'. (42:0)\n\n      40 | });\n      41 |\n    > 42 | interface MockKeyContextResponse {\n         | ^\n      43 |   readonly keyId: string;\n      44 | }\n      45 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-kms/test/key.from-lookup.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-lambda/test/code.test.ts: Missing semicolon. (438:21)\n\n      436 |\n      437 |   describe('lambda.Code.fromDockerBuild', () => {\n    > 438 |     let fromBuildMock: jest.SpyInstance<cdk.DockerImage>;\n          |                      ^\n      439 |     let cpMock: jest.Mock<any, any>;\n      440 |\n      441 |     beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-lambda/test/code.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-kms/test/alias.test.ts: Unexpected token, expected \",\" (126:21)\n\n      124 |   /* eslint-disable @aws-cdk/no-core-construct */\n      125 |   class MyConstruct extends Construct {\n    > 126 |     constructor(scope: Construct, id: string, key: IKey) {\n          |                      ^\n      127 |       super(scope, id);\n      128 |\n      129 |       new CfnOutput(stack, 'OutId', {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-kms/test/alias.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-kinesisanalytics/test/kinesisanalytics.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-kinesisanalytics/test/kinesisanalytics.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-kinesisvideo/test/kinesisvideo.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-kinesisvideo/test/kinesisvideo.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-kinesisanalyticsv2/test/kinesisanalyticsv2.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-kinesisanalyticsv2/test/kinesisanalyticsv2.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-kinesisfirehose/test/delivery-stream.test.ts: Missing semicolon. (12:11)\n\n      10 |\n      11 | describe('delivery stream', () => {\n    > 12 |   let stack: cdk.Stack;\n         |            ^\n      13 |   let deliveryStreamRole: iam.IRole;\n      14 |   let dependable: Construct;\n      15 |   let mockS3Destination: firehose.IDestination;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-kinesisfirehose/test/delivery-stream.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-kafkaconnect/test/kafkaconnect.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-kafkaconnect/test/kafkaconnect.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-healthlake/test/healthlake.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-healthlake/test/healthlake.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iotthingsgraph/test/iotthingsgraph.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iotthingsgraph/test/iotthingsgraph.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iottwinmaker/test/iottwinmaker.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iottwinmaker/test/iottwinmaker.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ivs/test/ivs.test.ts: Missing semicolon. (11:9)\n\n       9 | -----END PUBLIC KEY-----`;\n      10 |\n    > 11 | let stack: Stack;\n         |          ^\n      12 |\n      13 | beforeEach( () => {\n      14 |   const app = new App({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ivs/test/ivs.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-kendra/test/kendra.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-kendra/test/kendra.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iotwireless/test/iotwireless.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iotwireless/test/iotwireless.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-kinesisfirehose-destinations/test/s3-bucket.test.ts: Missing semicolon. (12:11)\n\n      10 |\n      11 | describe('S3 destination', () => {\n    > 12 |   let stack: cdk.Stack;\n         |            ^\n      13 |   let bucket: s3.IBucket;\n      14 |   let destinationRole: iam.IRole;\n      15 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-kinesisfirehose-destinations/test/s3-bucket.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-kinesis/test/stream.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-kinesis/test/stream.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-kinesisanalytics-flink/test/application.test.ts: Missing semicolon. (12:11)\n\n      10 |\n      11 | describe('Application', () => {\n    > 12 |   let stack: core.Stack;\n         |            ^\n      13 |   let bucket: s3.Bucket;\n      14 |   let requiredProps: {\n      15 |     runtime: flink.Runtime;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-kinesisanalytics-flink/test/application.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iotfleethub/test/iotfleethub.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iotfleethub/test/iotfleethub.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iotevents/test/input.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as iotevents from '../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | beforeEach(() => {\n      8 |   stack = new cdk.Stack();\n      9 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iotevents/test/input.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iotsitewise/test/iotsitewise.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iotsitewise/test/iotsitewise.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iotevents/test/detector-model.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as iotevents from '../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let input: iotevents.IInput;\n      8 | beforeEach(() => {\n      9 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iotevents/test/detector-model.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iotcoredeviceadvisor/test/iotcoredeviceadvisor.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iotcoredeviceadvisor/test/iotcoredeviceadvisor.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-imagebuilder/test/imagebuilder.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-imagebuilder/test/imagebuilder.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-inspectorv2/test/inspectorv2.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-inspectorv2/test/inspectorv2.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iam/test/user.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/user.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iot/test/topic-rule.test.ts: Missing initializer in const declaration. (136:15)\n\n      134 |   const stack = new cdk.Stack();\n      135 |\n    > 136 |   const action1: iot.IAction = {\n          |                ^\n      137 |     _bind: () => ({\n      138 |       configuration: {\n      139 |         http: { url: 'http://example.com' },\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot/test/topic-rule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/policy.test.ts: Missing semicolon. (8:9)\n\n       6 |\n       7 | describe('IAM policy', () => {\n    >  8 |   let app: App;\n         |          ^\n       9 |   let stack: Stack;\n      10 |\n      11 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/policy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iotanalytics/test/iotanalytics.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iotanalytics/test/iotanalytics.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-inspector/test/inspector.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-inspector/test/inspector.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iam/test/principals.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/principals.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iot1click/test/iot1click.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iot1click/test/iot1click.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/role.from-role-arn.test.ts: Missing semicolon. (11:9)\n\n       9 |\n      10 | describe('IAM Role.fromRoleArn', () => {\n    > 11 |   let app: App;\n         |          ^\n      12 |\n      13 |   beforeEach(() => {\n      14 |     app = new App();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/role.from-role-arn.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/saml-provider.test.ts: Missing semicolon. (5:9)\n\n      3 | import { SamlMetadataDocument, SamlProvider } from '../lib';\n      4 |\n    > 5 | let stack: Stack;\n        |          ^\n      6 | beforeEach(() => {\n      7 |   stack = new Stack();\n      8 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/saml-provider.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iam/test/policy-statement.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Stack } from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/policy-statement.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/merge-statements.test.ts: Unexpected token, expected \",\" (16:2)\n\n      14 |   ['resources', true],\n      15 |   ['notResources', false],\n    > 16 | ] as Array<['resources' | 'notResources', boolean]>)\n         |   ^\n      17 | ('merge %p statements: %p', (key, doMerge) => {\n      18 |   assertMergedC(doMerge, [\n      19 |     new iam.PolicyStatement({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/merge-statements.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/role.test.ts: Unexpected token, expected \",\" (303:25)\n\n      301 |     const assumedBy = new ServicePrincipal('bla');\n      302 |\n    > 303 |     const expected = (val: any) => 'Role path must be either a slash or valid characters (alphanumerics and symbols) surrounded by slashes. '\n          |                          ^\n      304 |     + `Valid characters are unicode characters in [\\\\u0021-\\\\u007F]. However, ${val} is provided.`;\n      305 |     expect(() => new Role(stack, 'MyRole', { assumedBy, path: 'aaa' })).toThrow(expected('aaa'));\n      306 |   });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/role.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/permissions-boundary.test.ts: Missing semicolon. (6:7)\n\n      4 | import * as iam from '../lib';\n      5 |\n    > 6 | let app: App;\n        |        ^\n      7 | let stack: Stack;\n      8 | beforeEach(() => {\n      9 |   app = new App();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/permissions-boundary.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/managed-policy.test.ts: Missing semicolon. (6:9)\n\n      4 |\n      5 | describe('managed policy', () => {\n    > 6 |   let app: cdk.App;\n        |          ^\n      7 |   let stack: cdk.Stack;\n      8 |\n      9 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/managed-policy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iam/test/lazy-role.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/lazy-role.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/oidc-provider.test.ts: Unexpected token, expected \",\" (86:66)\n\n      84 |     // THEN\n      85 |     const template = app.synth().getStackArtifact(stack.artifactId).template;\n    > 86 |     const resourceTypes = Object.values(template.Resources).map((r: any) => r.Type).sort();\n         |                                                                   ^\n      87 |     expect(resourceTypes).toStrictEqual([\n      88 |       // custom resource perovider resources\n      89 |       'AWS::IAM::Role',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/oidc-provider.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iam/test/group.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/immutable-role.test.ts: Missing semicolon. (9:11)\n\n       7 |\n       8 | describe('ImmutableRole', () => {\n    >  9 |   let stack: Stack;\n         |            ^\n      10 |   let mutableRole: iam.Role;\n      11 |   let immutableRole: iam.IRole;\n      12 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/immutable-role.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-iam/test/access-key.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/access-key.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-guardduty/test/guardduty.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-guardduty/test/guardduty.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/escape-hatch.test.ts: Missing semicolon. (17:47)\n\n      15 |     });\n      16 |\n    > 17 |     const cfn = user.node.findChild('Resource') as iam.CfnUser;\n         |                                                ^\n      18 |     cfn.addPropertyOverride('UserName', 'OverriddenUserName');\n      19 |\n      20 |     Template.fromStack(stack).templateMatches({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/escape-hatch.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/grant.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as iam from '../lib';\n      5 |\n    > 6 | let stack: Stack;\n        |          ^\n      7 | let resource: CfnResource;\n      8 | beforeEach(() => {\n      9 |   stack = new Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/grant.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/auto-cross-stack-refs.test.ts: Unexpected token, expected \",\" (61:35)\n\n      59 |\n      60 |     // THEN\n    > 61 |     expect(() => cdk.App.of(stack1)!.synth()).toThrow(/Cannot reference across apps/);\n         |                                    ^\n      62 |   });\n      63 | });\n      64 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/auto-cross-stack-refs.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/policy-document.test.ts: Missing initializer in const declaration. (396:24)\n\n      394 |   test('addPrincipal correctly merges array in', () => {\n      395 |     const stack = new Stack();\n    > 396 |     const arrayPrincipal: IPrincipal = {\n          |                         ^\n      397 |       get grantPrincipal() { return this; },\n      398 |       assumeRoleAction: 'sts:AssumeRole',\n      399 |       policyFragment: new PrincipalPolicyFragment({ AWS: ['foo', 'bar'] }),\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/policy-document.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-greengrassv2/test/greengrass.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-greengrassv2/test/greengrass.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-iam/test/cross-account.test.ts: Missing semicolon. (14:7)\n\n      12 | //   a different account than the resource).\n      13 |\n    > 14 | let app: cdk.App;\n         |        ^\n      15 | const stack1Account = '1234';\n      16 | let stack1: cdk.Stack;\n      17 | const stack2Account = '5678';\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-iam/test/cross-account.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-greengrass/test/greengrass.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-greengrass/test/greengrass.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-groundstation/test/groundstation.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-groundstation/test/groundstation.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-glue/test/schema.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Schema } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-glue/test/schema.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-glue/test/security-configuration.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-glue/test/security-configuration.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-glue/test/job-executable.test.ts: Missing semicolon. (36:11)\n\n      34 |\n      35 | describe('JobExecutable', () => {\n    > 36 |   let stack: cdk.Stack;\n         |            ^\n      37 |   let bucket: s3.IBucket;\n      38 |   let script: glue.Code;\n      39 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-glue/test/job-executable.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-glue/test/job.test.ts: Missing semicolon. (22:11)\n\n      20 | describe('Job', () => {\n      21 |   const jobName = 'test-job';\n    > 22 |   let stack: cdk.Stack;\n         |            ^\n      23 |\n      24 |   beforeEach(() => {\n      25 |     stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-glue/test/job.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-glue/test/connection.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-glue/test/connection.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-gamelift/test/gamelift.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-gamelift/test/gamelift.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-glue/test/database.test.ts: Missing semicolon. (5:9)\n\n      3 | import * as glue from '../lib';\n      4 |\n    > 5 | let stack: Stack;\n        |          ^\n      6 |\n      7 | beforeEach( () => {\n      8 |   const app = new App({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-glue/test/database.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-glue/test/table.test.ts: Missing initializer in const declaration. (1018:17)\n\n      1016 |     });\n      1017 |\n    > 1018 |     const indexes: PartitionIndex[] = [{\n           |                  ^\n      1019 |       indexName: 'ind1',\n      1020 |       keyNames: ['part'],\n      1021 |     }, {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-glue/test/table.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-globalaccelerator-endpoints/test/endpoints.test.ts: Missing semicolon. (8:9)\n\n       6 | import * as endpoints from '../lib';\n       7 |\n    >  8 | let stack: Stack;\n         |          ^\n       9 | let vpc: ec2.Vpc;\n      10 | let accelerator: ga.Accelerator;\n      11 | let listener: ga.Listener;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-globalaccelerator-endpoints/test/endpoints.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-fsx/test/maintenance-time.test.ts: Unexpected token, expected \",\" (9:53)\n\n       7 |   [Weekday.SUNDAY, 24, 0, '7:24:00'],\n       8 |   [Weekday.SUNDAY, 0, 59, '7:00:59'],\n    >  9 | ])('valid maintenance time %s:%d:%d returns %s', (day: Weekday, hour: number, minute: number, expected: string) => {\n         |                                                      ^\n      10 |   strictEqual(\n      11 |     new LustreMaintenanceTime({ day, hour, minute }).toTimestamp(),\n      12 |     expected,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-fsx/test/maintenance-time.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-globalaccelerator/test/globalaccelerator-security-group.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-globalaccelerator/test/globalaccelerator-security-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-fms/test/fms.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-fms/test/fms.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-forecast/test/forecast.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-forecast/test/forecast.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-globalaccelerator/test/globalaccelerator.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-globalaccelerator/test/globalaccelerator.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-glue/test/code.test.ts: Missing semicolon. (9:11)\n\n       7 |\n       8 | describe('Code', () => {\n    >  9 |   let stack: cdk.Stack;\n         |            ^\n      10 |   let script: glue.Code;\n      11 |\n      12 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-glue/test/code.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-frauddetector/test/frauddetector.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-frauddetector/test/frauddetector.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-eventschemas/test/eventschemas.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eventschemas/test/eventschemas.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-finspace/test/finspace.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-finspace/test/finspace.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-fsx/test/lustre-file-system.test.ts: Missing semicolon. (9:25)\n\n       7 |\n       8 | describe('FSx for Lustre File System', () => {\n    >  9 |   let lustreConfiguration: LustreConfiguration;\n         |                          ^\n      10 |   let stack: Stack;\n      11 |   let storageCapacity: number;\n      12 |   let vpcSubnet: ISubnet;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-fsx/test/lustre-file-system.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-fis/test/fis.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-fis/test/fis.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-evidently/test/evidently.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-evidently/test/evidently.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-events/test/event-bus.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events/test/event-bus.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-events/test/matchers.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { App, Stack } from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events/test/matchers.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-emrserverless/test/emrserverless.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-emrserverless/test/emrserverless.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-events/test/connection.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events/test/connection.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-events/test/util.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { mergeEventPattern } from '../lib/util';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events/test/util.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events/test/input.test.ts: Unexpected token, expected \"{\" (315:17)\n\n      313 | });\n      314 |\n    > 315 | class SomeTarget implements IRuleTarget {\n          |                  ^\n      316 |   public constructor(private readonly input: RuleTargetInput) {\n      317 |   }\n      318 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events/test/input.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-events/test/rule.test.ts: Missing initializer in const declaration. (290:12)\n\n      288 |   test('targets can be added via props or addTarget with input transformer', () => {\n      289 |     const stack = new cdk.Stack();\n    > 290 |     const t1: IRuleTarget = {\n          |             ^\n      291 |       bind: () => ({\n      292 |         id: '',\n      293 |         arn: 'ARN1',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events/test/rule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-events/test/api-destination.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events/test/api-destination.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-events/test/schedule.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Duration, Stack, Lazy } from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events/test/schedule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-emr/test/emr.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-emr/test/emr.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-emrcontainers/test/emrcontainers.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-emrcontainers/test/emrcontainers.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-elasticsearch/test/log-group-resource-policy.test.ts: Missing semicolon. (6:7)\n\n      4 | import { LogGroupResourcePolicy } from '../lib/log-group-resource-policy';\n      5 |\n    > 6 | let app: App;\n        |        ^\n      7 | let stack: Stack;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticsearch/test/log-group-resource-policy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-events/test/archive.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-events/test/archive.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-elasticsearch/test/domain.test.ts: Missing semicolon. (15:7)\n\n      13 | import { Domain, ElasticsearchVersion } from '../lib/domain';\n      14 |\n    > 15 | let app: App;\n         |        ^\n      16 | let stack: Stack;\n      17 |\n      18 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticsearch/test/domain.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-elasticsearch/test/elasticsearch-access-policy.test.ts: Missing semicolon. (6:7)\n\n      4 | import { ElasticsearchAccessPolicy } from '../lib/elasticsearch-access-policy';\n      5 |\n    > 6 | let app: App;\n        |        ^\n      7 | let stack: Stack;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticsearch/test/elasticsearch-access-policy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancing/test/loadbalancer.test.ts: Unexpected token, expected \",\" (177:32)\n\n      175 |       Subnets: vpc.selectSubnets({\n      176 |         subnetGroupName: 'private1',\n    > 177 |       }).subnetIds.map((subnetId: string) => stack.resolve(subnetId)),\n          |                                 ^\n      178 |     });\n      179 |   });\n      180 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancing/test/loadbalancer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2-targets/test/ip-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2-targets/test/ip-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2-targets/test/instance-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2-targets/test/instance-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2-targets/test/alb-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2-targets/test/alb-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2-actions/test/cognito.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2-actions/test/cognito.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2-targets/test/lambda-target.test.ts: Missing semicolon. (8:9)\n\n       6 | import * as targets from '../lib';\n       7 |\n    >  8 | let stack: Stack;\n         |          ^\n       9 | let listener: elbv2.ApplicationListener;\n      10 | let fn: lambda.Function;\n      11 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticloadbalancingv2-targets/test/lambda-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-eks/test/k8s-patch.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eks/test/k8s-patch.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-elasticache/test/elasticache.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticache/test/elasticache.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-eks/test/service-account.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eks/test/service-account.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-elasticbeanstalk/test/elasticbeanstalk.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-elasticbeanstalk/test/elasticbeanstalk.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-eks/test/nodegroup.test.ts: Missing semicolon. (42:32)\n\n      40 |\n      41 |     // THEN\n    > 42 |     const root = stack.node.root as cdk.App;\n         |                                 ^\n      43 |     const stackArtifact = root.synth().getStackByName(stack.stackName);\n      44 |     expect(stackArtifact.template.Resources.Nodegroup62B4B2C1.Properties.AmiType).toBeUndefined();\n      45 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eks/test/nodegroup.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-eks/test/user-data.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as autoscaling from '@aws-cdk/aws-autoscaling';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eks/test/user-data.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-eks/test/fargate.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eks/test/fargate.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-eks/test/helm-chart.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eks/test/helm-chart.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-eks/test/k8s-object-value.test.ts: Missing semicolon. (26:31)\n\n      24 |     const expectedCustomResourceId = 'MyAttributeF1E9B10D';\n      25 |\n    > 26 |     const app = stack.node.root as App;\n         |                                ^\n      27 |     const stackTemplate = app.synth().getStackArtifact(stack.stackName).template;\n      28 |     expect(stackTemplate.Resources[expectedCustomResourceId]).toEqual({\n      29 |       Type: 'Custom::AWSCDK-EKS-KubernetesObjectValue',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eks/test/k8s-object-value.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-eks/test/fargate-resource-provider.test.ts: Missing semicolon. (125:15)\n\n      123 |       const handler = new FargateProfileResourceHandler(client, newRequestMock());\n      124 |\n    > 125 |       let error: any;\n          |                ^\n      126 |       try {\n      127 |         await handler.isComplete();\n      128 |       } catch (e) {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eks/test/fargate-resource-provider.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-eks/test/k8s-manifest.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eks/test/k8s-manifest.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-efs/test/efs-file-system.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template, Match } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-efs/test/efs-file-system.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-efs/test/access-point.test.ts: Missing semicolon. (6:9)\n\n      4 | import { AccessPoint, FileSystem } from '../lib';\n      5 |\n    > 6 | let stack: Stack;\n        |          ^\n      7 | let vpc: ec2.Vpc;\n      8 | let fileSystem: FileSystem;\n      9 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-efs/test/access-point.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-eks/test/alb-controller.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as fs from 'fs';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eks/test/alb-controller.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-eks/test/cluster.test.ts: Missing semicolon. (52:86)\n\n      50 |     });\n      51 |\n    > 52 |     const nested = stack.node.tryFindChild('@aws-cdk/aws-eks.ClusterResourceProvider') as cdk.NestedStack;\n         |                                                                                       ^\n      53 |\n      54 |     Template.fromStack(nested).hasResourceProperties('AWS::Lambda::Function', {\n      55 |       Environment: { Variables: { foo: 'bar' } },\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eks/test/cluster.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-eks/test/cluster-resource-provider.test.ts: Missing initializer in const declaration. (34:15)\n\n      32 |     test('generated cluster name does not exceed 100 characters', async () => {\n      33 |       // GIVEN\n    > 34 |       const req: AWSLambda.CloudFormationCustomResourceCreateEvent = {\n         |                ^\n      35 |         StackId: 'fake-stack-id',\n      36 |         RequestId: '602c078a-6181-4352-9676-4f00352445aa',\n      37 |         ResourceType: 'Custom::EKSCluster',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eks/test/cluster-resource-provider.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecs/test/splunk-log-driver.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as ecs from '../lib';\n       6 |\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 | let td: ecs.TaskDefinition;\n       9 | let secret: secretsmanager.ISecret;\n      10 | const image = ecs.ContainerImage.fromRegistry('test-image');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/splunk-log-driver.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecs/test/json-file-log-driver.test.ts: Missing semicolon. (5:9)\n\n      3 | import * as ecs from '../lib';\n      4 |\n    > 5 | let stack: cdk.Stack;\n        |          ^\n      6 | let td: ecs.TaskDefinition;\n      7 | const image = ecs.ContainerImage.fromRegistry('test-image');\n      8 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/json-file-log-driver.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs/test/task-definition.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/task-definition.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-eks/test/awsauth.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-eks/test/awsauth.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecs/test/journald-log-driver.test.ts: Missing semicolon. (5:9)\n\n      3 | import * as ecs from '../lib';\n      4 |\n    > 5 | let stack: cdk.Stack;\n        |          ^\n      6 | let td: ecs.TaskDefinition;\n      7 | const image = ecs.ContainerImage.fromRegistry('test-image');\n      8 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/journald-log-driver.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecs/test/environment-file.test.ts: Missing initializer in const declaration. (29:36)\n\n      27 |       const image = ecs.ContainerImage.fromRegistry('/aws/aws-example-app');\n      28 |       const taskDefinition = new ecs.Ec2TaskDefinition(stack, 'TaskDef');\n    > 29 |       const containerDefinitionProps: ecs.ContainerDefinitionProps = {\n         |                                     ^\n      30 |         environmentFiles: [fileAsset],\n      31 |         image,\n      32 |         memoryLimitMiB: 512,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/environment-file.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs/test/container-definition.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/container-definition.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecs/test/syslog-log-driver.test.ts: Missing semicolon. (5:9)\n\n      3 | import * as ecs from '../lib';\n      4 |\n    > 5 | let stack: cdk.Stack;\n        |          ^\n      6 | let td: ecs.TaskDefinition;\n      7 | const image = ecs.ContainerImage.fromRegistry('test-image');\n      8 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/syslog-log-driver.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecs/test/gelf-log-driver.test.ts: Missing semicolon. (5:9)\n\n      3 | import * as ecs from '../lib';\n      4 |\n    > 5 | let stack: cdk.Stack;\n        |          ^\n      6 | let td: ecs.TaskDefinition;\n      7 | const image = ecs.ContainerImage.fromRegistry('test-image');\n      8 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/gelf-log-driver.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecr-assets/test/image-asset.test.ts: Unexpected token, expected \",\" (62:48)\n\n      60 |     // THEN\n      61 |     const assetMetadata = stack.node.metadata.find(({ type }) => type === cxschema.ArtifactMetadataEntryType.ASSET);\n    > 62 |     expect(assetMetadata && (assetMetadata.data as cxschema.ContainerImageAssetMetadataEntry).buildArgs).toEqual({ a: 'b' });\n         |                                                 ^\n      63 |\n      64 |   });\n      65 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecr-assets/test/image-asset.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecs/test/firelens-log-driver.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as ecs from '../lib';\n       6 |\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 | let td: ecs.TaskDefinition;\n       9 | const image = ecs.ContainerImage.fromRegistry('test-image');\n      10 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/firelens-log-driver.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecs/test/aws-log-driver.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as ecs from '../lib';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let td: ecs.TaskDefinition;\n      8 | const image = ecs.ContainerImage.fromRegistry('test-image');\n      9 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/aws-log-driver.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecs/test/fluentd-log-driver.test.ts: Missing semicolon. (5:9)\n\n      3 | import * as ecs from '../lib';\n      4 |\n    > 5 | let stack: cdk.Stack;\n        |          ^\n      6 | let td: ecs.TaskDefinition;\n      7 | const image = ecs.ContainerImage.fromRegistry('test-image');\n      8 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/fluentd-log-driver.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecr/test/auth-token.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecr/test/auth-token.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecs/test/base-service.test.ts: Missing semicolon. (4:9)\n\n      2 | import * as ecs from '../lib';\n      3 |\n    > 4 | let stack: cdk.Stack;\n        |          ^\n      5 |\n      6 | beforeEach(() => {\n      7 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/base-service.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecr/test/repository.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { EOL } from 'os';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecr/test/repository.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecr-assets/test/tarball-asset.test.ts: Unexpected token, expected \",\" (167:26)\n\n      165 | });\n      166 |\n    > 167 | function isAssetManifest(x: cxapi.CloudArtifact): x is cxapi.AssetManifestArtifact {\n          |                           ^\n      168 |   return x instanceof cxapi.AssetManifestArtifact;\n      169 | }\n      170 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecr-assets/test/tarball-asset.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/vpn.test.ts: Unexpected token, expected \",\" (336:20)\n\n      334 |       vpnConnections: {\n      335 |         VpnConnection: {\n    > 336 |           ip: token as any,\n          |                     ^\n      337 |         },\n      338 |       },\n      339 |     });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/vpn.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ecs/test/app-mesh-proxy-configuration.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/app-mesh-proxy-configuration.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/vpc-endpoint-service.test.ts: Unexpected token, expected \"{\" (11:31)\n\n       9 |  * A load balancer that can host a VPC Endpoint Service\n      10 |  */\n    > 11 | class DummyEndpointLoadBalacer implements IVpcEndpointServiceLoadBalancer {\n         |                                ^\n      12 |   /**\n      13 |    * The ARN of the load balancer that hosts the VPC Endpoint Service\n      14 |    */\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/vpc-endpoint-service.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ec2/test/vpc-endpoint.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/vpc-endpoint.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/userdata.test.ts: Unexpected token, expected \",\" (45:50)\n\n      43 |     const resource = new ec2.Vpc(stack, 'RESOURCE');\n      44 |     const userData = ec2.UserData.forWindows();\n    > 45 |     const logicalId = (resource.node.defaultChild as CfnResource).logicalId;\n         |                                                   ^\n      46 |\n      47 |     // WHEN\n      48 |     userData.addSignalOnExitCommand( resource );\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/userdata.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/volume.test.ts: Missing semicolon. (1220:11)\n\n      1218 |   test('validation fromVolumeAttributes', () => {\n      1219 |     // GIVEN\n    > 1220 |     let idx: number = 0;\n           |            ^\n      1221 |     const stack = new cdk.Stack();\n      1222 |     const volume = new Volume(stack, 'Volume', {\n      1223 |       availabilityZone: 'us-east-1a',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/volume.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/vpc-flow-logs.test.ts: Unexpected token, expected \"{\" (457:23)\n\n      455 | });\n      456 |\n    > 457 | function getTestStack(): Stack {\n          |                        ^\n      458 |   return new Stack(undefined, 'TestStack', {\n      459 |     env: { account: '123456789012', region: 'us-east-1' },\n      460 |   });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/vpc-flow-logs.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ec2/test/network-utils.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { CidrBlock, InvalidCidrRangeError, NetworkBuilder, NetworkUtils } from '../lib/network-util';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/network-utils.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/vpc.from-lookup.test.ts: Unexpected reserved word 'interface'. (274:0)\n\n      272 | });\n      273 |\n    > 274 | interface MockVcpContextResponse {\n          | ^\n      275 |   readonly vpcId: string;\n      276 |   readonly subnetGroups: cxapi.VpcSubnetGroup[];\n      277 | }\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/vpc.from-lookup.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/launch-template.test.ts: Missing semicolon. (38:9)\n\n      36 |\n      37 | describe('LaunchTemplate', () => {\n    > 38 |   let app: App;\n         |          ^\n      39 |   let stack: Stack;\n      40 |\n      41 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/launch-template.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/security-group.test.ts: Unexpected token, expected \",\" (601:54)\n\n      599 | });\n      600 |\n    > 601 | function testRulesAreInlined(contextDisableInlineRules: boolean | undefined | null, optionsDisableInlineRules: boolean | undefined) {\n          |                                                       ^\n      602 |\n      603 |   describe('When allowAllOutbound', () => {\n      604 |     test('new SecurityGroup will create an inline SecurityGroupEgress rule to allow all traffic', () => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/security-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/machine-image.test.ts: Missing semicolon. (5:7)\n\n      3 | import * as ec2 from '../lib';\n      4 |\n    > 5 | let app: App;\n        |        ^\n      6 | let stack: Stack;\n      7 |\n      8 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/machine-image.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/vpc.test.ts: Unexpected token, expected \",\" (350:30)\n\n      348 |         ],\n      349 |       });\n    > 350 |       (vpc.isolatedSubnets[0] as Subnet).addRoute('TheRoute', {\n          |                               ^\n      351 |         routerId: vpc.internetGatewayId!,\n      352 |         routerType: RouterType.GATEWAY,\n      353 |         destinationCidrBlock: '8.8.8.8/32',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/vpc.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ecs/test/cluster.test.ts: Unexpected token, expected \",\" (1251:43)\n\n      1249 |     });\n      1250 |\n    > 1251 |     expect(cluster.defaultCloudMapNamespace!.type).toEqual(cloudmap.NamespaceType.DNS_PUBLIC);\n           |                                            ^\n      1252 |\n      1253 |\n      1254 |   });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ecs/test/cluster.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/instance.test.ts: Missing semicolon. (24:9)\n\n      22 | } from '../lib';\n      23 |\n    > 24 | let stack: Stack;\n         |          ^\n      25 | let vpc: Vpc;\n      26 | beforeEach(() => {\n      27 |   stack = new Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/instance.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ec2/test/l1.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as cdk from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/l1.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/client-vpn-authorization-rule.test.ts: Missing semicolon. (7:9)\n\n       5 | import { ClientVpnAuthorizationRule } from '../lib/client-vpn-authorization-rule';\n       6 |\n    >  7 | let stack: Stack;\n         |          ^\n       8 | beforeEach(() => {\n       9 |   const app = new App({\n      10 |     context: {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/client-vpn-authorization-rule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-dms/test/dms.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-dms/test/dms.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/client-vpn-endpoint.test.ts: Missing semicolon. (8:9)\n\n       6 | import { ClientVpnUserBasedAuthentication } from '../lib/client-vpn-endpoint';\n       7 |\n    >  8 | let stack: Stack;\n         |          ^\n       9 | let vpc: ec2.IVpc;\n      10 | beforeEach(() => {\n      11 |   stack = new Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/client-vpn-endpoint.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/client-vpn-route.test.ts: Missing semicolon. (12:9)\n\n      10 | } from '../lib';\n      11 |\n    > 12 | let stack: Stack;\n         |          ^\n      13 | let vpc: ec2.IVpc;\n      14 | beforeEach(() => {\n      15 |   const app = new App({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/client-vpn-route.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-dynamodb/test/dynamodb.test.ts: Missing initializer in const declaration. (35:25)\n\n      33 | // DynamoDB table parameters\n      34 | const TABLE_NAME = 'MyTable';\n    > 35 | const TABLE_PARTITION_KEY: Attribute = { name: 'hashKey', type: AttributeType.STRING };\n         |                          ^\n      36 | const TABLE_SORT_KEY: Attribute = { name: 'sortKey', type: AttributeType.NUMBER };\n      37 |\n      38 | // DynamoDB global secondary index parameters\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-dynamodb/test/dynamodb.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-dynamodb-global/test/dynamodb-global.test.ts: Missing initializer in const declaration. (14:25)\n\n      12 | // DynamoDB table parameters\n      13 | const TABLE_NAME = 'GlobalTable';\n    > 14 | const TABLE_PARTITION_KEY: Attribute = { name: 'hashKey', type: AttributeType.STRING };\n         |                          ^\n      15 |\n      16 | const STACK_PROPS: GlobalTableProps = {\n      17 |   partitionKey: TABLE_PARTITION_KEY,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-dynamodb-global/test/dynamodb-global.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ec2/test/bastion-host.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/bastion-host.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/cfn-init-element.test.ts: Missing semicolon. (11:7)\n\n       9 | import { InitPlatform } from '../lib/private/cfn-init-internal';\n      10 |\n    > 11 | let app: App;\n         |        ^\n      12 | let stack: Stack;\n      13 |\n      14 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/cfn-init-element.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/cfn-init.test.ts: Missing semicolon. (13:7)\n\n      11 | import { stringLike } from './util';\n      12 |\n    > 13 | let app: App;\n         |        ^\n      14 | let stack: Stack;\n      15 | let instanceRole: iam.Role;\n      16 | let resource: CfnResource;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/cfn-init.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-dynamodb/test/replica-provider.test.ts: Missing semicolon. (6:17)\n\n      4 | import { isCompleteHandler, onEventHandler } from '../lib/replica-handler';\n      5 |\n    > 6 | let oldConsoleLog: any;\n        |                  ^\n      7 |\n      8 | beforeAll(() => {\n      9 |   oldConsoleLog = global.console.log;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-dynamodb/test/replica-provider.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-docdb/test/endpoint.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Token } from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-docdb/test/endpoint.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-docdb/test/instance.test.ts: Unexpected token, expected \",\" (38:58)\n\n      36 |     [true, true],\n      37 |     [false, false],\n    > 38 |   ])('check that autoMinorVersionUpdate works: %p', (given: boolean | undefined, expected: boolean) => {\n         |                                                           ^\n      39 |     // GIVEN\n      40 |     const stack = testStack();\n      41 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-docdb/test/instance.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-docdb/test/cluster.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-docdb/test/cluster.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-docdb/test/parameter-group.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-docdb/test/parameter-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-dlm/test/dlm.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-dlm/test/dlm.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-directoryservice/test/directoryservice.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-directoryservice/test/directoryservice.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-devopsguru/test/devopsguru.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-devopsguru/test/devopsguru.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-dax/test/dax.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-dax/test/dax.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-datapipeline/test/datapipeline.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-datapipeline/test/datapipeline.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-ec2/test/connections.test.ts: Unexpected token, expected \"{\" (330:27)\n\n      328 | });\n      329 |\n    > 330 | class SomethingConnectable implements IConnectable {\n          |                            ^\n      331 |   constructor(public readonly connections: Connections) {\n      332 |   }\n      333 | }\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ec2/test/connections.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-detective/test/detective.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-detective/test/detective.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-databrew/test/databrew.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-databrew/test/databrew.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/origin.test.ts: Missing semicolon. (4:7)\n\n      2 | import { TestOrigin } from './test-origin';\n      3 |\n    > 4 | let app: App;\n        |        ^\n      5 | let stack: Stack;\n      6 |\n      7 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/origin.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-datasync/test/datasync.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-datasync/test/datasync.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/web-distribution.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/web-distribution.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/response-headers-policy.test.ts: Missing semicolon. (6:9)\n\n      4 |\n      5 | describe('ResponseHeadersPolicy', () => {\n    > 6 |   let app: App;\n        |          ^\n      7 |   let stack: Stack;\n      8 |\n      9 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/response-headers-policy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/origin-groups.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/origin-groups.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/public-key.test.ts: Missing semicolon. (16:9)\n\n      14 |\n      15 | describe('PublicKey', () => {\n    > 16 |   let app: App;\n         |          ^\n      17 |   let stack: Stack;\n      18 |\n      19 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/public-key.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-customerprofiles/test/customerprofiles.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-customerprofiles/test/customerprofiles.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/geo-restriction.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { GeoRestriction } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/geo-restriction.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/oai.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/oai.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/function.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/function.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/key-group.test.ts: Missing semicolon. (26:9)\n\n      24 |\n      25 | describe('KeyGroup', () => {\n    > 26 |   let app: App;\n         |          ^\n      27 |   let stack: Stack;\n      28 |\n      29 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/key-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-connect/test/connect.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-connect/test/connect.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/origin-request-policy.test.ts: Missing semicolon. (6:9)\n\n      4 |\n      5 | describe('OriginRequestPolicy', () => {\n    > 6 |   let app: App;\n        |          ^\n      7 |   let stack: Stack;\n      8 |\n      9 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/origin-request-policy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cur/test/cur.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cur/test/cur.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/cache-policy.test.ts: Missing semicolon. (6:9)\n\n      4 |\n      5 | describe('CachePolicy', () => {\n    > 6 |   let app: App;\n        |          ^\n      7 |   let stack: Stack;\n      8 |\n      9 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/cache-policy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/distribution.test.ts: Missing semicolon. (24:7)\n\n      22 | import { defaultOrigin, defaultOriginGroup } from './test-origin';\n      23 |\n    > 24 | let app: App;\n         |        ^\n      25 | let stack: Stack;\n      26 |\n      27 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront/test/distribution.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-config/test/managed-rules.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-config/test/managed-rules.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-config/test/rule.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-config/test/rule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cognito-identitypool/test/identitypool.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cognito-identitypool/test/identitypool.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-resource-server.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-resource-server.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-attr.test.ts: Missing initializer in const declaration. (10:25)\n\n       8 |     test('default', () => {\n       9 |       // GIVEN\n    > 10 |       const allAttributes: ICustomAttribute[] = [\n         |                          ^\n      11 |         new StringAttribute(),\n      12 |         new NumberAttribute(),\n      13 |         new BooleanAttribute(),\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-attr.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-domain.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-domain.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/manual-approval.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/manual-approval.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-client.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool-client.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codestarconnections/test/codestarconnections.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codestarconnections/test/codestarconnections.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codestar/test/codestar.test.ts: Missing semicolon. (7:11)\n\n       5 |\n       6 | describe('GitHub Repository', () => {\n    >  7 |   let stack: cdk.Stack;\n         |            ^\n       8 |\n       9 |   beforeEach(() => {\n      10 |     const app = new cdk.App();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codestar/test/codestar.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/pipeline.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline-actions/test/pipeline.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/stages.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/stages.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/pipeline.test.ts: Unexpected token, expected \",\" (546:42)\n\n      544 |       });\n      545 |\n    > 546 |       Template.fromStack(stack.nestedStack!).hasResourceProperties(kmsAliasResource, {\n          |                                           ^\n      547 |         AliasName: 'alias/codepipeline-actual-stack-name-nestedpipelinestack-actualpipeline-23a98110',\n      548 |       });\n      549 |     });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/pipeline.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/variables.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/variables.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codestarnotifications/test/notification-rule.test.ts: Missing semicolon. (13:11)\n\n      11 |\n      12 | describe('NotificationRule', () => {\n    > 13 |   let stack: cdk.Stack;\n         |            ^\n      14 |\n      15 |   beforeEach(() => {\n      16 |     stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codestarnotifications/test/notification-rule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/notification-rule.test.ts: Missing semicolon. (8:11)\n\n       6 |\n       7 | describe('pipeline with codestar notification integration', () => {\n    >  8 |   let stack: cdk.Stack;\n         |            ^\n       9 |   let pipeline: codepipeline.Pipeline;\n      10 |   let sourceArtifact: codepipeline.Artifact;\n      11 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/notification-rule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/cross-env.test.ts: Unexpected token, expected \",\" (15:52)\n\n      13 |   ['modern', false],\n      14 |   ['modern', true],\n    > 15 | ])('with %s synthesis, in Stage=%p', (synthesisStyle: string, inStage: boolean) => {\n         |                                                     ^\n      16 |   let app: App;\n      17 |   let stackScope: Construct;\n      18 |   let stack: Stack;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/cross-env.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/artifacts.test.ts: Unexpected token, expected \",\" (268:27)\n\n      266 |\n      267 | /* eslint-disable @aws-cdk/no-core-construct */\n    > 268 | function validate(construct: IConstruct): string[] {\n          |                            ^\n      269 |   try {\n      270 |     (construct.node.root as cdk.App).synth();\n      271 |     return [];\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/artifacts.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/general-validation.test.ts: Unexpected reserved word 'interface'. (8:0)\n\n       6 | import { FakeSourceAction } from './fake-source-action';\n       7 |\n    >  8 | interface NameValidationTestCase {\n         | ^\n       9 |   name: string;\n      10 |   shouldPassValidation: boolean;\n      11 |   explanation: string;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/general-validation.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool.test.ts: Unexpected token, expected \",\" (1886:26)\n\n      1884 | });\n      1885 |\n    > 1886 | function fooFunction(scope: Construct, name: string): lambda.IFunction {\n           |                           ^\n      1887 |   return new lambda.Function(scope, name, {\n      1888 |     functionName: name,\n      1889 |     code: lambda.Code.fromInline('foo'),\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cognito/test/user-pool.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codebuild/test/untrusted-code-boundary.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codebuild/test/untrusted-code-boundary.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codegurureviewer/test/codegurureviewer.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codegurureviewer/test/codegurureviewer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/action.test.ts: Missing initializer in const declaration. (243:16)\n\n      241 |\n      242 |     const action = new FakeBuildAction({ actionName: 'FakeAction', input: sourceOutput });\n    > 243 |     const stage2: codepipeline.StageProps = {\n          |                 ^\n      244 |       stageName: 'Stage2',\n      245 |       actions: [action],\n      246 |     };\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codepipeline/test/action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codebuild/test/linux-arm-build-image.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codebuild/test/linux-arm-build-image.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codeguruprofiler/test/profiling-group.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codeguruprofiler/test/profiling-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codebuild/test/notification-rule.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codebuild/test/notification-rule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codebuild/test/linux-gpu-build-image.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codebuild/test/linux-gpu-build-image.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codebuild/test/report-group.test.ts: Unexpected token, expected \",\" (172:48)\n\n      170 |     [ReportGroupType.CODE_COVERAGE, 'codebuild:BatchPutCodeCoverages'],\n      171 |     [ReportGroupType.TEST, 'codebuild:BatchPutTestCases'],\n    > 172 |   ])('has correct policy when type is %s', (type: ReportGroupType, policyStatement: string) => {\n          |                                                 ^\n      173 |     const stack = new cdk.Stack();\n      174 |\n      175 |     const reportGroup = new codebuild.ReportGroup(stack, 'ReportGroup', {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codebuild/test/report-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codebuild/test/build-spec.test.ts: Unexpected token, expected \",\" (28:19)\n\n      26 |     const merged = codebuild.mergeBuildSpecs(lhs, rhs);\n      27 |\n    > 28 |     expect((merged as any).spec).toEqual({\n         |                    ^\n      29 |       phases: {\n      30 |         pre_build: {\n      31 |           commands: [\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codebuild/test/build-spec.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codebuild/test/project.test.ts: Unexpected token, expected \",\" (489:71)\n\n      487 |\n      488 |   // Check that the CodeBuild project does not have a DependsOn\n    > 489 |   Template.fromStack(stack).hasResource('AWS::CodeBuild::Project', (res: any) => {\n          |                                                                        ^\n      490 |     if (res.DependsOn && res.DependsOn.length > 0) {\n      491 |       throw new Error(`CodeBuild project should have no DependsOn, but got: ${JSON.stringify(res, undefined, 2)}`);\n      492 |     }\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codebuild/test/project.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codecommit/test/notification-rule.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codecommit/test/notification-rule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codecommit/test/codecommit.test.ts: Missing initializer in const declaration. (14:17)\n\n      12 |       const stack = new Stack();\n      13 |\n    > 14 |       const props: RepositoryProps = {\n         |                  ^\n      15 |         repositoryName: 'MyRepository',\n      16 |       };\n      17 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codecommit/test/codecommit.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-codeartifact/test/codeartifact.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codeartifact/test/codeartifact.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cloudwatch-actions/test/ssm.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch-actions/test/ssm.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cloudwatch-actions/test/sns.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch-actions/test/sns.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cloudwatch-actions/test/ec2.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch-actions/test/ec2.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-codebuild/test/codebuild.test.ts: Unexpected token, expected \",\" (1588:32)\n\n      1586 |\n      1587 |   const metricBuilds = project.metricBuilds();\n    > 1588 |   expect(metricBuilds.dimensions!.ProjectName).toEqual(project.projectName);\n           |                                 ^\n      1589 |   expect(metricBuilds.namespace).toEqual('AWS/CodeBuild');\n      1590 |   expect(metricBuilds.statistic).toEqual('Sum');\n      1591 |   expect(metricBuilds.metricName).toEqual('Builds');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-codebuild/test/codebuild.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cloudwatch-actions/test/scaling.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch-actions/test/scaling.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/metrics.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/metrics.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cloudwatch-actions/test/appscaling.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch-actions/test/appscaling.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/metric-math.test.ts: Missing semicolon. (10:9)\n\n       8 | const b99 = new Metric({ namespace: 'Test', metricName: 'BCount', statistic: 'p99' });\n       9 |\n    > 10 | let stack: Stack;\n         |          ^\n      11 | describe('Metric Math', () => {\n      12 |   beforeEach(() => {\n      13 |     stack = new Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/metric-math.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/layout.test.ts: Unexpected token, expected \",\" (62:32)\n\n      60 |       expect(5).toEqual(row.height);\n      61 |\n    > 62 |       function assertWidgetPos(x: number, y: number, w: IWidget) {\n         |                                 ^\n      63 |         const json = w.toJson()[0];\n      64 |         expect(x).toEqual(json.x);\n      65 |         expect(y).toEqual(json.y);\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/layout.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/alarm.test.ts: Missing initializer in const declaration. (15:22)\n\n      13 |     const stack = new Stack();\n      14 |\n    > 15 |     const usingMetrics: Record<string, IMetric> = {};\n         |                       ^\n      16 |\n      17 |     for (const i of [...Array(15).keys()]) {\n      18 |       const metricName = `metric${i}`;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/alarm.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/composite-alarm.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/composite-alarm.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/cross-environment.test.ts: Missing semicolon. (7:10)\n\n       5 | const a = new Metric({ namespace: 'Test', metricName: 'ACount' });\n       6 |\n    >  7 | let stack1: Stack;\n         |           ^\n       8 | let stack2: Stack;\n       9 | let stack3: Stack;\n      10 | let stack4: Stack;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/cross-environment.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/alarm-status-widget.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Stack } from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/alarm-status-widget.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront-origins/test/s3-origin.test.ts: Missing semicolon. (7:7)\n\n       5 | import { S3Origin } from '../lib';\n       6 |\n    >  7 | let app: App;\n         |        ^\n       8 | let stack: Stack;\n       9 |\n      10 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront-origins/test/s3-origin.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/dashboard.test.ts: Unexpected token, expected \",\" (201:25)\n\n      199 |  * Returns a property predicate that checks that the given Dashboard has the indicated widgets\n      200 |  */\n    > 201 | function hasWidgets(props: any, widgets: any[]) {\n          |                          ^\n      202 |   let actualWidgets: any[] = [];\n      203 |   try {\n      204 |     actualWidgets = JSON.parse(props.DashboardBody).widgets;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/dashboard.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudformation/test/resource.test.ts: Unexpected token, expected \",\" (23:54)\n\n      21 |     // THEN\n      22 |     Template.fromStack(stack).hasResource('AWS::CloudFormation::CustomResource', {});\n    > 23 |     expect(app.synth().tryGetArtifact(stack.stackName)!.findMetadataByType('aws:cdk:protected').length).toEqual(0);\n         |                                                       ^\n      24 |   });\n      25 |\n      26 |   test('.Destroy', () => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudformation/test/resource.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/graphs.test.ts: Unexpected token (702:13)\n\n      700 |   test('allows overriding custom values of dashboard widgets', () => {\n      701 |     class HiddenMetric extends Metric {\n    > 702 |       public toMetricConfig() {\n          |              ^\n      703 |         const ret = super.toMetricConfig();\n      704 |         // @ts-ignore\n      705 |         ret.renderingProperties.visible = false;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudwatch/test/graphs.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudtrail/test/cloudtrail.test.ts: Unexpected token, expected \"{\" (92:23)\n\n      90 | const logsRoleName = 'MyAmazingCloudTrailLogsRoleF2CCF977';\n      91 |\n    > 92 | function getTestStack(): Stack {\n         |                        ^\n      93 |   return new Stack(undefined, 'TestStack', { env: { account: '123456789012', region: 'us-east-1' } });\n      94 | }\n      95 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudtrail/test/cloudtrail.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront-origins/test/origin-group.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as origins from '../lib';\n       6 |\n    >  7 | let stack: Stack;\n         |          ^\n       8 | let bucket: s3.IBucket;\n       9 | let primaryOrigin: cloudfront.IOrigin;\n      10 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront-origins/test/origin-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront-origins/test/rest-api-origin.test.ts: Missing semicolon. (5:9)\n\n      3 | import { RestApiOrigin } from '../lib';\n      4 |\n    > 5 | let stack: Stack;\n        |          ^\n      6 |\n      7 | beforeEach(() => {\n      8 |   stack = new Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront-origins/test/rest-api-origin.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudformation/test/nested-stack.test.ts: Unexpected token, expected \",\" (18:43)\n\n      16 |   test('fails if defined as a root', () => {\n      17 |     // THEN\n    > 18 |     expect(() => new NestedStack(undefined as any, 'boom')).toThrow(/Nested stacks cannot be defined as a root construct/);\n         |                                            ^\n      19 |   });\n      20 |\n      21 |   test('fails if defined without a parent stack', () => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudformation/test/nested-stack.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront-origins/test/http-origin.test.ts: Missing semicolon. (5:7)\n\n      3 | import { HttpOrigin } from '../lib';\n      4 |\n    > 5 | let app: App;\n        |        ^\n      6 | let stack: Stack;\n      7 |\n      8 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront-origins/test/http-origin.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloud9/test/cloud9.environment.test.ts: Missing semicolon. (8:9)\n\n       6 | import { ConnectionType, ImageId } from '../lib';\n       7 |\n    >  8 | let stack: cdk.Stack;\n         |          ^\n       9 | let vpc: ec2.IVpc;\n      10 |\n      11 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloud9/test/cloud9.environment.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudfront-origins/test/load-balancer-origin.test.ts: Missing semicolon. (6:7)\n\n      4 | import { LoadBalancerV2Origin } from '../lib';\n      5 |\n    > 6 | let app: App;\n        |        ^\n      7 | let stack: Stack;\n      8 |\n      9 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudfront-origins/test/load-balancer-origin.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-certificatemanager/test/util.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { PublicHostedZone } from '@aws-cdk/aws-route53';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-certificatemanager/test/util.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-chatbot/test/slack-channel-configuration.test.ts: Missing semicolon. (10:11)\n\n       8 |\n       9 | describe('SlackChannelConfiguration', () => {\n    > 10 |   let stack: cdk.Stack;\n         |            ^\n      11 |\n      12 |   beforeEach(() => {\n      13 |     stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-chatbot/test/slack-channel-configuration.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-cloudformation/test/deps.test.ts: Unexpected token, expected \",\" (75:59)\n\n      73 |     // THEN: resource in parent needs to depend on the nested stack\n      74 |     Template.fromStack(parent).hasResource('PARENT', {\n    > 75 |       DependsOn: [parent.resolve(nested.nestedStackResource!.logicalId)],\n         |                                                            ^\n      76 |     });\n      77 |   }));\n      78 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cloudformation/test/deps.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-certificatemanager/test/dns-validated-certificate.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-certificatemanager/test/dns-validated-certificate.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-ce/test/ce.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-ce/test/ce.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-cassandra/test/cassandra.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-cassandra/test/cassandra.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-certificatemanager/test/private-certificate.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-certificatemanager/test/private-certificate.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-batch/test/job-definition.test.ts: Missing semicolon. (14:11)\n\n      12 |\n      13 | describe('Batch Job Definition', () => {\n    > 14 |   let stack: cdk.Stack;\n         |            ^\n      15 |   let jobDefProps: batch.JobDefinitionProps;\n      16 |\n      17 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-batch/test/job-definition.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-budgets/test/budgets.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-budgets/test/budgets.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-backup/test/vault.test.ts: Missing semicolon. (8:9)\n\n       6 | import { BackupVault, BackupVaultEvents } from '../lib';\n       7 |\n    >  8 | let stack: Stack;\n         |          ^\n       9 | beforeEach(() => {\n      10 |   stack = new Stack();\n      11 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-backup/test/vault.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-batch/test/job-queue.test.ts: Missing semicolon. (6:11)\n\n      4 |\n      5 | describe('Batch Job Queue', () => {\n    > 6 |   let stack: cdk.Stack;\n        |            ^\n      7 |   let computeEnvironment: batch.ComputeEnvironment;\n      8 |\n      9 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-batch/test/job-queue.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-billingconductor/test/billingconductor.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-billingconductor/test/billingconductor.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-certificatemanager/test/certificate.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-certificatemanager/test/certificate.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-batch/test/compute-environment.test.ts: Missing semicolon. (10:40)\n\n       8 |\n       9 | describe('Batch Compute Environment', () => {\n    > 10 |   let expectedManagedDefaultComputeProps: any;\n         |                                         ^\n      11 |   let defaultServiceRole: any;\n      12 |\n      13 |   let stack: cdk.Stack;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-batch/test/compute-environment.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-backup/test/selection.test.ts: Missing semicolon. (10:9)\n\n       8 | import { BackupPlan, BackupResource, BackupSelection } from '../lib';\n       9 |\n    > 10 | let stack: Stack;\n         |          ^\n      11 | let plan: BackupPlan;\n      12 | beforeEach(() => {\n      13 |   stack = new Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-backup/test/selection.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-autoscalingplans/test/autoscalingplans.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-autoscalingplans/test/autoscalingplans.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-backup/test/plan.test.ts: Missing semicolon. (6:9)\n\n      4 | import { BackupPlan, BackupPlanRule, BackupVault } from '../lib';\n      5 |\n    > 6 | let stack: Stack;\n        |          ^\n      7 | beforeEach(() => {\n      8 |   stack = new Stack();\n      9 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-backup/test/plan.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/warm-pool.test.ts: Unexpected token, expected \",\" (77:21)\n\n      75 | });\n      76 |\n    > 77 | function newASG(stack: cdk.Stack) {\n         |                      ^\n      78 |   const vpc = new ec2.Vpc(stack, 'VPC');\n      79 |\n      80 |   return new autoscaling.AutoScalingGroup(stack, 'ASG', {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/warm-pool.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/scaling.test.ts: Unexpected token (331:9)\n\n      329 |\n      330 | class ASGFixture extends Construct {\n    > 331 |   public readonly vpc: ec2.Vpc;\n          |          ^\n      332 |   public readonly asg: autoscaling.AutoScalingGroup;\n      333 |\n      334 |   constructor(scope: Construct, id: string) {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/scaling.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-autoscaling-hooktargets/test/hooks.test.ts: Missing semicolon. (14:11)\n\n      12 |\n      13 | describe('given an AutoScalingGroup and no role', () => {\n    > 14 |   let stack: Stack;\n         |            ^\n      15 |   let asg: autoscaling.AutoScalingGroup;\n      16 |\n      17 |   beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-autoscaling-hooktargets/test/hooks.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-autoscaling-common/test/intervals.test.ts: Unexpected token, expected \"]\" (95:55)\n\n      93 |         fc.pre(alarms.lowerAlarmIntervalIndex !== undefined);\n      94 |\n    > 95 |         return intervals[alarms.lowerAlarmIntervalIndex!].upper !== Infinity;\n         |                                                        ^\n      96 |       },\n      97 |     ));\n      98 |   });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-autoscaling-common/test/intervals.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/lifecyclehooks.test.ts: Unexpected token, expected \"{\" (163:29)\n\n      161 | });\n      162 |\n    > 163 | class FakeNotificationTarget implements autoscaling.ILifecycleHookTarget {\n          |                              ^\n      164 |   private createRole(scope: constructs.Construct, _role?: iam.IRole) {\n      165 |     let role = _role;\n      166 |     if (!role) {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/lifecyclehooks.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/cron.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as autoscaling from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/cron.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-auditmanager/test/auditmanager.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-auditmanager/test/auditmanager.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-athena/test/athena.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-athena/test/athena.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync.test.ts: Missing semicolon. (9:9)\n\n       7 | import * as appsync from '../lib';\n       8 |\n    >  9 | let stack: cdk.Stack;\n         |          ^\n      10 | let api: appsync.GraphqlApi;\n      11 | beforeEach(() => {\n      12 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-aps/test/aps.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-aps/test/aps.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/scheduled-action.test.ts: Unexpected token, expected \",\" (159:35)\n\n      157 | });\n      158 |\n    > 159 | function makeAutoScalingGroup(scope: constructs.Construct) {\n          |                                    ^\n      160 |   const vpc = new ec2.Vpc(scope, 'VPC');\n      161 |   return new autoscaling.AutoScalingGroup(scope, 'ASG', {\n      162 |     vpc,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/scheduled-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/cfn-init.test.ts: Unexpected reserved word 'interface'. (6:0)\n\n      4 | import * as autoscaling from '../lib';\n      5 |\n    > 6 | interface BaseProps {\n        | ^\n      7 |   vpc: ec2.Vpc;\n      8 |   machineImage: ec2.IMachineImage;\n      9 |   instanceType: ec2.InstanceType;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/cfn-init.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-union-types.test.ts: Missing semicolon. (13:9)\n\n      11 |   definition: { test2: t.string },\n      12 | });\n    > 13 | let stack: cdk.Stack;\n         |          ^\n      14 | let api: appsync.GraphqlApi;\n      15 | beforeEach(() => {\n      16 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-union-types.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/auto-scaling-group.test.ts: Unexpected token, expected \",\" (1771:22)\n\n      1769 | });\n      1770 |\n    > 1771 | function mockVpc(stack: cdk.Stack) {\n           |                       ^\n      1772 |   return ec2.Vpc.fromVpcAttributes(stack, 'MyVpc', {\n      1773 |     vpcId: 'my-vpc',\n      1774 |     availabilityZones: ['az1'],\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-autoscaling/test/auto-scaling-group.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-rds.test.ts: Missing semicolon. (9:9)\n\n       7 |\n       8 | // GLOBAL GIVEN\n    >  9 | let stack: cdk.Stack;\n         |          ^\n      10 | let api: appsync.GraphqlApi;\n      11 | beforeEach(() => {\n      12 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-rds.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-schema.test.ts: Missing semicolon. (29:9)\n\n      27 | });\n      28 |\n    > 29 | let stack: cdk.Stack;\n         |          ^\n      30 | beforeEach(() => {\n      31 |   // GIVEN\n      32 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-schema.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-scalar-type.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as t from './scalar-type-defintions';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let api: appsync.GraphqlApi;\n      8 | beforeEach(() => {\n      9 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-scalar-type.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-none.test.ts: Missing semicolon. (7:9)\n\n       5 |\n       6 | // GLOBAL GIVEN\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 | let api: appsync.GraphqlApi;\n       9 | beforeEach(() => {\n      10 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-none.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-object-type.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as t from './scalar-type-defintions';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let api: appsync.GraphqlApi;\n      8 | beforeEach(() => {\n      9 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-object-type.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-opensearch.test.ts: Missing semicolon. (8:9)\n\n       6 |\n       7 | // GLOBAL GIVEN\n    >  8 | let stack: cdk.Stack;\n         |          ^\n       9 | let api: appsync.GraphqlApi;\n      10 | let domain: opensearch.Domain;\n      11 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-opensearch.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-mapping-template.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as appsync from '../lib';\n       6 |\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 | let api: appsync.GraphqlApi;\n       9 |\n      10 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-mapping-template.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-grant.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as appsync from '../lib';\n       6 |\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 | let role: iam.Role;\n       9 | let api: appsync.GraphqlApi;\n      10 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-grant.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-interface-type.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as t from './scalar-type-defintions';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | let api: appsync.GraphqlApi;\n      8 | beforeEach(() => {\n      9 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-interface-type.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-http.test.ts: Missing semicolon. (8:9)\n\n       6 |\n       7 | // GLOBAL GIVEN\n    >  8 | let stack: cdk.Stack;\n         |          ^\n       9 | let api: appsync.GraphqlApi;\n      10 | let endpoint: string;\n      11 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-http.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-dynamodb.test.ts: Unexpected token, expected \",\" (8:19)\n\n       6 | import { KeyCondition } from '../lib';\n       7 |\n    >  8 | function joined(str: string): string {\n         |                    ^\n       9 |   return str.replace(/\\s+/g, '');\n      10 | }\n      11 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-dynamodb.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-enum-type.test.ts: Missing semicolon. (7:9)\n\n       5 |\n       6 | const out = 'enum Test {\\n  test1\\n  test2\\n  test3\\n}\\n';\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 | let api: appsync.GraphqlApi;\n       9 | beforeEach(() => {\n      10 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-enum-type.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-lambda.test.ts: Missing semicolon. (8:9)\n\n       6 |\n       7 | // GLOBAL GIVEN\n    >  8 | let stack: cdk.Stack;\n         |          ^\n       9 | let api: appsync.GraphqlApi;\n      10 | beforeEach(() => {\n      11 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-lambda.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-domain.test.ts: Missing semicolon. (9:9)\n\n       7 |\n       8 | // GLOBAL GIVEN\n    >  9 | let stack: cdk.Stack;\n         |          ^\n      10 | let certificate: acm.Certificate;\n      11 |\n      12 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-domain.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-code-first.test.ts: Missing semicolon. (6:9)\n\n      4 | import * as t from './scalar-type-defintions';\n      5 |\n    > 6 | let stack: cdk.Stack;\n        |          ^\n      7 | beforeEach(() => {\n      8 |   // GIVEN\n      9 |   stack = new cdk.Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-code-first.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-auth.test.ts: Missing semicolon. (9:9)\n\n       7 |\n       8 | // GIVEN\n    >  9 | let stack: cdk.Stack;\n         |          ^\n      10 | beforeEach(() => {\n      11 |   stack = new cdk.Stack();\n      12 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-auth.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-elasticsearch.test.ts: Missing semicolon. (9:9)\n\n       7 |\n       8 | // GLOBAL GIVEN\n    >  9 | let stack: cdk.Stack;\n         |          ^\n      10 | let api: appsync.GraphqlApi;\n      11 | let domain: es.Domain;\n      12 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-elasticsearch.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-input-types.test.ts: Missing semicolon. (7:9)\n\n       5 |\n       6 | const out = 'input Test {\\n  test: String\\n}\\n';\n    >  7 | let stack: cdk.Stack;\n         |          ^\n       8 | let api: appsync.GraphqlApi;\n       9 | beforeEach(() => {\n      10 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-input-types.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-directives.test.ts: Unexpected token, expected \",\" (14:33)\n\n      12 | const custom = [appsync.Directive.custom('custom')];\n      13 |\n    > 14 | const generateField = (directives: appsync.Directive[]): appsync.Field => {\n         |                                  ^\n      15 |   return new appsync.Field({\n      16 |     returnType: t.string,\n      17 |     directives,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-directives.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-appstream/test/appstream.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appstream/test/appstream.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-caching-config.test.ts: Missing semicolon. (8:9)\n\n       6 | import * as appsync from '../lib';\n       7 |\n    >  8 | let stack: cdk.Stack;\n         |          ^\n       9 | let api: appsync.GraphqlApi;\n      10 |\n      11 | beforeEach(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appsync/test/appsync-caching-config.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-appmesh/test/virtual-node.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appmesh/test/virtual-node.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-appmesh/test/route.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appmesh/test/route.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apprunner/test/service.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apprunner/test/service.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apprunner/test/vpc-connector.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apprunner/test/vpc-connector.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-appmesh/test/gateway-route.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appmesh/test/gateway-route.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-appmesh/test/virtual-router.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appmesh/test/virtual-router.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-appmesh/test/virtual-service.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appmesh/test/virtual-service.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-appmesh/test/virtual-gateway.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appmesh/test/virtual-gateway.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appmesh/test/health-check.test.ts: Unexpected token, expected \",\" (5:22)\n\n      3 |\n      4 | let idCounter = 0;\n    > 5 | const getNode = (stack: cdk.Stack) => {\n        |                       ^\n      6 |   const mesh = new appmesh.Mesh(stack, `mesh-${++idCounter}`, {\n      7 |     meshName: 'test-mesh',\n      8 |   });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appmesh/test/health-check.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-appmesh/test/mesh.test.ts: Missing initializer in const declaration. (149:27)\n\n      147 |     const service = namespace.createService('Svc');\n      148 |\n    > 149 |     const instanceAttribute : { [key: string]: string} = {};\n          |                            ^\n      150 |     instanceAttribute.testKey = 'testValue';\n      151 |\n      152 |     // WHEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appmesh/test/mesh.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-applicationinsights/test/applicationinsights.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-applicationinsights/test/applicationinsights.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-applicationautoscaling/test/scalable-target.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Annotations, Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-applicationautoscaling/test/scalable-target.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-applicationautoscaling/test/schedule.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Duration, Stack, Lazy } from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-applicationautoscaling/test/schedule.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-applicationautoscaling/test/step-scaling-policy.test.ts: Missing semicolon. (37:46)\n\n      35 |\n      36 |         return reportFalse(steps.every(step => {\n    > 37 |           return step.MetricIntervalLowerBound! < step.MetricIntervalUpperBound!;\n         |                                               ^\n      38 |         }), steps, 'template', JSON.stringify(template, undefined, 2));\n      39 |       },\n      40 |     ));\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-applicationautoscaling/test/step-scaling-policy.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-appflow/test/appflow.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appflow/test/appflow.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/vpc-link.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/vpc-link.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/stepfunctions-api.test.ts: Missing initializer in const declaration. (164:17)\n\n      162 |     const { stack, stateMachine } = givenSetup();\n      163 |\n    > 164 |     const httpURL: string = 'https://foo/bar';\n          |                  ^\n      165 |\n      166 |     //WHEN & THEN\n      167 |     expect(() => new apigw.StepFunctionsRestApi(stack, 'StepFunctionsRestApi', {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/stepfunctions-api.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-appconfig/test/appconfig.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appconfig/test/appconfig.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/stage.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/stage.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-applicationautoscaling/test/target-tracking.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-applicationautoscaling/test/target-tracking.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-appintegrations/test/appintegrations.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-appintegrations/test/appintegrations.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/util.test.ts: Missing initializer in const declaration. (61:18)\n\n      59 |   describe('JsonSchemaMapper.toCfnJsonSchema', () => {\n      60 |     test('maps \"ref\" found under properties', () => {\n    > 61 |       const schema: JsonSchema = {\n         |                   ^\n      62 |         type: JsonSchemaType.OBJECT,\n      63 |         properties: {\n      64 |           collection: {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/util.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/restapi.test.ts: Unexpected token, expected \",\" (732:74)\n\n      730 |     // THEN\n      731 |     Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Model', {\n    > 732 |       RestApiId: { Ref: stack.getLogicalId(api.node.findChild('Resource') as CfnElement) },\n          |                                                                           ^\n      733 |       Schema: {\n      734 |         $schema: 'http://json-schema.org/draft-04/schema#',\n      735 |         title: 'test',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/restapi.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/model.test.ts: Unexpected token, expected \",\" (28:74)\n\n      26 |     // THEN\n      27 |     Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::Model', {\n    > 28 |       RestApiId: { Ref: stack.getLogicalId(api.node.findChild('Resource') as cdk.CfnElement) },\n         |                                                                           ^\n      29 |       Schema: {\n      30 |         $schema: 'http://json-schema.org/draft-04/schema#',\n      31 |         title: 'test',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/model.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/usage-plan.test.ts: Missing initializer in const declaration. (34:16)\n\n      32 |     const stack = new cdk.Stack();\n      33 |     const api = new apigateway.RestApi(stack, 'my-api', { cloudWatchRole: false, deploy: true, deployOptions: { stageName: 'test' } });\n    > 34 |     const method: apigateway.Method = api.root.addMethod('GET'); // Need at least one method on the api\n         |                 ^\n      35 |     const usagePlanName = 'Basic';\n      36 |     const usagePlanDescription = 'Basic Usage Plan with integer throttling limits';\n      37 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/usage-plan.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/resource.test.ts: Unexpected token, expected \",\" (396:21)\n\n      394 |         const parent = api.root.getResource('boom');\n      395 |         expect(parent).toBeDefined();\n    > 396 |         expect(parent!.path).toEqual('/boom');\n          |                      ^\n      397 |\n      398 |         expect(trach.parentResource).toBe(parent);\n      399 |         expect(trach.parentResource!.path).toEqual('/boom');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/resource.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/method.test.ts: Missing initializer in const declaration. (8:22)\n\n       6 | import * as apigw from '../lib';\n       7 |\n    >  8 | const DUMMY_AUTHORIZER: apigw.IAuthorizer = {\n         |                       ^\n       9 |   authorizerId: 'dummyauthorizer',\n      10 |   authorizationType: apigw.AuthorizationType.CUSTOM,\n      11 | };\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/method.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/lambda-api.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/lambda-api.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/deployment.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/deployment.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/domains.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/domains.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/requestvalidator.test.ts: Unexpected token, expected \",\" (24:74)\n\n      22 |     // THEN\n      23 |     Template.fromStack(stack).hasResourceProperties('AWS::ApiGateway::RequestValidator', {\n    > 24 |       RestApiId: { Ref: stack.getLogicalId(api.node.findChild('Resource') as cdk.CfnElement) },\n         |                                                                           ^\n      25 |       ValidateRequestBody: true,\n      26 |       ValidateRequestParameters: false,\n      27 |     });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/requestvalidator.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/gateway-response.test.ts: Missing semicolon. (101:55)\n\n       99 |       deploy: true,\n      100 |     });\n    > 101 |     const deploymentResource = restApi.latestDeployment!.node.defaultChild;\n          |                                                        ^\n      102 |     const logicalId = (deploymentResource as any).calculateLogicalId();\n      103 |\n      104 |     // WHEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/gateway-response.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/cors.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/cors.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/http.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/http.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/integration.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/integration.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/base-path-mapping.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/base-path-mapping.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/api-key.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Match, Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/api-key.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/authorizer.test.ts: Unexpected token (7:13)\n\n       5 |   test('isAuthorizer correctly detects an instance of type Authorizer', () => {\n       6 |     class MyAuthorizer extends Authorizer {\n    >  7 |       public readonly authorizerId = 'test-authorizer-id';\n         |              ^\n       8 |       public _attachToApi(_: IRestApi): void {\n       9 |         // do nothing\n      10 |       }\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/authorizer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/access-log.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as apigateway from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/access-log.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-amplify/test/domain.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Template } from '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-amplify/test/domain.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-amplify/test/app.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as amplify from '../lib';\n       6 |\n    >  7 | let stack: Stack;\n         |          ^\n       8 | beforeEach(() => {\n       9 |   stack = new Stack();\n      10 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-amplify/test/app.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-amplifyuibuilder/test/amplifyuibuilder.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-amplifyuibuilder/test/amplifyuibuilder.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-amazonmq/test/amazonmq.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-amazonmq/test/amazonmq.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/assets/test/staging.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as fs from 'fs';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/assets/test/staging.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-apigateway/test/api-definition.test.ts: Unexpected token, expected \",\" (40:44)\n\n      38 |       expect(config.inlineDefinition).toBeUndefined();\n      39 |       expect(config.s3Location).toBeDefined();\n    > 40 |       expect(stack.resolve(config.s3Location!.bucket)).toEqual({\n         |                                             ^\n      41 |         Ref: 'AssetParameters68497ac876de4e963fc8f7b5f1b28844c18ecc95e3f7c6e9e0bf250e03c037fbS3Bucket42039E29',\n      42 |       });\n      43 |     });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-apigateway/test/api-definition.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-accessanalyzer/test/accessanalyzer.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-accessanalyzer/test/accessanalyzer.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/assets/test/compat.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { SymlinkFollowMode } from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/assets/test/compat.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/assertions/test/template.test.ts: Unexpected token, expected \",\" (95:40)\n\n      93 |   describe('fromStack', () => {\n      94 |     test('fails when root is not a stage', () => {\n    > 95 |       const c = new Construct(undefined as any, '');\n         |                                         ^\n      96 |       const stack = new Stack(c, 'MyStack');\n      97 |       expect(() => Template.fromStack(stack)).toThrow(/must be part of a Stage or an App/);\n      98 |     });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/@aws-cdk/assertions/test/template.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/aws-acmpca/test/acmpca.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-acmpca/test/acmpca.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/aws-amplify/test/branch.test.ts: Missing semicolon. (7:9)\n\n       5 | import * as amplify from '../lib';\n       6 |\n    >  7 | let stack: Stack;\n         |          ^\n       8 | let app: amplify.App;\n       9 | beforeEach(() => {\n      10 |   stack = new Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/aws-amplify/test/branch.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/assertions/test/capture.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Capture, Match } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/assertions/test/capture.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/assert-internal/test/match-template.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { MatchStyle } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/assert-internal/test/match-template.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/assertions/test/match.test.ts: Missing semicolon. (5:15)\n\n      3 | describe('Matchers', () => {\n      4 |   describe('exactly()', () => {\n    > 5 |     let matcher: Matcher;\n        |                ^\n      6 |\n      7 |     test('simple literals', () => {\n      8 |       matcher = Match.exact('foo');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/assertions/test/match.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/assert-internal/test/synth-utils.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { App, Stack } from '@aws-cdk/core';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/assert-internal/test/synth-utils.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/assertions/test/annotations.test.ts: Missing semicolon. (6:11)\n\n      4 |\n      5 | describe('Messages', () => {\n    > 6 |   let stack: Stack;\n        |            ^\n      7 |   let annotations: _Annotations;\n      8 |   beforeAll(() => {\n      9 |     stack = new Stack();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/assertions/test/annotations.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/assert-internal/test/have-output.test.ts: Missing semicolon. (6:20)\n\n      4 | import '../jest';\n      5 |\n    > 6 | let templateFilePath: string;\n        |                     ^\n      7 | let synthStack: cxapi.CloudFormationStackArtifact;\n      8 | let noOutputStack: cxapi.CloudFormationStackArtifact;\n      9 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/assert-internal/test/have-output.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/assert-internal/test/have-resource.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { ABSENT, arrayWith, exactValue, expect as cdkExpect, haveResource, haveResourceLike, Capture, anything, stringLike } from '../lib/index';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/assert-internal/test/have-resource.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/tools/@aws-cdk/yarn-cling/test/hoisting.test.ts: Missing semicolon. (4:4)\n\n      2 | import { PackageLockPackage } from '../lib/types';\n      3 |\n    > 4 | type DependencyTree = PackageLockPackage;\n        |     ^\n      5 |\n      6 | test('nonconflicting tree gets flattened', () => {\n      7 |   // GIVEN\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/tools/@aws-cdk/yarn-cling/test/hoisting.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/assert-internal/test/canonicalize-assets.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { canonicalizeTemplate } from '../lib';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/assert-internal/test/canonicalize-assets.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/tools/@aws-cdk/yarn-cling/test/cling.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/tools/@aws-cdk/yarn-cling/test/cling.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@aws-cdk/alexa-ask/test/ask.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import '@aws-cdk/assertions';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@aws-cdk/alexa-ask/test/ask.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/assert-internal/test/assertions.test.ts: Unexpected token, expected \",\" (310:29)\n\n      308 | });\n      309 |\n    > 310 | function passingExample(title: string, cb: () => void) {\n          |                              ^\n      311 |   describe('passing', () => {\n      312 |     test(title, cb);\n      313 |   });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/assert-internal/test/assertions.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/tools/@aws-cdk/prlint/test/lint.test.ts: Unexpected token, expected \",\" (210:28)\n\n      208 | });\n      209 |\n    > 210 | function configureMock(issue: any, prFiles: any[] | undefined) {\n          |                             ^\n      211 |   GitHub.mockImplementation(() => {\n      212 |     return {\n      213 |       getIssues: () => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/tools/@aws-cdk/prlint/test/lint.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/@aws-cdk/app-delivery/test/pipeline-deploy-stack-action.test.ts: Unexpected reserved word 'interface'. (16:0)\n\n      14 | import { PipelineDeployStackAction } from '../lib/pipeline-deploy-stack-action';\n      15 |\n    > 16 | interface SelfUpdatingPipeline {\n         | ^\n      17 |   synthesizedApp: codepipeline.Artifact;\n      18 |   pipeline: codepipeline.Pipeline;\n      19 | }\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/@aws-cdk/app-delivery/test/pipeline-deploy-stack-action.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/tools/@aws-cdk/pkglint/test/rules.test.ts: Missing semicolon. (8:16)\n\n       6 |\n       7 | describe('FeatureStabilityRule', () => {\n    >  8 |   let fakeModule: FakeModule | undefined;\n         |                 ^\n       9 |\n      10 |   beforeEach(() => {\n      11 |     fakeModule = undefined;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/tools/@aws-cdk/pkglint/test/rules.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/tools/@aws-cdk/prlint/test/parser.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { breakingModules } from '../parser';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/tools/@aws-cdk/prlint/test/parser.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/tools/@aws-cdk/pkglint/test/libary-creation.test.ts: Missing semicolon. (62:13)\n\n      60 |\n      61 | describe('createLibraryReadme', () => {\n    > 62 |   let tempDir: string | undefined;\n         |              ^\n      63 |\n      64 |   beforeEach(() => {\n      65 |     tempDir = undefined;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/tools/@aws-cdk/pkglint/test/libary-creation.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/cdk-assets/test/private/docker-credentials.test.ts: Missing semicolon. (9:7)\n\n       7 | const _ENV = process.env;\n       8 |\n    >  9 | let aws: ReturnType<typeof mockAws>;\n         |        ^\n      10 | beforeEach(() => {\n      11 |   jest.resetModules();\n      12 |   jest.resetAllMocks();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/cdk-assets/test/private/docker-credentials.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/tools/@aws-cdk/cdk-release/test/changelog.test.ts: Missing initializer in const declaration. (5:10)\n\n      3 | import { ExperimentalChangesTreatment, PackageInfo, Versions } from '../lib/types';\n      4 |\n    > 5 | const args: ChangelogOptions = {\n        |           ^\n      6 |   changelogFile: 'CHANGELOG.md',\n      7 |   dryRun: true,\n      8 |   silent: true,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/tools/@aws-cdk/cdk-release/test/changelog.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/tools/@aws-cdk/node-bundle/test/cli.test.ts: Unexpected token, expected \")\" (24:12)\n\n      22 |     ].join(' ');\n      23 |     shell(command, { cwd: pkg.dir, quiet: true });\n    > 24 |   } catch (e: any) {\n         |             ^\n      25 |     const violations = new Set(e.stderr.toString().trim().split('\\n').filter((l: string) => l.startsWith('-')));\n      26 |     const expected = new Set([\n      27 |       `- invalid-license: Dependency ${dep1.name}@${dep1.version} has an invalid license: UNKNOWN`,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/tools/@aws-cdk/node-bundle/test/cli.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/tools/@aws-cdk/prlint/test/module.test.ts: Unexpected token, expected \",\" (33:23)\n\n      31 |   });\n      32 |\n    > 33 |   function relative(loc: string) {\n         |                        ^\n      34 |     return path.relative(repoRoot, loc);\n      35 |   }\n      36 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/tools/@aws-cdk/prlint/test/module.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442888,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/tools/@aws-cdk/cdk-release/test/release-notes.test.ts: Unexpected token, expected \",\" (54:44)\n\n      52 | });\n      53 |\n    > 54 | function mockChangelogOnceForVersion(version: string, body: string) {\n         |                                             ^\n      55 |   changelogParser.mockImplementationOnce((_: string) => { return { versions: [{ version, body }] }; });\n      56 | }\n      57 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/tools/@aws-cdk/cdk-release/test/release-notes.test.ts","startTime":1674756442888,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/tools/@aws-cdk/cdk-release/test/conventional-commits.test.ts: Missing initializer in const declaration. (11:10)\n\n       9 | const gitRawCommits = require('git-raw-commits');\n      10 |\n    > 11 | const args: ReleaseOptions = {\n         |           ^\n      12 |   changelogFile: 'CHANGELOG.md',\n      13 |   dryRun: true,\n      14 |   silent: true,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/tools/@aws-cdk/cdk-release/test/conventional-commits.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/tools/@aws-cdk/cdk-release/test/bump.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as path from 'path';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/tools/@aws-cdk/cdk-release/test/bump.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/aws-cdk/test/util/validate-notification-arn.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { validateSnsTopicArn } from '../../lib/util/validate-notification-arn';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/aws-cdk/test/util/validate-notification-arn.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/util/stack-monitor.test.ts: Missing semicolon. (5:7)\n\n      3 | import { MockSdk } from './mock-sdk';\n      4 |\n    > 5 | let sdk: MockSdk;\n        |        ^\n      6 | let printer: FakePrinter;\n      7 | beforeEach(() => {\n      8 |   sdk = new MockSdk();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/util/stack-monitor.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/util/cloudformation.test.ts: Missing semicolon. (12:15)\n\n      10 | const USE_PREVIOUS = { ParameterKey: PARAM, UsePreviousValue: true };\n      11 |\n    > 12 | let sdkProvider: MockSdkProvider;\n         |                ^\n      13 | let describeStackMock: jest.Mock;\n      14 | let getTemplateMock: jest.Mock;\n      15 | let cfnMocks: MockedObject<SyncHandlerSubsetOf<AWS.CloudFormation>>;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/util/cloudformation.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/aws-cdk/test/util/version-range.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { rangeFromSemver } from '../../lib/util/version-range';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/aws-cdk/test/util/version-range.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/aws-cdk/test/util/console-formatters.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import * as chalk from 'chalk';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/aws-cdk/test/util/console-formatters.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/aws-cdk/test/util/applydefaults.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { applyDefaults } from '../../lib/util';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/aws-cdk/test/util/applydefaults.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/aws-cdk/test/util/objects.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { deepClone, deepGet, deepMerge, deepSet } from '../../lib/util';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/aws-cdk/test/util/objects.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/context-providers/vpcs.test.ts: Missing semicolon. (10:4)\n\n       8 | const mockSDK = new MockSdkProvider();\n       9 |\n    > 10 | type AwsCallback<T> = (err: Error | null, val: T) => void;\n         |     ^\n      11 |\n      12 | afterEach(done => {\n      13 |   AWS.restore();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/context-providers/vpcs.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/aws-cdk/test/util/arrays.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { flatMap, flatten, partition } from '../../lib/util';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/aws-cdk/test/util/arrays.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/context-providers/generic.test.ts: Missing initializer in const declaration. (8:19)\n\n       6 | const mockSDK = new MockSdkProvider();\n       7 |\n    >  8 | const TEST_PROVIDER: any = 'testprovider';\n         |                    ^\n       9 | const PLUGIN_PROVIDER: any = 'plugin';\n      10 |\n      11 | test('errors are reported into the context value', async () => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/context-providers/generic.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/context-providers/load-balancers.test.ts: Missing semicolon. (11:4)\n\n       9 | const mockSDK = new MockSdkProvider();\n      10 |\n    > 11 | type AwsCallback<T> = (err: Error | null, val: T) => void;\n         |     ^\n      12 |\n      13 | afterEach(done => {\n      14 |   AWS.restore();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/context-providers/load-balancers.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/util/awscli-compatible.test.ts: Unexpected token, expected \",\" (21:61)\n\n      19 |     mdService.request\n      20 |       // First call for a token\n    > 21 |       .mockImplementationOnce((_1, _2, cb) => { cb(undefined as any, 'token'); })\n         |                                                              ^\n      22 |       // Second call for the region\n      23 |       .mockImplementationOnce((_1, _2, cb) => { cb(undefined as any, JSON.stringify({ region: 'some-region' })); });\n      24 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/aws-cdk/test/util/awscli-compatible.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/context-providers/asymmetric-vpcs.test.ts: Unexpected token, expected \",\" (10:23)\n\n       8 | // the type check here takes too long and makes the TypeScript compiler fail.\n       9 | // Suppress the type check using 'as any' to make this more robust.\n    > 10 | AWS.setSDKInstance(aws as any);\n         |                        ^\n      11 |\n      12 | afterEach(done => {\n      13 |   AWS.restore();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/context-providers/asymmetric-vpcs.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/context-providers/keys.test.ts: Missing semicolon. (8:4)\n\n       6 | AWS.setSDK(require.resolve('aws-sdk'));\n       7 | const mockSDK = new MockSdkProvider();\n    >  8 | type AwsCallback<T> = (err: Error | null, val: T) => void;\n         |     ^\n       9 |\n      10 | afterEach(done => {\n      11 |   AWS.restore();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/context-providers/keys.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/toolkit-info.test.ts: Missing semicolon. (5:11)\n\n      3 |\n      4 |\n    > 5 | let mockSdk: MockSdk;\n        |            ^\n      6 | beforeEach(() => {\n      7 |   mockSdk = new MockSdk();\n      8 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/toolkit-info.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/context-providers/amis.test.ts: Unexpected token, expected \",\" (10:23)\n\n       8 | // the type check here takes too long and makes the TypeScript compiler fail.\n       9 | // Suppress the type check using 'as any' to make this more robust.\n    > 10 | AWS.setSDKInstance(aws as any);\n         |                        ^\n      11 |\n      12 | afterEach(done => {\n      13 |   AWS.restore();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/context-providers/amis.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/context-providers/security-groups.test.ts: Missing semicolon. (10:4)\n\n       8 | const mockSDK = new MockSdkProvider();\n       9 |\n    > 10 | type AwsCallback<T> = (err: Error | null, val: T) => void;\n         |     ^\n      11 |\n      12 | afterEach(done => {\n      13 |   AWS.restore();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/context-providers/security-groups.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/exec.test.ts: Missing semicolon. (15:15)\n\n      13 | import { MockSdkProvider } from '../util/mock-sdk';\n      14 |\n    > 15 | let sdkProvider: MockSdkProvider;\n         |                ^\n      16 | let config: Configuration;\n      17 | beforeEach(() => {\n      18 |   setLogLevel(LogLevel.DEBUG);\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/exec.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/commands/context-command.test.ts: Unexpected token, expected \",\" (18:6)\n\n      16 |       configuration,\n      17 |       args: {},\n    > 18 |     } as any);\n         |       ^\n      19 |   });\n      20 | });\n      21 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n","name":"/home/flakie/package/packages/aws-cdk/test/commands/context-command.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/lazy-list-stack-resources.test.ts: Missing initializer in const declaration. (8:26)\n\n       6 |   test('correctly caches calls to the CloudFormation API', async () => {\n       7 |     // GIVEN\n    >  8 |     const listStackResMock: jest.Mock<AWS.CloudFormation.ListStackResourcesOutput, AWS.CloudFormation.ListStackResourcesInput[]> = jest.fn();\n         |                           ^\n       9 |     const mockSdk = new MockSdk();\n      10 |     mockSdk.stubCloudFormation({\n      11 |       listStackResources: listStackResMock,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/lazy-list-stack-resources.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/cloud-executable.test.ts: Unexpected token, expected \",\" (70:20)\n\n      68 | test('stop executing if context providers are not making progress', async () => {\n      69 |   registerContextProvider(cxschema.ContextProvider.AVAILABILITY_ZONE_PROVIDER, {\n    > 70 |     async getValue(_: { [key: string]: any }): Promise<any> {\n         |                     ^\n      71 |       return 'foo';\n      72 |     },\n      73 |   });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/cloud-executable.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/deploy-stack.test.ts: Missing semicolon. (30:7)\n\n      28 | });\n      29 |\n    > 30 | let sdk: MockSdk;\n         |        ^\n      31 | let sdkProvider: MockSdkProvider;\n      32 | let cfnMocks: MockedObject<SyncHandlerSubsetOf<AWS.CloudFormation>>;\n      33 | let stderrMock: jest.SpyInstance;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/deploy-stack.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/bootstrap2.test.ts: Missing semicolon. (10:16)\n\n       8 | import { mockBootstrapStack, MockSdk, MockSdkProvider } from '../util/mock-sdk';\n       9 |\n    > 10 | let bootstrapper: Bootstrapper;\n         |                 ^\n      11 | beforeEach(() => {\n      12 |   bootstrapper = new Bootstrapper({ source: 'default' });\n      13 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/bootstrap2.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/sdk-provider.test.ts: Unexpected token, expected \"from\" (4:12)\n\n      2 | import * as cxapi from '@aws-cdk/cx-api';\n      3 | import * as AWS from 'aws-sdk';\n    > 4 | import type { ConfigurationOptions } from 'aws-sdk/lib/config-base';\n        |             ^\n      5 | import * as promptly from 'promptly';\n      6 | import * as uuid from 'uuid';\n      7 | import { ISDK, Mode, SDK, SdkProvider } from '../../lib/api/aws-auth';\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/sdk-provider.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/cloudformation-deployments.test.ts: Missing semicolon. (19:15)\n\n      17 | import { FakeCloudformationStack } from './fake-cloudformation-stack';\n      18 |\n    > 19 | let sdkProvider: MockSdkProvider;\n         |                ^\n      20 | let deployments: CloudFormationDeployments;\n      21 | let mockToolkitInfoLookup: jest.Mock;\n      22 | let currentCfnStackResources: { [key: string]: CloudFormation.StackResourceSummary[] };\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/cloudformation-deployments.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/stack-activity-monitor.test.ts: Missing semicolon. (5:13)\n\n      3 | import { stderr } from './console-listener';\n      4 |\n    > 5 | let TIMESTAMP: number;\n        |              ^\n      6 | let HUMAN_TIME: string;\n      7 |\n      8 | beforeAll(() => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/stack-activity-monitor.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/@monocdk-experiment/rewrite-imports/test/rewrite.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { rewriteImports } from '../lib/rewrite';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/@monocdk-experiment/rewrite-imports/test/rewrite.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/cdk-dasm/test/dasm.test.ts: Unexpected token, expected \",\" (49:28)\n\n      47 | });\n      48 |\n    > 49 | async function dasm(template: any) {\n         |                             ^\n      50 |   return dasmTypeScript(template, { timestamp: false });\n      51 | }\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/cdk-dasm/test/dasm.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/cloud-assembly.test.ts: Unexpected token, expected \",\" (158:40)\n\n      156 | });\n      157 |\n    > 158 | async function testCloudAssembly({ env }: { env?: string, versionReporting?: boolean } = {}) {\n          |                                         ^\n      159 |   const cloudExec = new MockCloudExecutable({\n      160 |     stacks: [{\n      161 |       stackName: 'withouterrors',\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/cloud-assembly.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/cdk-cli-wrapper/test/cdk-wrapper.test.ts: Missing semicolon. (4:17)\n\n      2 | import { CdkCliWrapper } from '../lib/cdk-wrapper';\n      3 | import { RequireApproval, StackActivityProgress } from '../lib/commands';\n    > 4 | let spawnSyncMock: jest.SpyInstance;\n        |                  ^\n      5 |\n      6 | beforeEach(() => {\n      7 |   spawnSyncMock = jest.spyOn(child_process, 'spawnSync').mockReturnValue({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/cdk-cli-wrapper/test/cdk-wrapper.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/api/bootstrap.test.ts: Missing semicolon. (13:7)\n\n      11 | };\n      12 |\n    > 13 | let sdk: MockSdkProvider;\n         |        ^\n      14 | let executed: boolean;\n      15 | let protectedTermination: boolean;\n      16 | let cfnMocks: jest.Mocked<SyncHandlerSubsetOf<AWS.CloudFormation>>;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/api/bootstrap.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/cdk-assets/test/util.test.ts: Unexpected token (8:32)\n\n       6 |\n       7 |   // WHEN\n    >  8 |   const arr = new Array<string>();\n         |                                 ^\n       9 |   void criticalSection(async () => {\n      10 |     await new Promise(res => setTimeout(res, 500));\n      11 |     arr.push('first');\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/cdk-assets/test/util.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/cdk-assets/test/zipping.test.ts: Missing semicolon. (7:7)\n\n       5 | import { mockAws, mockedApiResult, mockUpload } from './mock-aws';\n       6 |\n    >  7 | let aws: ReturnType<typeof mockAws>;\n         |        ^\n       8 | beforeEach(() => {\n       9 |   bockfs({\n      10 |     '/simple/cdk.out/assets.json': JSON.stringify({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/cdk-assets/test/zipping.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/cdk-assets/test/manifest.test.ts: Unexpected token, expected \",\" (110:14)\n\n      108 | });\n      109 |\n    > 110 | function f(obj: unknown, ...keys: string[]): any {\n          |               ^\n      111 |   for (const k of keys) {\n      112 |     if (typeof obj === 'object' && obj !== null && k in obj) {\n      113 |       return (obj as any)[k];\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/cdk-assets/test/manifest.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/cdk-assets/test/placeholders.test.ts: Missing semicolon. (6:7)\n\n      4 | import { mockAws, mockedApiResult } from './mock-aws';\n      5 |\n    > 6 | let aws: ReturnType<typeof mockAws>;\n        |        ^\n      7 | beforeEach(() => {\n      8 |   mockfs({\n      9 |     '/simple/cdk.out/assets.json': JSON.stringify({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/cdk-assets/test/placeholders.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/cdk-assets/test/progress.test.ts: Missing semicolon. (7:7)\n\n       5 | import { mockAws, mockedApiResult, mockUpload } from './mock-aws';\n       6 |\n    >  7 | let aws: ReturnType<typeof mockAws>;\n         |        ^\n       8 | beforeEach(() => {\n       9 |   mockfs({\n      10 |     '/simple/cdk.out/assets.json': JSON.stringify({\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/cdk-assets/test/progress.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/version.test.ts: Unexpected token, expected \"{\" (14:18)\n\n      12 | const setTimeout = promisify(_setTimeout);\n      13 |\n    > 14 | function tmpfile(): string {\n         |                   ^\n      15 |   return `/tmp/version-${Math.floor(Math.random() * 10000)}`;\n      16 | }\n      17 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/version.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/aws-cdk/test/yaml.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { deserializeStructure, toYAML } from '../lib/serialize';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/aws-cdk/test/yaml.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/aws-cdk-migration/test/rewrite.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { rewriteMonoPackageImports, rewriteReadmeImports } from '../lib/rewrite';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/aws-cdk-migration/test/rewrite.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/cdk-assets/test/archive.test.ts: Unexpected token, expected \",\" (87:25)\n\n      85 | });\n      86 |\n    > 87 | function contentHash(data: string | Buffer | DataView) {\n         |                          ^\n      88 |   return crypto.createHash('sha256').update(data).digest('hex');\n      89 | }\n      90 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/cdk-assets/test/archive.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/cdk-assets/test/files.test.ts: Missing semicolon. (19:7)\n\n      17 | };\n      18 |\n    > 19 | let aws: ReturnType<typeof mockAws>;\n         |        ^\n      20 | beforeEach(() => {\n      21 |   jest.resetAllMocks();\n      22 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/cdk-assets/test/files.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/cdk-assets/test/docker-images.test.ts: Missing semicolon. (12:7)\n\n      10 |\n      11 |\n    > 12 | let aws: ReturnType<typeof mockAws>;\n         |        ^\n      13 | const absoluteDockerPath = '/simple/cdk.out/dockerdir';\n      14 | beforeEach(() => {\n      15 |   jest.resetAllMocks();\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/cdk-assets/test/docker-images.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/usersettings.test.ts: Missing initializer in const declaration. (15:20)\n\n      13 | test('load settings from both files if available', async () => {\n      14 |   // GIVEN\n    > 15 |   const GIVEN_CONFIG: Map<string, any> = new Map([\n         |                     ^\n      16 |     [PROJECT_CONFIG, {\n      17 |       project: 'foobar',\n      18 |     }],\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/usersettings.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/aws-cdk/test/settings.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { Command, Context, Settings } from '../lib/settings';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/aws-cdk/test/settings.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /home/flakie/package/packages/aws-cdk/test/serialize.test.ts:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import { toYAML } from '../lib/serialize';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (../../../usr/local/lib/node_modules/jest/node_modules/jest-runtime/build/index.js:1449:14)\n","name":"/home/flakie/package/packages/aws-cdk/test/serialize.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/notices.test.ts: Unexpected token, expected \",\" (263:32)\n\n      261 |     });\n      262 |\n    > 263 |     function mockCall(statusCode: number, body: any): Promise<Notice[]> {\n          |                                 ^\n      264 |       nock('https://cli.cdk.dev-tools.aws.dev')\n      265 |         .get('/notices.json')\n      266 |         .reply(statusCode, body);\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/notices.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/import.test.ts: Missing semicolon. (15:40)\n\n      13 | import { MockSdkProvider } from './util/mock-sdk';\n      14 |\n    > 15 | const promptlyConfirm = promptly.confirm as jest.Mock;\n         |                                         ^\n      16 | const promptlyPrompt = promptly.prompt as jest.Mock;\n      17 |\n      18 | let createChangeSetInput: AWS.CloudFormation.CreateChangeSetInput | undefined;\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/import.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/deploy.test.ts: Missing semicolon. (4:4)\n\n      2 | import { deployStacks } from '../lib/deploy';\n      3 |\n    > 4 | type Stack = cxapi.CloudFormationStackArtifact;\n        |     ^\n      5 |\n      6 | const sleep = async (duration: number) => new Promise<void>((resolve) => setTimeout(() => resolve(), duration));\n      7 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/deploy.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/init.test.ts: Unexpected token, expected \",\" (154:21)\n\n      152 | });\n      153 |\n    > 154 | function cliTest(name: string, handler: (dir: string) => void | Promise<any>): void {\n          |                      ^\n      155 |   test(name, () => withTempDir(handler));\n      156 | }\n      157 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/init.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/cdk-docs.test.ts: Unexpected token, expected \",\" (7:28)\n\n       5 | const argv = {\n       6 |   browser: 'echo %u',\n    >  7 |   commandHandler: undefined as (CommandHandler | undefined),\n         |                             ^\n       8 | };\n       9 |\n      10 | describe('`cdk docs`', () => {\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/cdk-docs.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/context.test.ts: Missing initializer in const declaration. (6:11)\n\n      4 | import { Configuration, TRANSIENT_CONTEXT_KEY } from '../lib/settings';\n      5 |\n    > 6 | const state: {\n        |            ^\n      7 |   previousWorkingDir?: string;\n      8 |   tempDir?: string;\n      9 | } = {};\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/context.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/cdk-doctor.test.ts: Missing initializer in const declaration. (20:14)\n\n      18 |\n      19 |   test('exits with 0 when everything is OK', async () => {\n    > 20 |     const argv: any = {};\n         |               ^\n      21 |     const result = await realHandler({ args: argv } as any);\n      22 |     expect(result).toBe(0);\n      23 |   });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/cdk-doctor.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/diff.test.ts: Missing semicolon. (9:19)\n\n       7 | import { instanceMockFrom, MockCloudExecutable } from './util';\n       8 |\n    >  9 | let cloudExecutable: MockCloudExecutable;\n         |                    ^\n      10 | let cloudFormation: jest.Mocked<CloudFormationDeployments>;\n      11 | let toolkit: CdkToolkit;\n      12 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/diff.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/assets.test.ts: Missing semicolon. (9:11)\n\n       7 | import { MockToolkitInfo } from './util/mock-toolkitinfo';\n       8 |\n    >  9 | let toolkit: ToolkitInfo;\n         |            ^\n      10 | let assets: AssetManifestBuilder;\n      11 | beforeEach(() => {\n      12 |   toolkit = new MockToolkitInfo(new MockSdk());\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/assets.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/build.test.ts: Missing semicolon. (4:4)\n\n      2 | import { buildAllStackAssets } from '../lib/build';\n      3 |\n    > 4 | type Stack = cxapi.CloudFormationStackArtifact;\n        |     ^\n      5 |\n      6 | describe('buildAllStackAssets', () => {\n      7 |   const A = { id: 'A' };\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/build.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/aws-sdk-non-public-apis.test.ts: Missing semicolon. (8:14)\n\n       6 | import * as AWS from 'aws-sdk';\n       7 |\n    >  8 | let ecsService: AWS.ECS;\n         |               ^\n       9 | beforeEach(() => {\n      10 |   ecsService = new AWS.ECS();\n      11 | });\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/aws-sdk-non-public-apis.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/cdk-toolkit.test.ts: Unexpected token, expected \"{\" (7:21)\n\n       5 | };\n       6 | const fakeChokidarWatcherOn = {\n    >  7 |   get readyCallback(): () => void {\n         |                      ^\n       8 |     expect(mockChokidarWatcherOn.mock.calls.length).toBeGreaterThanOrEqual(1);\n       9 |     // The call to the first 'watcher.on()' in the production code is the one we actually want here.\n      10 |     // This is a pretty fragile, but at least with this helper class,\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/cdk-toolkit.test.ts","startTime":1674756442889,"status":"failed","summary":""},{"assertionResults":[],"coverage":{},"endTime":1674756442889,"message":"  ● Test suite failed to run\n\n    SyntaxError: /home/flakie/package/packages/aws-cdk/test/account-cache.test.ts: Unexpected token, expected \",\" (16:33)\n\n      14 | }\n      15 |\n    > 16 | async function nukeCache(cacheDir: string) {\n         |                                  ^\n      17 |   await fs.remove(cacheDir);\n      18 | }\n      19 |\n\n      at instantiate (../../../usr/local/lib/node_modules/jest/node_modules/@babel/parser/src/parse-error/credentials.ts:62:21)\n          at parser.next (<anonymous>)\n          at normalizeFile.next (<anonymous>)\n          at run.next (<anonymous>)\n          at transform.next (<anonymous>)\n","name":"/home/flakie/package/packages/aws-cdk/test/account-cache.test.ts","startTime":1674756442889,"status":"failed","summary":""}],"wasInterrupted":false}