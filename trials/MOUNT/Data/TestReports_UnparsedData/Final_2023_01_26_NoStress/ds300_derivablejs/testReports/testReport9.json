{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":10,"numPassedTests":77,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTotalTestSuites":10,"numTotalTests":77,"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"unmatched":0,"updated":0},"startTime":1674712809802,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"__Reactor call passed function on derivable change after starting","status":"passed","title":"__Reactor call passed function on derivable change after starting"},{"ancestorTitles":[],"failureMessages":[],"fullName":"__Reactor not call passed function on derivable change after stopping","status":"passed","title":"__Reactor not call passed function on derivable change after stopping"},{"ancestorTitles":[],"failureMessages":[],"fullName":"__Reactor call passed function with current value on forcing","status":"passed","title":"__Reactor call passed function with current value on forcing"},{"ancestorTitles":[],"failureMessages":[],"fullName":"__captureDereferences executes the given function, returning an array of captured dereferences","status":"passed","title":"__captureDereferences executes the given function, returning an array of captured dereferences"},{"ancestorTitles":[],"failureMessages":[],"fullName":"__captureDereferences also capture reactor controller","status":"passed","title":"__captureDereferences also capture reactor controller"}],"endTime":1674712810099,"message":"","name":"/home/flakie/package/test/private.test.js","startTime":1674712810009,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["anonymous reactors"],"failureMessages":[],"fullName":"anonymous reactors are created with the .react method","status":"passed","title":"are created with the .react method"},{"ancestorTitles":["anonymous reactors"],"failureMessages":[],"fullName":"anonymous reactors can start when the `from` condition becomes truthy","status":"passed","title":"can start when the `from` condition becomes truthy"},{"ancestorTitles":["anonymous reactors"],"failureMessages":[],"fullName":"anonymous reactors can stop (forever) when the `until` condition becomes truthy","status":"passed","title":"can stop (forever) when the `until` condition becomes truthy"},{"ancestorTitles":["anonymous reactors"],"failureMessages":[],"fullName":"anonymous reactors can start and stop when the `when` condition becomes truthy and falsey respectively","status":"passed","title":"can start and stop when the `when` condition becomes truthy and falsey respectively"},{"ancestorTitles":["anonymous reactors"],"failureMessages":[],"fullName":"anonymous reactors can have `from`, `when`, and `until` specified as functions","status":"passed","title":"can have `from`, `when`, and `until` specified as functions"},{"ancestorTitles":["anonymous reactors"],"failureMessages":[],"fullName":"anonymous reactors can have `from`, `when`, and `until` specified as functions that use the derivable itself","status":"passed","title":"can have `from`, `when`, and `until` specified as functions that use the derivable itself"},{"ancestorTitles":["anonymous reactors"],"failureMessages":[],"fullName":"anonymous reactors doesnt like it when `from`, `when`, and `until` are other things","status":"passed","title":"doesnt like it when `from`, `when`, and `until` are other things"},{"ancestorTitles":["anonymous reactors"],"failureMessages":[],"fullName":"anonymous reactors can have `from`, `when`, and `until` conditions all at once","status":"passed","title":"can have `from`, `when`, and `until` conditions all at once"},{"ancestorTitles":["anonymous reactors"],"failureMessages":[],"fullName":"anonymous reactors can specify that the first reaction should be skipped","status":"passed","title":"can specify that the first reaction should be skipped"},{"ancestorTitles":["anonymous reactors"],"failureMessages":[],"fullName":"anonymous reactors can specify that a reaction should only happen once","status":"passed","title":"can specify that a reaction should only happen once"},{"ancestorTitles":[],"failureMessages":[],"fullName":"reactor do not create derivation for lifecycle function","status":"passed","title":"reactor do not create derivation for lifecycle function"},{"ancestorTitles":["the .react method"],"failureMessages":[],"fullName":"the .react method must have a function as the first argument","status":"passed","title":"must have a function as the first argument"},{"ancestorTitles":["setting the values of atoms in a reaction phase"],"failureMessages":[],"fullName":"setting the values of atoms in a reaction phase is ok as long as no cycles are created","status":"passed","title":"is ok as long as no cycles are created"},{"ancestorTitles":["setting the values of atoms in a reaction phase"],"failureMessages":[],"fullName":"setting the values of atoms in a reaction phase is not allowed if the atom in question is upstream of the reactor","status":"passed","title":"is not allowed if the atom in question is upstream of the reactor"},{"ancestorTitles":["tickers"],"failureMessages":[],"fullName":"tickers allow reacting at custom intervals","status":"passed","title":"allow reacting at custom intervals"},{"ancestorTitles":["tickers"],"failureMessages":[],"fullName":"tickers can be used by more than one piece of the stack","status":"passed","title":"can be used by more than one piece of the stack"},{"ancestorTitles":["tickers"],"failureMessages":[],"fullName":"tickers are reference counted","status":"passed","title":"are reference counted"},{"ancestorTitles":["tickers"],"failureMessages":[],"fullName":"tickers can reset the global state to the last tick","status":"passed","title":"can reset the global state to the last tick"},{"ancestorTitles":["tickers"],"failureMessages":[],"fullName":"tickers cannot be used after being released","status":"passed","title":"cannot be used after being released"},{"ancestorTitles":["tickers"],"failureMessages":[],"fullName":"tickers should not cause parents to be investigated in the wrong order","status":"passed","title":"should not cause parents to be investigated in the wrong order"},{"ancestorTitles":["tickers"],"failureMessages":[],"fullName":"tickers can be created in reactors","status":"passed","title":"can be created in reactors"},{"ancestorTitles":["the `when` optons to the `react` method"],"failureMessages":[],"fullName":"the `when` optons to the `react` method allows one to tie the lifecycle of a reactor to some piece of state anonymously","status":"passed","title":"allows one to tie the lifecycle of a reactor to some piece of state anonymously"},{"ancestorTitles":["the `when` optons to the `react` method"],"failureMessages":[],"fullName":"the `when` optons to the `react` method casts the condition to a boolean","status":"passed","title":"casts the condition to a boolean"},{"ancestorTitles":["the .maybeReact method"],"failureMessages":[],"fullName":"the .maybeReact method only reacts when the thing in the derivable is not null or undefined","status":"passed","title":"only reacts when the thing in the derivable is not null or undefined"},{"ancestorTitles":["the .maybeReact method"],"failureMessages":[],"fullName":"the .maybeReact method merges any given when condition","status":"passed","title":"merges any given when condition"},{"ancestorTitles":["the .maybeReact method"],"failureMessages":[],"fullName":"the .maybeReact method shouldn't touch any other conditions","status":"passed","title":"shouldn't touch any other conditions"}],"endTime":1674712810125,"message":"","name":"/home/flakie/package/test/reactor.test.js","startTime":1674712810105,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["a derivation"],"failureMessages":[],"fullName":"a derivation can be created via the derive function in the derivable package","status":"passed","title":"can be created via the derive function in the derivable package"},{"ancestorTitles":["a derivation"],"failureMessages":[],"fullName":"a derivation can derive from more than one atom","status":"passed","title":"can derive from more than one atom"},{"ancestorTitles":["a derivation"],"failureMessages":[],"fullName":"a derivation can be re-instantiated with custom equality-checking","status":"passed","title":"can be re-instantiated with custom equality-checking"},{"ancestorTitles":["derivations inside a transaction"],"failureMessages":[],"fullName":"derivations inside a transaction can take on temporary values","status":"passed","title":"can take on temporary values"},{"ancestorTitles":["derivations inside a transaction"],"failureMessages":[],"fullName":"derivations inside a transaction can take on temporary values even in nested transactions","status":"passed","title":"can take on temporary values even in nested transactions"},{"ancestorTitles":["derivations inside a transaction"],"failureMessages":[],"fullName":"derivations inside a transaction can be dereferenced in nested transactions","status":"passed","title":"can be dereferenced in nested transactions"},{"ancestorTitles":["derivations inside a transaction"],"failureMessages":[],"fullName":"derivations inside a transaction can be mutated indirectly in nested transactions","status":"passed","title":"can be mutated indirectly in nested transactions"},{"ancestorTitles":["nested derivables"],"failureMessages":[],"fullName":"nested derivables should work in the appropriate fashion","status":"passed","title":"should work in the appropriate fashion"},{"ancestorTitles":["nested derivables"],"failureMessages":[],"fullName":"nested derivables should let reactors adapt to changes in atoms","status":"passed","title":"should let reactors adapt to changes in atoms"},{"ancestorTitles":["nested derivables"],"failureMessages":[],"fullName":"nested derivables should not interfere with lifecycle control","status":"passed","title":"should not interfere with lifecycle control"},{"ancestorTitles":["nested derivables"],"failureMessages":[],"fullName":"nested derivables should not interfere with boolean casting?!","status":"passed","title":"should not interfere with boolean casting?!"}],"endTime":1674712810142,"message":"","name":"/home/flakie/package/test/derivation.test.js","startTime":1674712810128,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["the `is*` fns"],"failureMessages":[],"fullName":"the `is*` fns just work, don't worry about it","status":"passed","title":"just work, don't worry about it"},{"ancestorTitles":["the `transact` function"],"failureMessages":[],"fullName":"the `transact` function executes a function in the context of a transaction","status":"passed","title":"executes a function in the context of a transaction"},{"ancestorTitles":["the `transaction` function"],"failureMessages":[],"fullName":"the `transaction` function wraps a function such that its body is executed in a txn","status":"passed","title":"wraps a function such that its body is executed in a txn"},{"ancestorTitles":["debug mode"],"failureMessages":[],"fullName":"debug mode causes derivations and reactors to store the stacktraces of their instantiation points","status":"passed","title":"causes derivations and reactors to store the stacktraces of their instantiation points"},{"ancestorTitles":["debug mode"],"failureMessages":[],"fullName":"debug mode causes stack traces to be printed when things derivations and reactors throw errors","status":"passed","title":"causes stack traces to be printed when things derivations and reactors throw errors"},{"ancestorTitles":["the atomically function"],"failureMessages":[],"fullName":"the atomically function creates a transaction if not already in a transaction","status":"passed","title":"creates a transaction if not already in a transaction"},{"ancestorTitles":["the atomically function"],"failureMessages":[],"fullName":"the atomically function doesn't create new transactions if already in a transaction","status":"passed","title":"doesn't create new transactions if already in a transaction"},{"ancestorTitles":["the atomic function"],"failureMessages":[],"fullName":"the atomic function creates a transaction if not already in a transaction","status":"passed","title":"creates a transaction if not already in a transaction"},{"ancestorTitles":["the atomic function"],"failureMessages":[],"fullName":"the atomic function doesn't create new transactions if already in a transaction","status":"passed","title":"doesn't create new transactions if already in a transaction"}],"endTime":1674712810159,"message":"","name":"/home/flakie/package/test/module.test.js","startTime":1674712810145,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"unpack extracts value from derivable","status":"passed","title":"unpack extracts value from derivable"},{"ancestorTitles":[],"failureMessages":[],"fullName":"unpack returns non derivable value without change","status":"passed","title":"unpack returns non derivable value without change"},{"ancestorTitles":[],"failureMessages":[],"fullName":"struct expects a plain object or a plain array","status":"passed","title":"struct expects a plain object or a plain array"},{"ancestorTitles":[],"failureMessages":[],"fullName":"struct turns an array of derivables into a derivable","status":"passed","title":"struct turns an array of derivables into a derivable"},{"ancestorTitles":[],"failureMessages":[],"fullName":"struct turns a map of derivables into a derivable","status":"passed","title":"struct turns a map of derivables into a derivable"},{"ancestorTitles":[],"failureMessages":[],"fullName":"struct actually turns any arbitrarily nested structure of maybe-derivables into a derivable","status":"passed","title":"struct actually turns any arbitrarily nested structure of maybe-derivables into a derivable"},{"ancestorTitles":[],"failureMessages":[],"fullName":"struct only accepts plain objects or arrays","status":"passed","title":"struct only accepts plain objects or arrays"}],"endTime":1674712810172,"message":"","name":"/home/flakie/package/test/unpack.test.js","startTime":1674712810161,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"can be dereferenced via .get to obtain its current state","status":"passed","title":"can be dereferenced via .get to obtain its current state"},{"ancestorTitles":[],"failureMessages":[],"fullName":"can be .set to change its current state","status":"passed","title":"can be .set to change its current state"},{"ancestorTitles":[],"failureMessages":[],"fullName":"can .update (a la swap in clojure)","status":"passed","title":"can .update (a la swap in clojure)"},{"ancestorTitles":[],"failureMessages":[],"fullName":"update with arguments","status":"passed","title":"update with arguments"},{"ancestorTitles":[],"failureMessages":[],"fullName":"can take on temporary values inside a transaction","status":"passed","title":"can take on temporary values inside a transaction"},{"ancestorTitles":[],"failureMessages":[],"fullName":"should be able to go back to its original value with no ill effects","status":"passed","title":"should be able to go back to its original value with no ill effects"},{"ancestorTitles":[],"failureMessages":[],"fullName":"can keep transaction values if they are't aborted","status":"passed","title":"can keep transaction values if they are't aborted"},{"ancestorTitles":[],"failureMessages":[],"fullName":"can include an equality-checking function","status":"passed","title":"can include an equality-checking function"},{"ancestorTitles":[],"failureMessages":[],"fullName":"only likes functions or falsey things for equality functions","status":"passed","title":"only likes functions or falsey things for equality functions"},{"ancestorTitles":[],"failureMessages":[],"fullName":"the concurrent modification of _reactors bug doesnt happen any more","status":"passed","title":"the concurrent modification of _reactors bug doesnt happen any more"}],"endTime":1674712810184,"message":"","name":"/home/flakie/package/test/atom.test.js","startTime":1674712810173,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"derive derivable value with function","status":"passed","title":"derive derivable value with function"},{"ancestorTitles":[],"failureMessages":[],"fullName":"maybe derive derivable (non-null) value with function","status":"passed","title":"maybe derive derivable (non-null) value with function"},{"ancestorTitles":[],"failureMessages":[],"fullName":"is method","status":"passed","title":"is method"},{"ancestorTitles":[],"failureMessages":[],"fullName":"maybe default prefers passed value or derivable over null or undefined","status":"passed","title":"maybe default prefers passed value or derivable over null or undefined"}],"endTime":1674712810197,"message":"","name":"/home/flakie/package/test/derivable.test.js","startTime":1674712810187,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"can be re-instantiated with custom equality-checking","status":"passed","title":"can be re-instantiated with custom equality-checking"},{"ancestorTitles":[],"failureMessages":[],"fullName":"allow multiple atoms to be proxied over","status":"passed","title":"allow multiple atoms to be proxied over"},{"ancestorTitles":[],"failureMessages":[],"fullName":"runs `set` opeartions atomically","status":"passed","title":"runs `set` opeartions atomically"}],"endTime":1674712810209,"message":"","name":"/home/flakie/package/test/proxy.test.js","startTime":1674712810199,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"warn about multiple instances","status":"passed","title":"warn about multiple instances"}],"endTime":1674712810218,"message":"","name":"/home/flakie/package/test/multiple.test.js","startTime":1674712810210,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":[],"failureMessages":[],"fullName":"capture every atom get and pass to devtools hook","status":"passed","title":"capture every atom get and pass to devtools hook"}],"endTime":1674712810229,"message":"","name":"/home/flakie/package/test/devtools.test.js","startTime":1674712810220,"status":"passed","summary":""}],"wasInterrupted":false}