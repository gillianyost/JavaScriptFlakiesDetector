{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":2,"numPassedTests":41,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTotalTestSuites":2,"numTotalTests":41,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1665737985817,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["handlePullRequestChange"],"failureMessages":[],"fullName":"handlePullRequestChange it is a function","location":null,"status":"passed","title":"it is a function"},{"ancestorTitles":["handlePullRequestChange"],"failureMessages":[],"fullName":"handlePullRequestChange sets `failure` status if PR has no semantic commits and no semantic title","location":null,"status":"passed","title":"sets `failure` status if PR has no semantic commits and no semantic title"},{"ancestorTitles":["handlePullRequestChange","when `enabled` is set to `false` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `enabled` is set to `false` in config sets `success` status with a skipped message","location":null,"status":"passed","title":"sets `success` status with a skipped message"},{"ancestorTitles":["handlePullRequestChange","custom scopes"],"failureMessages":[],"fullName":"handlePullRequestChange custom scopes sets `success` status if PR has semantic title with available scope","location":null,"status":"passed","title":"sets `success` status if PR has semantic title with available scope"},{"ancestorTitles":["handlePullRequestChange","custom scopes"],"failureMessages":[],"fullName":"handlePullRequestChange custom scopes sets `failure` status if PR has semantic title with invalid scope","location":null,"status":"passed","title":"sets `failure` status if PR has semantic title with invalid scope"},{"ancestorTitles":["handlePullRequestChange","custom scopes"],"failureMessages":[],"fullName":"handlePullRequestChange custom scopes sets `failure` status if PR has semantic commit with invalid scope","location":null,"status":"passed","title":"sets `failure` status if PR has semantic commit with invalid scope"},{"ancestorTitles":["handlePullRequestChange","custom scopes"],"failureMessages":[],"fullName":"handlePullRequestChange custom scopes sets `success` status if PR has semantic title with available scope","location":null,"status":"passed","title":"sets `success` status if PR has semantic title with available scope"},{"ancestorTitles":["handlePullRequestChange","when `commitsOnly` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `commitsOnly` is set to `true` in config sets `failure` status if PR has no semantic commits","location":null,"status":"passed","title":"sets `failure` status if PR has no semantic commits"},{"ancestorTitles":["handlePullRequestChange","when `commitsOnly` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `commitsOnly` is set to `true` in config sets `failure` status if PR has no semantic commits but has a semantic title","location":null,"status":"passed","title":"sets `failure` status if PR has no semantic commits but has a semantic title"},{"ancestorTitles":["handlePullRequestChange","when `commitsOnly` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `commitsOnly` is set to `true` in config sets `failure` status if one or commits are not well formed","location":null,"status":"passed","title":"sets `failure` status if one or commits are not well formed"},{"ancestorTitles":["handlePullRequestChange","when `commitsOnly` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `commitsOnly` is set to `true` in config Only lints commits","location":null,"status":"passed","title":"Only lints commits"},{"ancestorTitles":["handlePullRequestChange","when `titleOnly` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `titleOnly` is set to `true` in config sets `failure` status if PR has no semantic PR title","location":null,"status":"passed","title":"sets `failure` status if PR has no semantic PR title"},{"ancestorTitles":["handlePullRequestChange","when `titleOnly` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `titleOnly` is set to `true` in config sets `failure` status if PR has no semantic PR title but has semantic commits","location":null,"status":"passed","title":"sets `failure` status if PR has no semantic PR title but has semantic commits"},{"ancestorTitles":["handlePullRequestChange","when `titleOnly` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `titleOnly` is set to `true` in config Only lints title","location":null,"status":"passed","title":"Only lints title"},{"ancestorTitles":["handlePullRequestChange","when `titleAndCommits` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `titleAndCommits` is set to `true` in config sets `failure` status if PR has no semantic PR title","location":null,"status":"passed","title":"sets `failure` status if PR has no semantic PR title"},{"ancestorTitles":["handlePullRequestChange","when `titleAndCommits` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `titleAndCommits` is set to `true` in config sets `failure` status if PR has no semantic PR title but has semantic commits","location":null,"status":"passed","title":"sets `failure` status if PR has no semantic PR title but has semantic commits"},{"ancestorTitles":["handlePullRequestChange","when `titleAndCommits` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `titleAndCommits` is set to `true` in config sets `failure` status if PR has no semantic PR title and has no semantic commits","location":null,"status":"passed","title":"sets `failure` status if PR has no semantic PR title and has no semantic commits"},{"ancestorTitles":["handlePullRequestChange","when `titleAndCommits` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `titleAndCommits` is set to `true` in config lints title and commits","location":null,"status":"passed","title":"lints title and commits"},{"ancestorTitles":["handlePullRequestChange","when `anyCommit` is set to `true` in config","when no commits are semantic and `commitsOnly` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `anyCommit` is set to `true` in config when no commits are semantic and `commitsOnly` is set to `true` in config sets `failure` status with description: add a semantic commit","location":null,"status":"passed","title":"sets `failure` status with description: add a semantic commit"},{"ancestorTitles":["handlePullRequestChange","when `anyCommit` is set to `true` in config","when no commits are semantic and `titleAndCommits` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `anyCommit` is set to `true` in config when no commits are semantic and `titleAndCommits` is set to `true` in config sets `failure` status with description: add a semantic commit AND PR title","location":null,"status":"passed","title":"sets `failure` status with description: add a semantic commit AND PR title"},{"ancestorTitles":["handlePullRequestChange","when `anyCommit` is set to `true` in config","when all commits are semantic and `commitsOnly` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `anyCommit` is set to `true` in config when all commits are semantic and `commitsOnly` is set to `true` in config sets `success` status with description: ready to be merged or rebased","location":null,"status":"passed","title":"sets `success` status with description: ready to be merged or rebased"},{"ancestorTitles":["handlePullRequestChange","when `anyCommit` is set to `true` in config","when all commits are semantic and `titleAndCommits` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `anyCommit` is set to `true` in config when all commits are semantic and `titleAndCommits` is set to `true` in config sets `success` status with description: ready to be merged, squashed or rebased","location":null,"status":"passed","title":"sets `success` status with description: ready to be merged, squashed or rebased"},{"ancestorTitles":["handlePullRequestChange","when `anyCommit` is set to `true` in config","when some commits are semantic and `commitsOnly` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `anyCommit` is set to `true` in config when some commits are semantic and `commitsOnly` is set to `true` in config sets `success` status with description: ready to be merged or rebased","location":null,"status":"passed","title":"sets `success` status with description: ready to be merged or rebased"},{"ancestorTitles":["handlePullRequestChange","when `anyCommit` is set to `true` in config","when some commits are semantic and `titleAndCommits` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `anyCommit` is set to `true` in config when some commits are semantic and `titleAndCommits` is set to `true` in config sets `success` status with description: ready to be merged, squashed or rebased","location":null,"status":"passed","title":"sets `success` status with description: ready to be merged, squashed or rebased"},{"ancestorTitles":["handlePullRequestChange","when `allowMergeCommits` is set to `true` AND `commitsOnly`is set to `true` too in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `allowMergeCommits` is set to `true` AND `commitsOnly`is set to `true` too in config sets `success` status if PR has Merge commit","location":null,"status":"passed","title":"sets `success` status if PR has Merge commit"},{"ancestorTitles":["handlePullRequestChange","when `allowMergeCommits` is set to `false` AND `commitsOnly` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `allowMergeCommits` is set to `false` AND `commitsOnly` is set to `true` in config sets `failure` status if PR has Merge commit","location":null,"status":"passed","title":"sets `failure` status if PR has Merge commit"},{"ancestorTitles":["handlePullRequestChange","when `allowRevertCommits` is set to `true` AND `commitsOnly`is set to `true` too in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `allowRevertCommits` is set to `true` AND `commitsOnly`is set to `true` too in config sets `success` status if PR has Merge commit","location":null,"status":"passed","title":"sets `success` status if PR has Merge commit"},{"ancestorTitles":["handlePullRequestChange","when `allowRevertCommits` is set to `false` AND `commitsOnly` is set to `true` in config"],"failureMessages":[],"fullName":"handlePullRequestChange when `allowRevertCommits` is set to `false` AND `commitsOnly` is set to `true` in config sets `failure` status if PR has Merge commit","location":null,"status":"passed","title":"sets `failure` status if PR has Merge commit"},{"ancestorTitles":["handlePullRequestChange","vanilla setup (no config)"],"failureMessages":[],"fullName":"handlePullRequestChange vanilla setup (no config) sets `success` status and `ready to be merged or squashed` description if PR has semantic commits but no semantic title","location":null,"status":"passed","title":"sets `success` status and `ready to be merged or squashed` description if PR has semantic commits but no semantic title"},{"ancestorTitles":["handlePullRequestChange","vanilla setup (no config)"],"failureMessages":[],"fullName":"handlePullRequestChange vanilla setup (no config) sets `failure` status and `PR has only one non-merge commit and it's not semantic` description if PR has has only one un-semantic commit","location":null,"status":"passed","title":"sets `failure` status and `PR has only one non-merge commit and it's not semantic` description if PR has has only one un-semantic commit"},{"ancestorTitles":["handlePullRequestChange","vanilla setup (no config)"],"failureMessages":[],"fullName":"handlePullRequestChange vanilla setup (no config) encourages squashing when title is semantic but commits are not","location":null,"status":"passed","title":"encourages squashing when title is semantic but commits are not"},{"ancestorTitles":["handlePullRequestChange","vanilla setup (no config)"],"failureMessages":[],"fullName":"handlePullRequestChange vanilla setup (no config) allows `build:` as a prefix","location":null,"status":"passed","title":"allows `build:` as a prefix"}],"endTime":1665737987010,"message":"","name":"/home/flakie/package/__tests__/handle-pull-request-change.js","startTime":1665737986345,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["isSemanticMessage"],"failureMessages":[],"fullName":"isSemanticMessage returns true when messages are semantic","location":null,"status":"passed","title":"returns true when messages are semantic"},{"ancestorTitles":["isSemanticMessage"],"failureMessages":[],"fullName":"isSemanticMessage allows parenthetical scope following the type","location":null,"status":"passed","title":"allows parenthetical scope following the type"},{"ancestorTitles":["isSemanticMessage"],"failureMessages":[],"fullName":"isSemanticMessage returns false on bad input","location":null,"status":"passed","title":"returns false on bad input"},{"ancestorTitles":["isSemanticMessage"],"failureMessages":[],"fullName":"isSemanticMessage should check message scope","location":null,"status":"passed","title":"should check message scope"},{"ancestorTitles":["isSemanticMessage"],"failureMessages":[],"fullName":"isSemanticMessage allows merge commits","location":null,"status":"passed","title":"allows merge commits"},{"ancestorTitles":["isSemanticMessage - Handling validTypes"],"failureMessages":[],"fullName":"isSemanticMessage - Handling validTypes return true for all default types when validTypes is provided","location":null,"status":"passed","title":"return true for all default types when validTypes is provided"},{"ancestorTitles":["isSemanticMessage - Handling validTypes"],"failureMessages":[],"fullName":"isSemanticMessage - Handling validTypes return false for none default types when validTypes is provided","location":null,"status":"passed","title":"return false for none default types when validTypes is provided"},{"ancestorTitles":["isSemanticMessage - Handling validTypes"],"failureMessages":[],"fullName":"isSemanticMessage - Handling validTypes return true for types included in supplied validTypes","location":null,"status":"passed","title":"return true for types included in supplied validTypes"},{"ancestorTitles":["isSemanticMessage - Handling validTypes"],"failureMessages":[],"fullName":"isSemanticMessage - Handling validTypes return false for types NOT included in supplied validTypes","location":null,"status":"passed","title":"return false for types NOT included in supplied validTypes"}],"endTime":1665737987059,"message":"","name":"/home/flakie/package/__tests__/is-semantic-message.js","startTime":1665737987021,"status":"passed","summary":""}],"wasInterrupted":false}